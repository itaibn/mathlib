import data.real.basic
import data.finset.pi_induction
import data.finset.pimage
import data.set.intervals.pi
import analysis.specific_limits

open_locale classical nnreal ennreal topological_space filter
open function filter

noncomputable theory

variables {Œπ : Type*}

@[ext] structure partition_box (Œπ : Type*) :=
(lower upper : Œπ ‚Üí ‚Ñù)
(lower_lt_upper : ‚àÄ i, lower i < upper i)

attribute [simp] partition_box.lower_lt_upper

namespace partition_box

open set

variables (I J : partition_box Œπ) {x y : Œπ ‚Üí ‚Ñù}

instance : inhabited (partition_box Œπ) := ‚ü®‚ü®0, 1, Œª i, zero_lt_one‚ü©‚ü©

protected def Icc : set (Œπ ‚Üí ‚Ñù) := Icc I.lower I.upper
protected def Ioc : set (Œπ ‚Üí ‚Ñù) := {x | ‚àÄ i, x i ‚àà Ioc (I.lower i) (I.upper i)}

lemma Icc_def : I.Icc = Icc I.lower I.upper := rfl

lemma Ioc_def : I.Ioc = {x | ‚àÄ i, x i ‚àà Ioc (I.lower i) (I.upper i)} := rfl

lemma mem_Ioc : x ‚àà I.Ioc ‚Üî ‚àÄ i, I.lower i < x i ‚àß x i ‚â§ I.upper i := iff.rfl

lemma Icc_eq_pi : I.Icc = pi univ (Œª i, Icc (I.lower i) (I.upper i)) := (pi_univ_Icc _ _).symm
lemma Ioc_eq_pi : I.Ioc = pi univ (Œª i, Ioc (I.lower i) (I.upper i)) :=
set.ext $ Œª x, mem_univ_pi.symm

lemma lower_le_upper : I.lower ‚â§ I.upper := Œª i, (I.lower_lt_upper i).le

@[simp] lemma upper_mem_Icc : I.upper ‚àà I.Icc := right_mem_Icc.2 I.lower_le_upper
@[simp] lemma lower_mem_Icc : I.lower ‚àà I.Icc := left_mem_Icc.2 I.lower_le_upper
@[simp] lemma upper_mem_Ioc : I.upper ‚àà I.Ioc := Œª i, right_mem_Ioc.2 $ I.lower_lt_upper i

lemma nonempty_Ioc : I.Ioc.nonempty := ‚ü®_, I.upper_mem_Ioc‚ü©

@[simp] protected lemma closure_Ioc : closure I.Ioc = I.Icc :=
by simp only [Ioc_eq_pi, closure_pi_set, closure_Ioc (I.lower_lt_upper _), Icc_eq_pi]

instance : has_le (partition_box Œπ) := ‚ü®Œª I J, I.Ioc ‚äÜ J.Ioc‚ü©

lemma le_tfae :
  tfae [I ‚â§ J, I.Ioc ‚äÜ J.Ioc, I.Icc ‚äÜ J.Icc,
    J.lower ‚â§ I.lower ‚àß I.upper ‚â§ J.upper] :=
begin
  tfae_have : 1 ‚Üî 2, from iff.rfl,
  tfae_have : 2 ‚Üí 3, from Œª h, by simpa only [partition_box.closure_Ioc] using closure_mono h,
  tfae_have : 3 ‚Üî 4, from Icc_subset_Icc_iff I.lower_le_upper,
  tfae_have : 4 ‚Üí 2, from Œª h x hx i, Ioc_subset_Ioc (h.1 i) (h.2 i) (hx i),
  tfae_finish
end

variables {I J}

lemma le_iff_Ioc : I ‚â§ J ‚Üî I.Ioc ‚äÜ J.Ioc := iff.rfl
lemma le_iff_Icc : I ‚â§ J ‚Üî I.Icc ‚äÜ J.Icc := (le_tfae I J).out 0 2
lemma le_iff_bounds : I ‚â§ J ‚Üî J.lower ‚â§ I.lower ‚àß I.upper ‚â§ J.upper := (le_tfae I J).out 0 3

lemma Ioc_injective : injective (partition_box.Ioc : partition_box Œπ ‚Üí set (Œπ ‚Üí ‚Ñù)) :=
begin
  intros I J h,
  simp only [subset.antisymm_iff, ‚Üê le_iff_Ioc, le_iff_bounds] at h,
  exact ext _ _ (le_antisymm h.2.1 h.1.1) (le_antisymm h.1.2 h.2.2)
end

instance : partial_order (partition_box Œπ) :=
{ le := (‚â§),
  .. partial_order.lift (partition_box.Ioc : partition_box Œπ ‚Üí set (Œπ ‚Üí ‚Ñù)) Ioc_injective }

lemma monotone_lower : monotone (Œª I : partition_box Œπ, order_dual.to_dual I.lower) :=
Œª I J H, (le_iff_bounds.1 H).1

lemma monotone_upper : monotone (Œª I : partition_box Œπ, I.upper) :=
Œª I J H, (le_iff_bounds.1 H).2

lemma Ioc_inter_Ioc_nonempty_iff {I J : partition_box Œπ} :
  (I.Ioc ‚à© J.Ioc).nonempty ‚Üî ‚àÄ i, max (I.lower i) (J.lower i) < min (I.upper i) (J.upper i) :=
by simp only [Ioc_eq_pi, ‚Üê pi_inter_distrib, univ_pi_nonempty_iff, Ioc_inter_Ioc, set.nonempty_Ioc,
  sup_eq_max, inf_eq_min]

def inter (I J : partition_box Œπ) (H : (I.Ioc ‚à© J.Ioc).nonempty) :
  partition_box Œπ :=
‚ü®_, _, Ioc_inter_Ioc_nonempty_iff.1 H‚ü©

@[simp] lemma inter_Ioc (H : (I.Ioc ‚à© J.Ioc).nonempty) : (I.inter J H).Ioc = I.Ioc ‚à© J.Ioc :=
by simp only [inter, Ioc_eq_pi, ‚Üê pi_inter_distrib, Ioc_inter_Ioc, sup_eq_max, inf_eq_min]

lemma inter_le_left (H : (I.Ioc ‚à© J.Ioc).nonempty) : I.inter J H ‚â§ I :=
le_iff_Ioc.2 $ by simp only [inter_Ioc, inter_subset_left]

lemma inter_le_right (H : (I.Ioc ‚à© J.Ioc).nonempty) : I.inter J H ‚â§ J :=
le_iff_Ioc.2 $ by simp only [inter_Ioc, inter_subset_right]

@[simp] lemma le_inter_iff (H : (I.Ioc ‚à© J.Ioc).nonempty) {I'} :
  I' ‚â§ I.inter J H ‚Üî I' ‚â§ I ‚àß I' ‚â§ J :=
by simp only [le_iff_Ioc, inter_Ioc, subset_inter_iff]

lemma Union_inter_Ioc : (‚ãÉ H, (I.inter J H).Ioc) = I.Ioc ‚à© J.Ioc := 
by simp only [inter_Ioc, Union_nonempty_self]

@[simps] def split_lower (I : partition_box Œπ) (i : Œπ) (x : Ioo (I.lower i) (I.upper i)) :
  partition_box Œπ :=
‚ü®I.lower, update I.upper i x, forall_lt_update_iff.2 ‚ü®x.2.1, Œª j _, I.lower_lt_upper j‚ü©‚ü©

lemma mem_split_lower_Ioc (I : partition_box Œπ) {i x} {y : Œπ ‚Üí ‚Ñù} :
  y ‚àà (I.split_lower i x).Ioc ‚Üî y ‚àà I.Ioc ‚àß y i ‚â§ x :=
begin
  simp only [mem_Ioc, forall_and_distrib, split_lower, and_assoc],
  refine and_congr_right (Œª H, (@le_update_iff _ _ _ _ y I.upper i x).trans _),
  refine (and_comm _ _).trans (and_congr_left $ Œª Hi, iff.trans _ (@and_forall_ne _ _ i)),
  exact (and_iff_right_of_imp $ Œª Hne, Hi.trans x.2.2.le).symm
end

@[simps] def split_upper (I : partition_box Œπ) (i : Œπ) (x : Ioo (I.lower i) (I.upper i)) :
  partition_box Œπ :=
‚ü®update I.lower i x, I.upper, forall_update_lt_iff.2 ‚ü®x.2.2, Œª j _, I.lower_lt_upper j‚ü©‚ü©

lemma mem_split_upper_Ioc (I : partition_box Œπ) {i x} {y : Œπ ‚Üí ‚Ñù} :
  y ‚àà (I.split_upper i x).Ioc ‚Üî y ‚àà I.Ioc ‚àß ‚Üëx < y i :=
begin
  simp only [mem_Ioc, forall_and_distrib, split_upper, and_assoc, forall_update_lt_iff],
  exact ‚ü®Œª ‚ü®Hi, Hne, Hle‚ü©, ‚ü®and_forall_ne.1 ‚ü®x.2.1.trans Hi, Hne‚ü©, Hle, Hi‚ü©,
    Œª ‚ü®Hlt, Hle, Hi‚ü©, ‚ü®Hi, Œª j _, Hlt j, Hle‚ü©‚ü©
end

lemma disjoint_Ioc_split (I : partition_box Œπ) (i x) :
  disjoint (I.split_lower i x).Ioc (I.split_upper i x).Ioc :=
Œª y ‚ü®hl, hu‚ü©, (I.mem_split_lower_Ioc.1 hl).2.not_lt (I.mem_split_upper_Ioc.1 hu).2

lemma union_Ioc_split (I : partition_box Œπ) (i x) :
  (I.split_lower i x).Ioc ‚à™ (I.split_upper i x).Ioc = I.Ioc :=
begin
  ext1 y,
  simp only [mem_union_eq, mem_split_lower_Ioc, mem_split_upper_Ioc, ‚Üê and_or_distrib_left,
    le_or_lt, and_true]
end

lemma split_lower_le (I : partition_box Œπ) (i x) : I.split_lower i x ‚â§ I :=
by simp only [le_iff_Ioc, ‚Üê I.union_Ioc_split i x, subset_union_left]

lemma split_upper_le (I : partition_box Œπ) (i x) : I.split_upper i x ‚â§ I :=
by simp only [le_iff_Ioc, ‚Üê I.union_Ioc_split i x, subset_union_right]

open finset

def split_center (I : partition_box Œπ) (s : set Œπ) : partition_box Œπ :=
{ lower := s.piecewise (Œª i, (I.lower i + I.upper i) / 2) I.lower,
  upper := s.piecewise I.upper (Œª i, (I.lower i + I.upper i) / 2),
  lower_lt_upper := Œª i, by { dunfold set.piecewise, split_ifs;
    simp only [left_lt_add_div_two, add_div_two_lt_right, I.lower_lt_upper] } }

lemma mem_split_center_Ioc {s : set Œπ} {y : Œπ ‚Üí ‚Ñù} :
  y ‚àà (I.split_center s).Ioc ‚Üî y ‚àà I.Ioc ‚àß ‚àÄ i, (I.lower i + I.upper i) / 2 < y i ‚Üî i ‚àà s :=
begin
  simp only [split_center, mem_Ioc, ‚Üê forall_and_distrib],
  refine forall_congr (Œª i, _),
  dunfold set.piecewise,
  split_ifs with hs; simp only [hs, iff_true, iff_false, not_lt],
  exacts [‚ü®Œª H, ‚ü®‚ü®(left_lt_add_div_two.2 (I.lower_lt_upper i)).trans H.1, H.2‚ü©, H.1‚ü©, Œª H, ‚ü®H.2, H.1.2‚ü©‚ü©,
    ‚ü®Œª H, ‚ü®‚ü®H.1, H.2.trans (add_div_two_lt_right.2 (I.lower_lt_upper i)).le‚ü©, H.2‚ü©, Œª H, ‚ü®H.1.1, H.2‚ü©‚ü©]
end

lemma split_center_le (I : partition_box Œπ) (s : set Œπ) : I.split_center s ‚â§ I :=
Œª x hx, (mem_split_center_Ioc.1 hx).1

lemma disjoint_split_center_Ioc (I : partition_box Œπ) {s t : set Œπ} (h : s ‚â† t) :
  disjoint (I.split_center s).Ioc (I.split_center t).Ioc :=
begin
  rintro y ‚ü®hs, ht‚ü©, apply h,
  ext i,
  rw mem_split_center_Ioc at hs ht,
  rw [‚Üê hs.2, ‚Üê ht.2]
end

lemma injective_split_center (I : partition_box Œπ) : injective I.split_center :=
Œª s t H, by_contra $ Œª Hne, (I.disjoint_split_center_Ioc Hne).ne (nonempty_Ioc _).ne_empty (H ‚ñ∏ rfl)

lemma Union_split_center_Ioc (I : partition_box Œπ) :
  (‚ãÉ s, (I.split_center s).Ioc) = I.Ioc :=
subset.antisymm (Union_subset $ Œª s, I.split_center_le s) $
  Œª y hy, mem_Union.2 ‚ü®{i | _ < y i}, mem_split_center_Ioc.2 ‚ü®hy, Œª i, iff.rfl‚ü©‚ü©

@[simp] lemma upper_sub_lower_split_center (I : partition_box Œπ) (s : set Œπ) (i : Œπ) :
  (I.split_center s).upper i - (I.split_center s).lower i = (I.upper i - I.lower i) / 2 :=
by by_cases hs : i ‚àà s; field_simp [split_center, hs, mul_two, two_mul]

lemma subbox_induction_seq {p : partition_box Œπ ‚Üí Prop} (I : partition_box Œπ)
  (H_ind : ‚àÄ J ‚â§ I, (‚àÄ s, p (J.split_center s)) ‚Üí p J) :
  ‚àÉ J : ‚Ñï ‚Üí partition_box Œπ, J 0 = I ‚àß (‚àÄ n, J n ‚â§ I) ‚àß (‚àÄ n, J (n + 1) ‚â§ J n) ‚àß
    (‚àÄ n i, (J n).upper i - (J n).lower i = (I.upper i - I.lower i) / 2 ^ n) ‚àß ‚àÄ n, p (J n) ‚Üí p I :=
begin
  choose! s hs using Œª J hJ, forall_imp_iff_exists_imp.1 (H_ind J hJ), clear H_ind,
  set f : partition_box Œπ ‚Üí partition_box Œπ := Œª J, J.split_center (s J),
  refine ‚ü®Œª n, f^[n] I, rfl, _‚ü©,
  have : ‚àÄ n, f^[n + 1] I ‚â§ (f^[n] I),
  { intro n, rw iterate_succ_apply', apply split_center_le },
  simp only [‚Üê forall_and_distrib, this, true_and],
  apply nat.rec, { simp },
  rintro n ‚ü®Hle, Hsub, Himp‚ü©,
  refine ‚ü®(this n).trans Hle, Œª i, _, Œª h, Himp (hs _ Hle _)‚ü©,
  { simp [iterate_succ_apply', Hsub, pow_succ', div_div_eq_div_mul] },
  { rwa iterate_succ_apply' at h }
end

@[elab_as_eliminator]
lemma subbox_induction_on {p : partition_box Œπ ‚Üí Prop} (I : partition_box Œπ)
  (H_ind : ‚àÄ J ‚â§ I, (‚àÄ s, p (J.split_center s)) ‚Üí p J)
  (H_nhds : ‚àÄ z ‚àà I.Icc, ‚àÉ (U ‚àà ùìù[I.Icc] z), ‚àÄ (J ‚â§ I) (n : ‚Ñï),
    z ‚àà J.Icc ‚Üí J.Icc ‚äÜ U ‚Üí (‚àÄ i, J.upper i - J.lower i = (I.upper i - I.lower i) / 2 ^ n) ‚Üí p J) :
  p I :=
begin
  rcases I.subbox_induction_seq H_ind with ‚ü®J, hI, Hle, H_mono', H_sub, H_imp‚ü©,
  set z : Œπ ‚Üí ‚Ñù := ‚®Ü n, (J n).lower,
  have hz : ‚àÄ n, z ‚àà (J n).Icc,
    from mem_Inter.1 (csupr_mem_Inter_Icc_of_mono_decr_Icc_nat (Œª n, le_iff_Icc.1 $ H_mono' n)
      (Œª n, (J n).lower_le_upper)),
  have H_mono : monotone (order_dual.to_dual ‚àò J), from monotone_nat_of_le_succ H_mono',
  have mono_l : monotone (Œª n, (J n).lower), from monotone_lower.order_dual.comp H_mono,
  have mono_u : monotone (Œª n, order_dual.to_dual $ (J n).upper),
    from monotone_upper.order_dual.comp H_mono,
  have Jl_mem : ‚àÄ n, (J n).lower ‚àà I.Icc,
    from Œª n, hI.symm ‚ñ∏ (le_iff_Icc.1 (Hle n)) (J n).lower_mem_Icc,
  have Ju_mem : ‚àÄ n, (J n).upper ‚àà I.Icc,
    from Œª n, hI.symm ‚ñ∏ (le_iff_Icc.1 (Hle n)) (J n).upper_mem_Icc,
  rcases H_nhds z (hI ‚ñ∏ hz 0) with ‚ü®U, hUz, hU‚ü©,
  have Hl : tendsto (Œª n, (J n).lower) at_top (ùìù z),
    from tendsto_at_top_csupr_pi' mono_l ‚ü®I.upper, Œª x ‚ü®n, hn‚ü©, hn ‚ñ∏ (Jl_mem n).2‚ü©,
  have Hu : tendsto (Œª n, (J n).upper) at_top (ùìù z),
  { suffices : tendsto (Œª n, (J n).upper - (J n).lower) at_top (ùìù 0),
      by simpa using Hl.add this,
    refine tendsto_pi.2 (Œª i, _),
    simpa [H_sub] using tendsto_const_nhds.div_at_top
      (tendsto_pow_at_top_at_top_of_one_lt (@one_lt_two ‚Ñù _ _)) },
  replace Hl : tendsto (Œª n, (J n).lower) at_top (ùìù[Icc I.lower I.upper] z),
    from tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ Hl
      (eventually_of_forall Jl_mem),
  replace Hu : tendsto (Œª n, (J n).upper) at_top (ùìù[Icc I.lower I.upper] z),
    from tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ Hu
      (eventually_of_forall Ju_mem),
  rcases (tendsto_lift'.1 (Hl.Icc Hu) U hUz).exists with ‚ü®n, hUn‚ü©,
  exact H_imp n (hU (J n) (Hle n) n (hz n) hUn (H_sub n))
end

/-
def pi_box (I : partition_box Œπ) (s t : Œπ ‚Üí finset ‚Ñù) :
  part (partition_box Œπ) :=
{ dom := ‚àÄ i, (insert (I.lower i) (s i)).max' (finset.insert_nonempty _ _) <
    (insert (I.upper i) (t i)).min' (finset.insert_nonempty _ _),
  get := Œª H, ‚ü®_, _, H‚ü© }

lemma mem_Ioc_iff_of_mem_pi_box {s t : Œπ ‚Üí finset ‚Ñù} (H : J ‚àà I.pi_box s t) {x : Œπ ‚Üí ‚Ñù} :
  x ‚àà J.Ioc ‚Üî x ‚àà I.Ioc ‚àß (‚àÄ i (z ‚àà s i), z < x i) ‚àß ‚àÄ i (z ‚àà t i), x i ‚â§ z :=
begin
  rcases H with ‚ü®H, rfl‚ü©,
  simp [pi_box, mem_Ioc, forall_and_distrib, and_assoc, and_comm, and.left_comm]
end

lemma mem_pi_box_get_Ioc_iff {s t : Œπ ‚Üí finset ‚Ñù} (H : (I.pi_box s t).dom) {x : Œπ ‚Üí ‚Ñù} :
  x ‚àà ((I.pi_box s t).get H).Ioc ‚Üî x ‚àà I.Ioc ‚àß (‚àÄ i (z ‚àà s i), z < x i) ‚àß ‚àÄ i (z ‚àà t i), x i ‚â§ z :=
mem_Ioc_iff_of_mem_pi_box (part.get_mem H)

lemma le_of_mem_pi_box {s t : Œπ ‚Üí finset ‚Ñù} (H : J ‚àà I.pi_box s t) : J ‚â§ I :=
Œª x hx, ((mem_Ioc_iff_of_mem_pi_box H).1 hx).1

lemma pi_box_get_le {s t : Œπ ‚Üí finset ‚Ñù} (H : (I.pi_box s t).dom) : (I.pi_box s t).get H ‚â§ I :=
le_of_mem_pi_box $ part.get_mem H

lemma pi_box_dom_iff {s t : Œπ ‚Üí finset ‚Ñù} :
  (I.pi_box s t).dom ‚Üî (‚àÄ i (x ‚àà s i), x < I.upper i) ‚àß
    (‚àÄ i (x ‚àà t i), I.lower i < x) ‚àß (‚àÄ i (x ‚àà s i) (y ‚àà t i), x < y) :=
begin
  dsimp only [pi_box],
  simp [I.lower_lt_upper, max'_lt_iff, forall_and_distrib, and_comm, and_assoc, and.left_comm]
end

lemma pi_box_dom_iff_ex {s t : Œπ ‚Üí finset ‚Ñù} :
  (I.pi_box s t).dom ‚Üî ‚àÉ x ‚àà I.Ioc, (‚àÄ i (z ‚àà s i), z < (x : _) i) ‚àß (‚àÄ i (z ‚àà t i), x i ‚â§ z) :=
begin
  refine ‚ü®Œª H, _, _‚ü©,
  { have : ((I.pi_box s t).get H).upper ‚àà ((I.pi_box s t).get H).Ioc,
      from upper_mem_Ioc _,
    exact ‚ü®_, pi_box_get_le H this, ((mem_pi_box_get_Ioc_iff H).1 this).2‚ü© },
  { rintro ‚ü®x, hx, hs, ht‚ü©,
    exact pi_box_dom_iff.2 ‚ü®Œª i z hz, (hs i z hz).trans_le (hx i).2,
      Œª i z hz, (hx i).1.trans_le (ht i z hz),
      Œª i zs hzs zt hzt, (hs i zs hzs).trans_le (ht i zt hzt)‚ü© }
end

lemma ex_mem_pi_box_mem_Ioc_iff {s t : Œπ ‚Üí finset ‚Ñù} {x : Œπ ‚Üí ‚Ñù} :
  (‚àÉ J ‚àà I.pi_box s t, x ‚àà (J : _).Ioc) ‚Üî
    x ‚àà I.Ioc ‚àß (‚àÄ i (z ‚àà s i), z < x i) ‚àß ‚àÄ i (z ‚àà t i), x i ‚â§ z :=
begin
  refine ‚ü®Œª ‚ü®J, hJ, hx‚ü©, (mem_Ioc_iff_of_mem_pi_box hJ).1 hx, Œª H, _‚ü©,
  have : (I.pi_box s t).dom, from pi_box_dom_iff_ex.2 ‚ü®x, H.1, H.2‚ü©,
  exact ‚ü®part.get _ this, part.get_mem this, (mem_pi_box_get_Ioc_iff _).2 H‚ü©
end
-/

def pi_box (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) (x : I.Ioc) : partition_box Œπ :=
{ lower :=
    Œª i, (insert (I.lower i) $ (s i).filter (Œª y, y < x.1 i)).max' (finset.insert_nonempty _ _),
  upper :=
    Œª i, (insert (I.upper i) $ (s i).filter (Œª y, x.1 i ‚â§ y)).min' (finset.insert_nonempty _ _),
  lower_lt_upper := Œª i,
    begin
      simp only [max'_lt_iff, lt_min'_iff, forall_mem_insert, mem_filter],
      exact ‚ü®‚ü®I.lower_lt_upper i, Œª y hy, hy.2.trans_le (x.2 i).2‚ü©,
        Œª y hy, ‚ü®(x.2 i).1.trans_le hy.2, Œª z hz, hz.2.trans_le hy.2‚ü©‚ü©
    end }

lemma mem_pi_box_Ioc_iff' (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) (x : I.Ioc) {y : Œπ ‚Üí ‚Ñù} :
  y ‚àà (I.pi_box s x).Ioc ‚Üî y ‚àà I.Ioc ‚àß ‚àÄ i (z ‚àà s i), z < x.1 i ‚Üî z < y i :=
by simp only [pi_box, mem_Ioc, set.mem_Ioc, max'_lt_iff, le_min'_iff,
  forall_mem_insert, mem_filter, ‚Üê forall_and_distrib, and_imp,
  le_imp_le_iff_lt_imp_lt, ‚Üê iff_def, and_assoc, and.left_comm]

@[simp] lemma pi_box_empty (I : partition_box Œπ) (x : I.Ioc) : I.pi_box (Œª _, ‚àÖ) x = I :=
Ioc_injective $ set.ext $ Œª y, by simp [mem_pi_box_Ioc_iff']

lemma pi_box_filter_Ioo (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) :
  I.pi_box (Œª i, (s i).filter (Œª x, x ‚àà Ioo (I.lower i) (I.upper i))) = I.pi_box s :=
begin
  refine funext (Œª x, Ioc_injective $ set.ext $ Œª y, _),
  simp only [mem_pi_box_Ioc_iff', mem_filter, and_imp],
  refine and_congr_right (Œª hy, forall_congr $ Œª i, forall_congr $ Œª z, forall_congr $
    Œª hz, imp_iff_right_iff.2 _),
  simp_rw [mem_Ioo, or_iff_not_imp_left, not_and_distrib, not_lt],
  rintro (hz|hz),
  { simp only [hz.trans_lt (x.2 i).1, hz.trans_lt (hy i).1] },
  { simp only [((x.2 i).2.trans hz).not_lt, ((hy i).2.trans hz).not_lt] }
end

lemma mem_pi_box_Ioc_iff (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) {x y : I.Ioc} :
  (y : Œπ ‚Üí ‚Ñù) ‚àà (I.pi_box s x).Ioc ‚Üî ‚àÄ i (z ‚àà s i), z < x.1 i ‚Üî z < y.1 i :=
by simp only [mem_pi_box_Ioc_iff', y.coe_prop, true_and, subtype.val_eq_coe]

lemma mem_pi_box_Ioc_self (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) (x : I.Ioc) :
  (x : Œπ ‚Üí ‚Ñù) ‚àà (I.pi_box s x).Ioc :=
(I.mem_pi_box_Ioc_iff s).2 $ Œª i z hz, iff.rfl

lemma pi_box_le (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) (x : I.Ioc) : I.pi_box s x ‚â§ I :=
Œª y hy, ((I.mem_pi_box_Ioc_iff' s x).1 hy).1

lemma mem_pi_box_Ioc_tfae (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) (x y : I.Ioc) :
  tfae [‚Üëy ‚àà (I.pi_box s x).Ioc,
    ‚Üëx ‚àà (I.pi_box s y).Ioc,
    ‚àÄ i (z ‚àà s i), z < x.1 i ‚Üî z < y.1 i,
    ‚àÄ i, (s i).filter (Œª z, z < x.1 i) = (s i).filter (Œª z, z < y.1 i),
    I.pi_box s x = I.pi_box s y,
    ((I.pi_box s x).Ioc ‚à© (I.pi_box s y).Ioc).nonempty] :=
begin
  tfae_have : 1 ‚Üî 3, from I.mem_pi_box_Ioc_iff s,
  tfae_have : 1 ‚Üî 2, by simp only [mem_pi_box_Ioc_iff, *, iff.comm],
  tfae_have : 3 ‚Üî 4, by simp only [finset.ext_iff, mem_filter, and.congr_right_iff],
  tfae_have : 5 ‚Üí 1, from Œª h, h.symm ‚ñ∏ I.mem_pi_box_Ioc_self s y,
  tfae_have : 1 ‚Üí 6, from Œª H, ‚ü®y, H, I.mem_pi_box_Ioc_self s y‚ü©,
  tfae_have : 6 ‚Üí 5,
  { rintro ‚ü®z, hx, hy‚ü©,
    rw mem_pi_box_Ioc_iff' at hx hy,
    refine Ioc_injective (set.ext $ Œª z', _),
    simp only [mem_pi_box_Ioc_iff', hx.2, hy.2] { contextual := tt } },
  tfae_finish
end

lemma pi_box_eq_of_nonempty_inter_Ioc (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) {x y : I.Ioc}
  (H : ((I.pi_box s x).Ioc ‚à© (I.pi_box s y).Ioc).nonempty) :
  I.pi_box s x = I.pi_box s y :=
((mem_pi_box_Ioc_tfae I s x y).out 4 5).mpr H

lemma pi_box_eq_iff_mem_Ioc (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) {x y : I.Ioc} :
  I.pi_box s x = I.pi_box s y ‚Üî ‚Üëx ‚àà (I.pi_box s y).Ioc :=
(mem_pi_box_Ioc_tfae I s x y).out 4 1

lemma pi_box_eq_of_le_of_mem {I J : partition_box Œπ} {s : Œπ ‚Üí finset ‚Ñù} {x : I.Ioc}
  (Hle : I ‚â§ J) (Hmem‚ÇÅ : ‚àÄ i, I.lower i ‚àà s i) (Hmem‚ÇÇ : ‚àÄ i, I.upper i ‚àà s i) :
  I.pi_box s x = J.pi_box s ‚ü®x, Hle x.2‚ü© :=
begin
  refine Ioc_injective (set.ext $ Œª y, _),
  simp only [mem_pi_box_Ioc_iff'],
  refine and_congr_left (Œª Hy, ‚ü®Œª h, Hle h, Œª h i, ‚ü®_, _‚ü©‚ü©),
  { exact (Hy i _ (Hmem‚ÇÅ i)).mp (x.2 i).1 },
  { exact le_of_not_lt (Œª Hlt, (x.2 i).2.not_lt $ (Hy i _ (Hmem‚ÇÇ i)).mpr Hlt) }
end

lemma pi_box_update_insert (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) (i : Œπ)
  (x : ‚Ñù) (y : I.Ioc) :
  I.pi_box (update s i (insert x (s i))) y =
    if h : x ‚àà Ioo ((I.pi_box s y).lower i) ((I.pi_box s y).upper i) then
      if y.1 i ‚â§ x then (I.pi_box s y).split_lower i ‚ü®x, h‚ü©
      else (I.pi_box s y).split_upper i ‚ü®x, h‚ü©
    else I.pi_box s y :=
begin
  -- TODO: Why does `split_ifs` fail after `refine Ioc_injective (set.ext $ Œª z, _)`?
  -- TODO: Why does `simp` fail to use `forall_and_distrib`?
  split_ifs with hx hi; refine Ioc_injective (set.ext $ Œª z, _);
    simp only [mem_pi_box_Ioc_iff', finset.mem_update_insert, or_imp_distrib, and_imp,
      mem_split_lower_Ioc, mem_split_upper_Ioc, subtype.coe_mk, and_assoc, and.congr_right_iff];
    refine Œª hz, ‚ü®Œª H, _, Œª H, _‚ü©,
  { refine ‚ü®Œª j z' hz', (H j z').1 hz', le_of_not_lt _‚ü©,
    rw [‚Üê (H i x).2 rfl rfl], exact hi.not_lt },
  { refine Œª j z', ‚ü®H.1 j z', _‚ü©,
    rintro rfl rfl, simp only [H.2.not_lt, hi.not_lt] },
  { exact ‚ü®Œª j z' hz', (H j z').1 hz', ((H i x).2 rfl rfl).1 $ not_le.1 hi‚ü© },
  { refine Œª j z', ‚ü®H.1 j z', _‚ü©,
    rintro rfl rfl, simp only [not_le.1 hi, H.2] },
  { exact Œª j z', (H j z').1 },
  { refine Œª j z', ‚ü®H j z', _‚ü©,
    rintro rfl rfl,
    lift z to I.Ioc using hz,
    rw [‚Üê subtype.val_eq_coe, ‚Üê mem_pi_box_Ioc_iff, ‚Üê pi_box_eq_iff_mem_Ioc] at H,
    rw [mem_Ioo, not_and_distrib, not_lt, not_lt] at hx, cases hx,
    { simp only [subtype.val_eq_coe, hx.trans_lt (I.mem_pi_box_Ioc_self s y j).1],
      rw ‚Üê H at hx, simp only [hx.trans_lt (I.mem_pi_box_Ioc_self s z j).1] },
    { simp only [subtype.val_eq_coe, ((I.mem_pi_box_Ioc_self s y j).2.trans hx).not_lt],
      rw ‚Üê H at hx, simp only [((I.mem_pi_box_Ioc_self s z j).2.trans hx).not_lt] } }
end

lemma disjoint_pi_box_Ioc (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) {x y : I.Ioc}
  (H : I.pi_box s x ‚â† I.pi_box s y) : disjoint (I.pi_box s x).Ioc (I.pi_box s y).Ioc :=
Œª z hz, H $ I.pi_box_eq_of_nonempty_inter_Ioc s ‚ü®z, hz‚ü©

lemma finite_range_pi_box [fintype Œπ] (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) :
  finite (set.range $ I.pi_box s) :=
begin
  set f : set.range (I.pi_box s) ‚Üí
    finset.univ.pi (Œª i : Œπ, (s i).powerset) :=
    Œª J, ‚ü®Œª i hi, (s i).filter (Œª z, z < J.2.some.1 i),
      finset.mem_pi.2 $ Œª i hi, finset.mem_powerset.2 $ filter_subset _ _‚ü©,
  have : injective f,
  { intros J‚ÇÅ J‚ÇÇ H,
    simp only [f, subtype.mk_eq_mk, function.funext_iff, finset.mem_univ, forall_true_left] at H,
    rw [subtype.ext_iff, ‚Üê J‚ÇÅ.coe_prop.some_spec, ‚Üê J‚ÇÇ.coe_prop.some_spec],
    exact ((I.mem_pi_box_Ioc_tfae s J‚ÇÅ.2.some J‚ÇÇ.2.some).out 3 4).1 H },
  exact ‚ü®fintype.of_injective f this‚ü©
end

lemma pi_box_center (I : partition_box Œπ) (x : I.Ioc) :
  I.pi_box (Œª i, {(I.lower i + I.upper i) / 2}) x =
    I.split_center {i | (I.lower i + I.upper i) / 2 < x.1 i} :=
begin
  refine Ioc_injective (set.ext $ Œª y, _),
  simp only [mem_pi_box_Ioc_iff', mem_split_center_Ioc, mem_set_of_eq, finset.mem_singleton],
  -- TODO: why `simp` fails to use `forall_eq`?
  exact and_congr iff.rfl (forall_congr $ Œª i, forall_eq.trans iff.comm)
end

end partition_box

@[ext, protect_proj]
structure pi_partition (I : partition_box Œπ) :=
(boxes : finset (partition_box Œπ))
(bUnion_boxes_Ioc : (‚ãÉ J ‚àà boxes, partition_box.Ioc J) = I.Ioc)
(disjoint_Ioc : set.pairwise_on (boxes : set (partition_box Œπ)) (disjoint on partition_box.Ioc))

attribute [simp] pi_partition.bUnion_boxes_Ioc

namespace pi_partition

variables {I J J' : partition_box Œπ} (œÄ : pi_partition I) {x : Œπ ‚Üí ‚Ñù}

open finset

lemma le_of_mem (hJ : J ‚àà œÄ.boxes) : J ‚â§ I :=
partition_box.le_iff_Ioc.2 $ œÄ.bUnion_boxes_Ioc ‚ñ∏ set.subset_bUnion_of_mem hJ

lemma lower_le_lower (hJ : J ‚àà œÄ.boxes) : I.lower ‚â§ J.lower :=
(partition_box.le_iff_bounds.1 (œÄ.le_of_mem hJ)).1

lemma upper_le_upper (hJ : J ‚àà œÄ.boxes) : J.upper ‚â§ I.upper :=
(partition_box.le_iff_bounds.1 (œÄ.le_of_mem hJ)).2

lemma eq_of_mem_Ioc (h : J ‚àà œÄ.boxes) (h' : J' ‚àà œÄ.boxes) (hx : x ‚àà J.Ioc) (hx' : x ‚àà J'.Ioc) :
  J = J' :=
by_contra $ Œª H, œÄ.disjoint_Ioc _ h _ h' H ‚ü®hx, hx'‚ü©

protected lemma exists_unique (hx : x ‚àà I.Ioc) : ‚àÉ! J ‚àà œÄ.boxes, x ‚àà partition_box.Ioc J :=
begin
  simp only [‚Üê œÄ.bUnion_boxes_Ioc, set.mem_Union] at hx,
  rcases hx with ‚ü®J, h, hx‚ü©,
  exact exists_unique.intro2 J h hx (Œª J' h' hx', œÄ.eq_of_mem_Ioc h' h hx' hx),
end

protected lemma ¬´exists¬ª (hx : x ‚àà I.Ioc) : ‚àÉ J ‚àà œÄ.boxes, x ‚àà partition_box.Ioc J :=
(œÄ.exists_unique hx).exists2

lemma eq_of_le_of_le {J''} (h : J ‚àà œÄ.boxes) (h' : J' ‚àà œÄ.boxes) (hle : J'' ‚â§ J) (hle' : J'' ‚â§ J') :
  J = J' :=
œÄ.eq_of_mem_Ioc h h' (hle J''.upper_mem_Ioc) (hle' J''.upper_mem_Ioc)

lemma eq_of_le (h : J ‚àà œÄ.boxes) (h' : J' ‚àà œÄ.boxes) (hle : J ‚â§ J') : J = J' :=
œÄ.eq_of_le_of_le h h' le_rfl hle

lemma exists_mem_boxes_mem_Ioc_iff {p : ‚àÄ x, x ‚àà I.Ioc ‚Üí Prop} :
  (‚àÉ (J ‚àà œÄ.boxes) (x ‚àà (J : _).Ioc), p x (œÄ.le_of_mem ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫)) ‚Üî ‚àÉ x ‚àà I.Ioc, p x ‚Äπ_‚Ä∫ :=
‚ü®Œª ‚ü®J, hJ, x, hx, hp‚ü©, ‚ü®x, _, hp‚ü©,
  Œª ‚ü®x, hx, hp‚ü©, let ‚ü®J, hJ, hx'‚ü© := œÄ.exists hx in ‚ü®J, hJ, x, hx', hp‚ü©‚ü©

lemma eq_of_boxes_subset {œÄ œÄ' : pi_partition I} (h : œÄ.boxes ‚äÜ œÄ'.boxes) : œÄ = œÄ' :=
ext _ _ $ subset.antisymm h $ Œª J' hJ',
  let ‚ü®x, hx'‚ü© := J'.nonempty_Ioc, ‚ü®J, hJ, hx‚ü© := œÄ.exists (œÄ'.le_of_mem hJ' hx')
  in œÄ'.eq_of_mem_Ioc (h hJ) hJ' hx hx' ‚ñ∏ hJ

instance : has_le (pi_partition I) := ‚ü®Œª œÄ œÄ', ‚àÄ ‚¶ÉI‚¶Ñ, I ‚àà œÄ.boxes ‚Üí ‚àÉ I' ‚àà œÄ'.boxes, I ‚â§ I'‚ü©

instance : partial_order (pi_partition I) :=
{ le := (‚â§),
  le_refl := Œª œÄ I hI, ‚ü®I, hI, le_rfl‚ü©,
  le_trans := Œª œÄ‚ÇÅ œÄ‚ÇÇ œÄ‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ I‚ÇÅ hI‚ÇÅ,
    let ‚ü®I‚ÇÇ, hI‚ÇÇ, hI‚ÇÅ‚ÇÇ‚ü© := h‚ÇÅ‚ÇÇ hI‚ÇÅ, ‚ü®I‚ÇÉ, hI‚ÇÉ, hI‚ÇÇ‚ÇÉ‚ü© := h‚ÇÇ‚ÇÉ hI‚ÇÇ in ‚ü®I‚ÇÉ, hI‚ÇÉ, hI‚ÇÅ‚ÇÇ.trans hI‚ÇÇ‚ÇÉ‚ü©,
  le_antisymm :=
    begin
      refine Œª œÄ œÄ' h h', eq_of_boxes_subset (Œª J hJ, _),
      rcases h hJ with ‚ü®J', hJ', hle‚ü©, rcases h' hJ' with ‚ü®J'', hJ'', hle'‚ü©,
      obtain rfl : J = J'', from œÄ.eq_of_le hJ hJ'' (hle.trans hle'),
      obtain rfl : J' = J, from le_antisymm ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
      assumption
    end }

instance : has_top (pi_partition I) :=
‚ü®{ boxes := {I},
   bUnion_boxes_Ioc := set_bUnion_singleton _ _,
   disjoint_Ioc := Œª J‚ÇÅ h‚ÇÅ J‚ÇÇ h‚ÇÇ Hne, (Hne $ by rw [mem_singleton.1 h‚ÇÅ, mem_singleton.1 h‚ÇÇ]).elim }‚ü©

@[simp] lemma top_boxes : (‚ä§ : pi_partition I).boxes = {I} := rfl

lemma mem_top_boxes {I J : partition_box Œπ} : I ‚àà (‚ä§ : pi_partition J).boxes ‚Üî I = J :=
mem_singleton

instance : inhabited (pi_partition I) := ‚ü®‚ä§‚ü©

private def sigma_boxes (œÄi : Œ† J ‚àà œÄ.boxes, pi_partition J) : finset (partition_box Œπ) :=
œÄ.boxes.attach.bUnion (Œª J, (œÄi J J.2).boxes)

private lemma mem_sigma_boxes'' (œÄi : Œ† J ‚àà œÄ.boxes, pi_partition J) {J} :
  J ‚àà (sigma_boxes œÄ œÄi) ‚Üî ‚àÉ J' ‚àà œÄ.boxes, J ‚àà (œÄi J' ‚Äπ_‚Ä∫).boxes :=
by simp [sigma_boxes, mem_bUnion, subtype.exists]; refl

private lemma coe_sigma_boxes (œÄi : Œ† J ‚àà œÄ.boxes, pi_partition J) :
  (sigma_boxes œÄ œÄi : set (partition_box Œπ)) = ‚ãÉ J ‚àà œÄ.boxes, (œÄi J ‚Äπ_‚Ä∫).boxes :=
set.ext $ Œª J, by simp only [mem_coe, mem_sigma_boxes'', set.mem_Union]

protected def sigma (œÄi : Œ† J ‚àà œÄ.boxes, pi_partition J) : pi_partition I :=
{ boxes := sigma_boxes œÄ œÄi,
  bUnion_boxes_Ioc := by simp [mem_sigma_boxes'', set.Union_comm],
  disjoint_Ioc :=
    begin
      simp only [coe_sigma_boxes, set.pairwise_on, set.mem_Union, mem_coe],
      rintro J‚ÇÅ' ‚ü®J‚ÇÅ, hJ‚ÇÅ, hJ‚ÇÅ'‚ü© J‚ÇÇ' ‚ü®J‚ÇÇ, hJ‚ÇÇ, hJ‚ÇÇ'‚ü© Hne x ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©, apply Hne,
      obtain rfl : J‚ÇÅ = J‚ÇÇ,
        from œÄ.eq_of_mem_Ioc hJ‚ÇÅ hJ‚ÇÇ ((œÄi J‚ÇÅ hJ‚ÇÅ).le_of_mem hJ‚ÇÅ' hx‚ÇÅ)
          ((œÄi J‚ÇÇ hJ‚ÇÇ).le_of_mem hJ‚ÇÇ' hx‚ÇÇ),
      exact (œÄi J‚ÇÅ hJ‚ÇÅ).eq_of_mem_Ioc hJ‚ÇÅ' hJ‚ÇÇ' hx‚ÇÅ hx‚ÇÇ
    end }

lemma mem_sigma_boxes {œÄi : Œ† J ‚àà œÄ.boxes, pi_partition J} :
  J ‚àà (œÄ.sigma œÄi).boxes ‚Üî ‚àÉ J' ‚àà œÄ.boxes, J ‚àà (œÄi J' ‚ÄπJ' ‚àà œÄ.boxes‚Ä∫).boxes :=
mem_sigma_boxes'' œÄ œÄi

lemma mem_sigma_boxes' {œÄi : Œ† J ‚àà œÄ.boxes, pi_partition J} :
  J ‚àà sigma_boxes œÄ œÄi ‚Üî ‚àÉ! J' ‚àà œÄ.boxes, J ‚àà (œÄi J' ‚ÄπJ' ‚àà œÄ.boxes‚Ä∫).boxes :=
begin
  refine œÄ.mem_sigma_boxes.trans ‚ü®_, Œª h, h.exists.imp (Œª J hJ, hJ.exists)‚ü©,
  rintro ‚ü®J', hJ', hJ‚ü©,
  refine exists_unique.intro2 J' hJ' hJ (Œª J'' hJ'' h, _),
  exact œÄ.eq_of_le_of_le hJ'' hJ' (le_of_mem _ h) (le_of_mem _ hJ)
end

lemma sigma_le (œÄi : Œ† J ‚àà œÄ.boxes, pi_partition J) : œÄ.sigma œÄi ‚â§ œÄ :=
Œª J hJ, let ‚ü®J', hJ', hJ‚ü© := œÄ.mem_sigma_boxes.1 hJ in ‚ü®J', hJ', (œÄi J' hJ').le_of_mem hJ‚ü©

lemma forall_mem_sigma_boxes {œÄi : Œ† J ‚àà œÄ.boxes, pi_partition J}
  {p : ‚àÄ J, J ‚àà (œÄ.sigma œÄi).boxes ‚Üí Prop} :
  (‚àÄ J hJ, p J hJ) ‚Üî
    ‚àÄ (J ‚àà œÄ.boxes) (J' ‚àà (œÄi J ‚Äπ_‚Ä∫).boxes), p J' (œÄ.mem_sigma_boxes.2 ‚ü®J, ‚Äπ_‚Ä∫, ‚Äπ_‚Ä∫‚ü©) :=
‚ü®Œª H J hJ J' hJ', H _ _, Œª H J hJ, let ‚ü®J', hJ', hJJ'‚ü© := œÄ.mem_sigma_boxes.1 hJ in H J' hJ' J hJJ'‚ü©

def restrict (œÄ : pi_partition J) (I : partition_box Œπ) (H : I ‚â§ J) :
  pi_partition I :=
{ boxes := œÄ.boxes.bUnion (Œª J', option.to_finset $ part.to_option ‚ü®_, I.inter J'‚ü©),
  bUnion_boxes_Ioc := by simpa [part.mem_eq, ‚Üê set.inter_Union, set.Union_nonempty_self,
    set.inter_eq_left_iff_subset],
  disjoint_Ioc :=
    begin
      simp only [set.pairwise_on, mem_coe, mem_bUnion, option.mem_to_finset, part.mem_to_option],
      rintro _ ‚ü®J, HJ, h, rfl‚ü© _ ‚ü®J', HJ', h', rfl‚ü© Hne,
      rw [on_fun, partition_box.inter_Ioc, partition_box.inter_Ioc],
      refine ((œÄ.disjoint_Ioc J HJ J' HJ' _).inf_left' _).inf_right' _,
      rintro rfl, exact Hne rfl
    end }

lemma mem_restrict_boxes (œÄ : pi_partition J) {I J' : partition_box Œπ} (H : I ‚â§ J) :
  J' ‚àà (œÄ.restrict I H).boxes ‚Üî ‚àÉ (J'' ‚àà œÄ.boxes) H, J' = I.inter J'' H :=
by simp [restrict, part.mem_eq, eq_comm]

instance : has_inf (pi_partition I) :=
‚ü®Œª œÄ œÄ', œÄ.sigma (Œª J hJ, œÄ'.restrict J $ œÄ.le_of_mem hJ)‚ü©

lemma mem_inf_boxes (œÄ‚ÇÅ œÄ‚ÇÇ : pi_partition J) {I : partition_box Œπ} :
  I ‚àà (œÄ‚ÇÅ ‚äì œÄ‚ÇÇ).boxes ‚Üî ‚àÉ (J‚ÇÅ ‚àà œÄ‚ÇÅ.boxes) (J‚ÇÇ ‚àà œÄ‚ÇÇ.boxes) H, I = (J‚ÇÅ : _).inter J‚ÇÇ H :=
œÄ‚ÇÅ.mem_sigma_boxes.trans $ exists_congr $ Œª J‚ÇÅ, exists_congr $ Œª hJ‚ÇÅ, mem_restrict_boxes _ _

lemma inter_mem_inf (œÄ‚ÇÅ œÄ‚ÇÇ : pi_partition J) {I‚ÇÅ I‚ÇÇ : partition_box Œπ}
  (H‚ÇÅ : I‚ÇÅ ‚àà œÄ‚ÇÅ.boxes) (H‚ÇÇ : I‚ÇÇ ‚àà œÄ‚ÇÇ.boxes) (H : (I‚ÇÅ.Ioc ‚à© I‚ÇÇ.Ioc).nonempty) :
  I‚ÇÅ.inter I‚ÇÇ H ‚àà (œÄ‚ÇÅ ‚äì œÄ‚ÇÇ).boxes :=
(œÄ‚ÇÅ.mem_inf_boxes œÄ‚ÇÇ).2 ‚ü®I‚ÇÅ, H‚ÇÅ, I‚ÇÇ, H‚ÇÇ, H, rfl‚ü©

instance : semilattice_inf_top (pi_partition I) :=
{ le := (‚â§),
  top := ‚ä§,
  le_top := Œª œÄ J hJ, ‚ü®I, mem_singleton.2 rfl, œÄ.le_of_mem hJ‚ü©,
  inf := (‚äì),
  inf_le_left := Œª œÄ œÄ', œÄ.sigma_le _,
  inf_le_right := Œª œÄ‚ÇÅ œÄ‚ÇÇ J'' hJ'',
    begin
      rcases (œÄ‚ÇÅ.mem_inf_boxes œÄ‚ÇÇ).1 hJ'' with ‚ü®J‚ÇÅ, mem‚ÇÅ, J‚ÇÇ, mem‚ÇÇ, H, rfl‚ü©,
      exact ‚ü®J‚ÇÇ, mem‚ÇÇ, partition_box.inter_le_right _‚ü©
    end,
  le_inf := Œª œÄ œÄ‚ÇÅ œÄ‚ÇÇ h‚ÇÅ h‚ÇÇ J hJ,
    begin
      rcases h‚ÇÅ hJ with ‚ü®J‚ÇÅ, mem‚ÇÅ, le‚ÇÅ‚ü©, rcases h‚ÇÇ hJ with ‚ü®J‚ÇÇ, mem‚ÇÇ, le‚ÇÇ‚ü©,
      refine ‚ü®_, œÄ‚ÇÅ.inter_mem_inf œÄ‚ÇÇ mem‚ÇÅ mem‚ÇÇ _, (partition_box.le_inter_iff _).2 ‚ü®le‚ÇÅ, le‚ÇÇ‚ü©‚ü©,
      exact ‚ü®J.upper, le‚ÇÅ J.upper_mem_Ioc, le‚ÇÇ J.upper_mem_Ioc‚ü©
    end,
  .. pi_partition.partial_order }

def split_single (I : partition_box Œπ) (i : Œπ) (x : set.Ioo (I.lower i) (I.upper i)) :
  pi_partition I :=
{ boxes := {I.split_lower i x, I.split_upper i x},
  bUnion_boxes_Ioc :=
    by rw [set_bUnion_insert, set_bUnion_singleton, partition_box.union_Ioc_split],
  disjoint_Ioc :=
    begin
      rw [coe_insert, coe_singleton, set.pairwise_on_pair_of_symmetric],
      exacts [Œª _, I.disjoint_Ioc_split _ _, Œª J‚ÇÅ J‚ÇÇ h, h.symm]
    end }

@[simp] lemma mem_split_single_boxes (I : partition_box Œπ) (i : Œπ)
  (x : set.Ioo (I.lower i) (I.upper i)) {J : partition_box Œπ} :
  J ‚àà (split_single I i x).boxes ‚Üî J = I.split_lower i x ‚à® J = I.split_upper i x :=
by simp [split_single]

def pi [fintype Œπ] (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) :
  pi_partition I :=
{ boxes := (I.finite_range_pi_box s).to_finset,
  bUnion_boxes_Ioc :=
    begin
      ext1 x,
      simp only [set.finite.mem_to_finset, set.mem_Union, exists_prop, set.exists_range_iff'],
      exact ‚ü®Œª ‚ü®J, hx‚ü©, I.pi_box_le _ _ hx, Œª hx, ‚ü®‚ü®x, hx‚ü©, I.mem_pi_box_Ioc_self _ _‚ü©‚ü©
    end,
  disjoint_Ioc :=
    begin
      rw set.finite.coe_to_finset,
      rintro _ ‚ü®x, rfl‚ü© _ ‚ü®y, rfl‚ü© Hne,
      exact I.disjoint_pi_box_Ioc s Hne
    end }

@[simp] lemma mem_pi_boxes [fintype Œπ] {I J : partition_box Œπ} {s : Œπ ‚Üí finset ‚Ñù} :
  J ‚àà (pi I s).boxes ‚Üî ‚àÉ x : I.Ioc, I.pi_box s x = J :=
set.finite.mem_to_finset _

lemma pi_filter_Ioo [fintype Œπ] (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) :
  pi I (Œª i, (s i).filter $ Œª z, z ‚àà set.Ioo (I.lower i) (I.upper i)) = pi I s :=
by { ext J, simp only [mem_pi_boxes, partition_box.pi_box_filter_Ioo] }

@[simp] lemma pi_empty [fintype Œπ] (I : partition_box Œπ) :
  pi I (Œª _, ‚àÖ) = ‚ä§ :=
by { ext J, have : ‚àÉ x, x ‚àà I.Ioc, from ‚ü®_, I.upper_mem_Ioc‚ü©, simp [this, eq_comm] }

lemma sigma_pi_of_subset [fintype Œπ] (œÄ : pi_partition I) (s : Œπ ‚Üí finset ‚Ñù)
  (Hl : ‚àÄ (J ‚àà œÄ.boxes) i, (J : _).lower i ‚àà s i) (Hu : ‚àÄ (J ‚àà œÄ.boxes) i, (J : _).upper i ‚àà s i) :
  œÄ.sigma (Œª J hJ, pi J s) = pi I s :=
begin
  refine eq_of_boxes_subset (œÄ.forall_mem_sigma_boxes.2 $ Œª J hJ J' hJ', _),
  rcases mem_pi_boxes.1 hJ' with ‚ü®‚ü®x, hx‚ü©, rfl‚ü©,
  suffices : partition_box.pi_box J s ‚ü®x, hx‚ü© = I.pi_box s ‚ü®x, _‚ü©,
  { rw this, exact mem_pi_boxes.2 ‚ü®‚ü®x, le_of_mem _ hJ hx‚ü©, rfl‚ü© },
  exact partition_box.pi_box_eq_of_le_of_mem _ (Hl J hJ) (Hu J hJ)
end

lemma exists_sigma_pi_eq [fintype Œπ] (œÄ‚ÇÅ œÄ‚ÇÇ : pi_partition I) :
  ‚àÉ s : Œπ ‚Üí finset ‚Ñù, œÄ‚ÇÅ.sigma (Œª J hJ, pi J s) = pi I s ‚àß œÄ‚ÇÇ.sigma (Œª J hJ, pi J s) = pi I s :=
by refine ‚ü®Œª i, (œÄ‚ÇÅ.boxes.image (Œª J : partition_box Œπ, J.lower i)) ‚à™
    (œÄ‚ÇÅ.boxes.image (Œª J : partition_box Œπ, J.upper i)) ‚à™
    (œÄ‚ÇÇ.boxes.image (Œª J : partition_box Œπ, J.lower i)) ‚à™
    (œÄ‚ÇÇ.boxes.image (Œª J : partition_box Œπ, J.upper i)),
  œÄ‚ÇÅ.sigma_pi_of_subset _ _ _, œÄ‚ÇÇ.sigma_pi_of_subset _ _ _‚ü©;
    intros J hJ i; simp [mem_image_of_mem _ hJ]

lemma pi_update_insert [fintype Œπ] (I : partition_box Œπ) (s : Œπ ‚Üí finset ‚Ñù) (i : Œπ) (x : ‚Ñù) :
  pi I (update s i (insert x (s i))) = (pi I s).sigma
    (Œª J hJ, if hx : x ‚àà set.Ioo (J.lower i) (J.upper i) then split_single J i ‚ü®x, hx‚ü© else ‚ä§) :=
begin
  refine (eq_of_boxes_subset $ Œª J, _),
  simp only [mem_pi_boxes, partition_box.pi_box_update_insert, mem_sigma_boxes, exists_prop],
  rintro ‚ü®y, hy‚ü©,
  refine ‚ü®_, ‚ü®y, rfl‚ü©, _‚ü©,
  -- TODO: `split_ifs` fails; why?
  by_cases h‚ÇÅ : x ‚àà set.Ioo ((I.pi_box s y).lower i) ((I.pi_box s y).upper i),
  { rw [dif_pos h‚ÇÅ] at hy ‚ä¢,
    rw mem_split_single_boxes,
    by_cases h‚ÇÇ : y.1 i ‚â§ x,
    { rw if_pos h‚ÇÇ at hy, exact or.inl hy.symm },
    { rw if_neg h‚ÇÇ at hy, exact or.inr hy.symm } },
  { rw dif_neg h‚ÇÅ at hy ‚ä¢,
    exact mem_top_boxes.2 hy.symm }
end

lemma split_sigma_induction_pi [fintype Œπ] {p : Œ† J : partition_box Œπ, pi_partition J ‚Üí Prop}
  (H_top : ‚àÄ J ‚â§ I, p J ‚ä§) (H_split : ‚àÄ (J ‚â§ I) i x, p J (split_single J i x))
  (H_sigma : ‚àÄ (J ‚â§ I) (œÄ : pi_partition J) (œÄi : Œ† J' ‚àà œÄ.boxes, pi_partition J'), p J œÄ ‚Üí
    (‚àÄ J' ‚àà œÄ.boxes, p J' (œÄi J' ‚Äπ_‚Ä∫)) ‚Üí p J (œÄ.sigma œÄi))
  (s : Œπ ‚Üí finset ‚Ñù) {J : partition_box Œπ} (hJ : J ‚â§ I) :
  p J (pi J s) :=
begin
  refine finset.induction_on_pi s _ _, { simp [H_top J hJ] },
  clear s, intros s i a ha ihs,
  rw pi_update_insert,
  refine H_sigma J hJ _ _ ihs (Œª J' hJ', _),
  have : J' ‚â§ I, from (le_of_mem _ hJ').trans hJ, 
  split_ifs,
  exacts [H_split _ this _ _, H_top _ this]
end

lemma split_sigma_induction [fintype Œπ] {p : Œ† J : partition_box Œπ, pi_partition J ‚Üí Prop}
  (H_top : ‚àÄ J ‚â§ I, p J ‚ä§) (H_split : ‚àÄ (J ‚â§ I) i x, p J (split_single J i x))
  (H_sigma : ‚àÄ (J ‚â§ I) (œÄ : pi_partition J) (œÄi : Œ† J' ‚àà œÄ.boxes, pi_partition J'), p J œÄ ‚Üí
    (‚àÄ J' ‚àà œÄ.boxes, p J' (œÄi J' ‚Äπ_‚Ä∫)) ‚Üí p J (œÄ.sigma œÄi))
  (H_sigma_rev : ‚àÄ (J ‚â§ I) (œÄ : pi_partition J) (œÄi : Œ† J' ‚àà œÄ.boxes, pi_partition J'),
    (‚àÄ J' ‚àà œÄ.boxes, p J' (œÄi J' ‚Äπ_‚Ä∫)) ‚Üí p J (œÄ.sigma œÄi) ‚Üí p J œÄ)
  {J : partition_box Œπ} (hJ : J ‚â§ I) (œÄ : pi_partition J) :
  p J œÄ :=
begin
  have := split_sigma_induction_pi H_top H_split H_sigma,
  rcases exists_sigma_pi_eq œÄ œÄ with ‚ü®s, hs, -‚ü©,
  refine H_sigma_rev J hJ œÄ (Œª J' _, pi J' s) (Œª J' hJ', this _ ((œÄ.le_of_mem hJ').trans hJ)) _,
  rw hs,
  exact this _ hJ
end

def split_center [fintype Œπ] (I : partition_box Œπ) : pi_partition I :=
{ boxes := (finset.univ : finset (set Œπ)).image I.split_center,
  bUnion_boxes_Ioc := by simp [I.Union_split_center_Ioc],
  disjoint_Ioc :=
    begin
      simp only [coe_image, coe_univ, set.image_univ],
      rintro _ ‚ü®s, rfl‚ü© _ ‚ü®t, rfl‚ü© Hne,
      exact I.disjoint_split_center_Ioc (mt (congr_arg I.split_center) Hne)
    end }

@[simp] lemma mem_split_center_boxes [fintype Œπ] {I J : partition_box Œπ} :
  J ‚àà (split_center I).boxes ‚Üî ‚àÉ s, J = I.split_center s :=
by simp [split_center, @eq_comm _ J]

@[simp] lemma coe_split_center_boxes [fintype Œπ] (I : partition_box Œπ) :
  ‚Üë(split_center I).boxes = set.range I.split_center :=
by simp [split_center]

def equiv_split_center [fintype Œπ] (I : partition_box Œπ) :
  set Œπ ‚âÉ (split_center I).boxes :=
(equiv.of_injective _ I.injective_split_center).trans $ equiv.set.of_eq $
  (coe_split_center_boxes I).symm

@[simp] lemma pi_center [fintype Œπ] (I : partition_box Œπ) :
  pi I (Œª i, {(I.lower i + I.upper i) / 2}) = split_center I :=
begin
  refine eq_of_boxes_subset (Œª J, _),
  simp only [mem_pi_boxes, mem_split_center_boxes, I.pi_box_center],
  rintro ‚ü®x, rfl‚ü©, exact ‚ü®_, rfl‚ü©
end

/-
def is_almost_homothetic (œÄ : pi_partition I) (r : set.Ioi (1 : ‚Ñù)) :=
  ‚àÄ (J ‚àà œÄ.boxes) (i j : Œπ), ((J : _).upper i - J.lower i) / (J.upper j - J.lower j) <
    r * ((I.upper i - I.lower i) / (I.upper j - I.lower j))

def is_homothetic (œÄ : pi_partition I) : Prop :=
‚àÄ J ‚àà œÄ.boxes, ‚àÉ Œµ : ‚Ñù, (J : _).upper - J.lower = Œµ ‚Ä¢ (I.upper - I.lower)

lemma is_homothetic.exists_pos {œÄ : pi_partition I} (h : œÄ.is_homothetic) :
  ‚àÄ J ‚àà œÄ.boxes, ‚àÉ Œµ : ‚Ñù, 0 < Œµ ‚àß (J : _).upper - J.lower = Œµ ‚Ä¢ (I.upper - I.lower) :=
begin
  intros J hJ, rcases h J hJ with ‚ü®Œµ, hŒµ‚ü©,
  rcases is_empty_or_nonempty Œπ with hŒπ|‚ü®‚ü®i‚ü©‚ü©,
  { exactI ‚ü®1, zero_lt_one, subsingleton.elim _ _‚ü© },
  { refine ‚ü®Œµ, _, hŒµ‚ü©,
    have := congr_fun hŒµ i, dsimp at this,
    rw [‚Üê div_eq_iff (sub_pos.2 $ I.lower_lt_upper i).ne'] at this, rw ‚Üê this,
    simp only [div_pos, sub_pos.2, partition_box.lower_lt_upper] }
end

lemma is_homothetic.almost {œÄ : pi_partition I} (h : œÄ.is_homothetic) (r : set.Ioi (1 : ‚Ñù)) :
  œÄ.is_almost_homothetic r :=
begin
  intros J hJ i j,
  rcases h.exists_pos J hJ with ‚ü®Œµ, Œµ0, hŒµ‚ü©,
  simp only [funext_iff] at hŒµ, dsimp at hŒµ,
  rw [hŒµ, hŒµ, mul_div_mul_left _ _ Œµ0.ne'],
  refine lt_mul_of_one_lt_left _ r.2,
  simp only [div_pos, sub_pos.2, partition_box.lower_lt_upper]
end
-/

end pi_partition

structure marked_pi_partition (I : partition_box Œπ) extends pi_partition I :=
(mark : Œ† (J ‚àà boxes), Œπ ‚Üí ‚Ñù)
(mark_mem_Icc : ‚àÄ J ‚àà boxes, mark J ‚Äπ_‚Ä∫ ‚àà I.Icc)

attribute [simp] marked_pi_partition.mark_mem_Icc

namespace pi_partition

variables {I : partition_box Œπ}

private def sigma_mark (œÄ : pi_partition I) (œÄi : Œ† J ‚àà œÄ.boxes, marked_pi_partition J)
  (J : partition_box Œπ) (hJ : J ‚àà (œÄ.sigma (Œª J hJ, (œÄi J hJ).to_pi_partition)).boxes) : Œπ ‚Üí ‚Ñù :=
have ‚àÉ J' ‚àà œÄ.boxes, J ‚àà (œÄi J' ‚Äπ_‚Ä∫).boxes, from œÄ.mem_sigma_boxes.1 hJ,
(œÄi this.some this.some_spec.fst).mark J this.some_spec.snd

private lemma sigma_mark_def (œÄ : pi_partition I) (œÄi : Œ† J ‚àà œÄ.boxes, marked_pi_partition J)
  {J J' : partition_box Œπ} (hJ : J ‚àà œÄ.boxes) (hJ' : J' ‚àà (œÄi J hJ).boxes) :
  sigma_mark œÄ œÄi J' (œÄ.mem_sigma_boxes.2 ‚ü®J, hJ, hJ'‚ü©) = (œÄi J hJ).mark J' hJ' :=
begin
  unfold sigma_mark,
  have : ‚àÉ J ‚àà œÄ.boxes, J' ‚àà (œÄi J ‚Äπ_‚Ä∫).boxes, from ‚ü®J, hJ, hJ'‚ü©,
  suffices : this.some = J, by subst J,
  exact (œÄ.mem_sigma_boxes'.1 (œÄ.mem_sigma_boxes.2 this)).unique2
    this.some_spec.fst this.some_spec.snd hJ hJ'
end

def sigma_marked (œÄ : pi_partition I) (œÄi : Œ† J ‚àà œÄ.boxes, marked_pi_partition J) :
  marked_pi_partition I :=
{ to_pi_partition := œÄ.sigma (Œª J hJ, (œÄi J hJ).to_pi_partition),
  mark := sigma_mark œÄ œÄi,
  mark_mem_Icc := œÄ.forall_mem_sigma_boxes.2 $ Œª J hJ J' hJ',
    by { rw sigma_mark_def,
         exact partition_box.le_iff_Icc.1 (œÄ.le_of_mem hJ) ((œÄi _ _).mark_mem_Icc _ _) } }

@[simp] lemma mark_sigma_marked (œÄ : pi_partition I) (œÄi : Œ† J ‚àà œÄ.boxes, marked_pi_partition J)
  {J J' : partition_box Œπ} (hJ : J ‚àà œÄ.boxes) (hJ' : J' ‚àà (œÄi J hJ).boxes) :
  (œÄ.sigma_marked œÄi).mark J' (œÄ.mem_sigma_boxes.2 ‚ü®J, hJ, hJ'‚ü©) = (œÄi J hJ).mark J' hJ' :=
sigma_mark_def œÄ œÄi hJ hJ'

end pi_partition

namespace marked_pi_partition

def single_box (I : partition_box Œπ) (x : Œπ ‚Üí ‚Ñù) (h : x ‚àà I.Icc) :
  marked_pi_partition I :=
‚ü®‚ä§, Œª J _, x, Œª J hJ, h‚ü©

instance (I : partition_box Œπ) : has_top (marked_pi_partition I) :=
‚ü®single_box I I.upper I.upper_mem_Icc‚ü©

instance (I : partition_box Œπ) : inhabited (marked_pi_partition I) := ‚ü®‚ä§‚ü©

lemma forall_mem_single {p : partition_box Œπ ‚Üí (Œπ ‚Üí ‚Ñù) ‚Üí Prop} {I : partition_box Œπ} {x : Œπ ‚Üí ‚Ñù}
  (h : x ‚àà I.Icc) :
  (‚àÄ J ‚àà (single_box I x h).boxes, p J ((single_box I x h).mark J ‚Äπ_‚Ä∫)) ‚Üî p I x :=
by simp [single_box]

section

variables {I : partition_box Œπ} (œÄ : marked_pi_partition I) {x : Œπ ‚Üí ‚Ñù}

def is_Henstock : Prop := ‚àÄ J ‚àà œÄ.boxes, œÄ.mark J ‚Äπ_‚Ä∫ ‚àà J.Icc

lemma is_Henstock_single (h : x ‚àà I.Icc) : is_Henstock (single_box I x h) :=
(forall_mem_single h).2 h

lemma _root_.pi_partition.is_Henstock_sigma_marked (œÄ : pi_partition I)
  (œÄi : Œ† J ‚àà œÄ.boxes, marked_pi_partition J) (H : ‚àÄ J ‚àà œÄ.boxes, (œÄi J ‚Äπ_‚Ä∫).is_Henstock) :
  (œÄ.sigma_marked œÄi).is_Henstock :=
œÄ.forall_mem_sigma_boxes.2 $ Œª J hJ J' hJ', by simp [H J hJ J' hJ']

end

variables [fintype Œπ] {I : partition_box Œπ} (œÄ : marked_pi_partition I) {x : Œπ ‚Üí ‚Ñù}
  {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû}

open emetric

def is_subordinate (œÄ : marked_pi_partition I) (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû) :=
‚àÄ (J ‚àà œÄ.boxes), (J : _).Icc ‚äÜ closed_ball (œÄ.mark J ‚Äπ_‚Ä∫) (r $ œÄ.mark J ‚Äπ_‚Ä∫)

lemma is_subordinate_single (h : x ‚àà I.Icc) :
  (single_box I x h).is_subordinate r ‚Üî I.Icc ‚äÜ closed_ball x (r x) :=
@forall_mem_single _ (Œª J z, (J : _).Icc ‚äÜ closed_ball z (r z)) _ _ h

lemma _root_.pi_partition.is_subordinate_sigma_marked (œÄ : pi_partition I) {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû}
  (œÄi : Œ† J ‚àà œÄ.boxes, marked_pi_partition J) (H : ‚àÄ J ‚àà œÄ.boxes, (œÄi J ‚Äπ_‚Ä∫).is_subordinate r) :
  (œÄ.sigma_marked œÄi).is_subordinate r :=
œÄ.forall_mem_sigma_boxes.2 $ Œª J hJ J' hJ', by simp [H J hJ J' hJ']

lemma exists_is_subordinate (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû) (hr : ‚àÄ x ‚àà I.Icc, r x ‚â† 0) :
  ‚àÉ œÄ : marked_pi_partition I, œÄ.is_subordinate r ‚àß œÄ.is_Henstock ‚àß
    ‚àÄ J ‚àà œÄ.boxes, ‚àÉ n : ‚Ñï, ‚àÄ i, (J : _).upper i - J.lower i = (I.upper i - I.lower i) / 2 ^ n :=
begin
  apply partition_box.subbox_induction_on I,
  { intros J Hle H,
    have : ‚àÄ J' ‚àà (pi_partition.split_center J).boxes,
      ‚àÉ œÄ : marked_pi_partition J', œÄ.is_subordinate r ‚àß œÄ.is_Henstock ‚àß
        ‚àÄ J'' ‚àà œÄ.boxes, ‚àÉ n : ‚Ñï, ‚àÄ i,
          (J'' : _).upper i - J''.lower i = (J'.upper i - J'.lower i) / 2 ^ n,
    { simp only [pi_partition.mem_split_center_boxes],
      rintro _ ‚ü®s, rfl‚ü©, exact H s },
    choose! œÄi hr hHen hsub,
    refine ‚ü®(pi_partition.split_center J).sigma_marked (Œª J' hJ', œÄi J'),
      pi_partition.is_subordinate_sigma_marked _ _ hr,
      pi_partition.is_Henstock_sigma_marked _ _ hHen,
      (pi_partition.forall_mem_sigma_boxes _).2 $ Œª J' hJ' J'' (hJ'' : J'' ‚àà (œÄi J').boxes), _‚ü©,
    rcases hsub J' hJ' J'' hJ'' with ‚ü®n, hn‚ü©,
    rcases pi_partition.mem_split_center_boxes.1 hJ' with ‚ü®s, rfl‚ü©,
    refine ‚ü®n + 1, Œª i, _‚ü©,
    simp [hn, pow_succ, div_div_eq_div_mul] },
  { intros z hz,
    have h0 : 0 < r z, from pos_iff_ne_zero.2 (hr z hz),
    refine ‚ü®I.Icc ‚à© closed_ball z (r z),
      inter_mem_nhds_within _ (closed_ball_mem_nhds _ h0), _‚ü©,
    intros J Hle n Hmem HIcc Hsub,
    rw set.subset_inter_iff at HIcc,
    refine ‚ü®single_box _ _ Hmem, (is_subordinate_single _).2 HIcc.2, is_Henstock_single _, _‚ü©,
    simp only [single_box, pi_partition.mem_top_boxes, forall_eq],
    refine ‚ü®0, Œª i, _‚ü©, simp }
end

lemma is_subordinate.mono {œÄ : marked_pi_partition I} {r r' : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû}
  (h : ‚àÄ x ‚àà I.Icc, r x ‚â§ r' x) (hr : œÄ.is_subordinate r) :
  œÄ.is_subordinate r' :=
Œª J hJ x hx, closed_ball_subset_closed_ball (h _ $ œÄ.mark_mem_Icc _ _) (hr _ _ hx)

lemma is_subordinate.ediam_le {œÄ : marked_pi_partition I} {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû}
  (h : œÄ.is_subordinate r) {J : partition_box Œπ} (hJ : J ‚àà œÄ.boxes) :
  diam J.Icc ‚â§ 2 * r (œÄ.mark J hJ) :=
calc diam J.Icc ‚â§ diam (closed_ball (œÄ.mark J hJ) (r $ œÄ.mark J hJ)) : diam_mono (h J hJ)
            ... ‚â§ 2 * r (œÄ.mark J hJ)                                : diam_closed_ball

end marked_pi_partition

namespace box_integral

variables {E F : Type*} [normed_group E] [normed_space ‚Ñù E] [normed_group F] [normed_space ‚Ñù F]
  [fintype Œπ] {I : partition_box Œπ} {œÄ : marked_pi_partition I}

open marked_pi_partition

def integral_sum (f : (Œπ ‚Üí ‚Ñù) ‚Üí E) (vol : partition_box Œπ ‚Üí (E ‚ÜíL[‚Ñù] F))
  (œÄ : marked_pi_partition I) : F :=
œÄ.boxes.attach.sum $ Œª J, vol J $ f $ œÄ.center J J.coe_prop

@[simp] lemma integral_sum_add (f g : (Œπ ‚Üí ‚Ñù) ‚Üí E) (vol : partition_box Œπ ‚Üí (E ‚ÜíL[‚Ñù] F))
  (œÄ : marked_pi_partition I) :
  integral_sum (f + g) vol œÄ = integral_sum f vol œÄ + integral_sum g vol œÄ :=
by simp only [integral_sum, finset.sum_add_distrib, pi.add_apply, (vol _).map_add]

@[simp] lemma integral_sum_neg (f : (Œπ ‚Üí ‚Ñù) ‚Üí E) (vol : partition_box Œπ ‚Üí (E ‚ÜíL[‚Ñù] F))
  (œÄ : marked_pi_partition I) :
  integral_sum (-f) vol œÄ = -integral_sum f vol œÄ :=
by simp only [integral_sum, finset.sum_neg_distrib, pi.neg_apply, (vol _).map_neg]

@[simp] lemma integral_sum_smul (c : ‚Ñù) (f : (Œπ ‚Üí ‚Ñù) ‚Üí E) (vol : partition_box Œπ ‚Üí (E ‚ÜíL[‚Ñù] F))
  (œÄ : marked_pi_partition I) :
  integral_sum (c ‚Ä¢ f) vol œÄ = c ‚Ä¢ integral_sum f vol œÄ :=
by simp only [integral_sum, finset.smul_sum, pi.smul_apply, continuous_linear_map.map_smul]

def has_integral (I : partition_box Œπ) (l : filter (marked_pi_partition I)) (f : (Œπ ‚Üí ‚Ñù) ‚Üí E)
  (vol : partition_box Œπ ‚Üí (E ‚ÜíL[‚Ñù] F)) (y : F) : Prop :=
tendsto (integral_sum f vol) l (ùìù y)

def integrable (I : partition_box Œπ) (l : filter (marked_pi_partition I)) (f : (Œπ ‚Üí ‚Ñù) ‚Üí E)
  (vol : partition_box Œπ ‚Üí (E ‚ÜíL[‚Ñù] F)) : Prop :=
‚àÉ y, has_integral I l f vol y

def integral (I : partition_box Œπ) (l : filter (marked_pi_partition I)) (f : (Œπ ‚Üí ‚Ñù) ‚Üí E)
  (vol : partition_box Œπ ‚Üí (E ‚ÜíL[‚Ñù] F)) : F :=
if h : integrable I l f vol then classical.some h else 0

variables {l : filter (marked_pi_partition I)}
  {f g : (Œπ ‚Üí ‚Ñù) ‚Üí E} {vol : partition_box Œπ ‚Üí (E ‚ÜíL[‚Ñù] F)} {y y' : F}

lemma integrable_iff_Cauchy [complete_space F] [ne_bot l] :
  integrable I l f vol ‚Üî cauchy (l.map (integral_sum f vol)) :=
cauchy_map_iff_exists_tendsto.symm

lemma has_integral.R_to_H (h : has_integral I Riemann f vol y) :
  has_integral I Henstock f vol y :=
h.mono_left Henstock_le_Riemann

lemma has_integral.MS_to_H (h : has_integral I McShane f vol y) :
  has_integral I Henstock f vol y :=
h.mono_left Henstock_le_McShane

lemma integrable.has_integral (h : integrable I l f vol) :
  has_integral I l f vol (integral I l f vol) :=
by { rw [integral, dif_pos h], exact classical.some_spec h }

lemma has_integral.unique [ne_bot l] (h : has_integral I l f vol y)
  (h' : has_integral I l f vol y') :
  y = y' :=
tendsto_nhds_unique h h'

lemma has_integral.integrable (h : has_integral I l f vol y) : integrable I l f vol := ‚ü®_, h‚ü©

lemma has_integral.integral_eq [ne_bot l] (h : has_integral I l f vol y) :
  integral I l f vol = y :=
h.integrable.has_integral.unique h

lemma has_integral.add (h : has_integral I l f vol y) (h' : has_integral I l g vol y') :
  has_integral I l (f + g) vol (y + y') :=
by simpa only [has_integral, ‚Üê integral_sum_add] using h.add h'

lemma integrable.add (hf : integrable I l f vol) (hg : integrable I l g vol) :
  integrable I l (f + g) vol :=
(hf.has_integral.add hg.has_integral).integrable

lemma integral_add [ne_bot l] (hf : integrable I l f vol) (hg : integrable I l g vol) :
  integral I l (f + g) vol = integral I l f vol + integral I l g vol :=
(hf.has_integral.add hg.has_integral).integral_eq

lemma has_integral.neg (hf : has_integral I l f vol y) : has_integral I l (-f) vol (-y) :=
by simpa only [has_integral, ‚Üê integral_sum_neg] using hf.neg

lemma integrable.neg (hf : integrable I l f vol) : integrable I l (-f) vol :=
hf.has_integral.neg.integrable

lemma integrable.of_neg (hf : integrable I l (-f) vol) : integrable I l f vol := neg_neg f ‚ñ∏ hf.neg

@[simp] lemma integrable_neg : integrable I l (-f) vol ‚Üî integrable I l f vol :=
‚ü®Œª h, h.of_neg, Œª h, h.neg‚ü©

@[simp] lemma integral_neg [ne_bot l] : integral I l (-f) vol = -integral I l f vol :=
if h : integrable I l f vol then h.has_integral.neg.integral_eq
else by rw [integral, integral, dif_neg h, dif_neg (mt integrable.of_neg h), neg_zero]

lemma has_integral.sub (h : has_integral I l f vol y) (h' : has_integral I l g vol y') :
  has_integral I l (f - g) vol (y - y') :=
by simpa only [sub_eq_add_neg] using h.add h'.neg

lemma integrable.sub (hf : integrable I l f vol) (hg : integrable I l g vol) :
  integrable I l (f - g) vol :=
(hf.has_integral.sub hg.has_integral).integrable

lemma integral_sub [ne_bot l] (hf : integrable I l f vol) (hg : integrable I l g vol) :
  integral I l (f - g) vol = integral I l f vol - integral I l g vol :=
(hf.has_integral.sub hg.has_integral).integral_eq

lemma has_integral_zero : has_integral I l (Œª _, (0:E)) vol 0 :=
by { dunfold has_integral, convert tendsto_const_nhds, ext œÄ, simp [integral_sum] }

lemma integrable_zero : integrable I l (Œª _, (0:E)) vol := ‚ü®0, has_integral_zero‚ü©

@[simp] lemma integral_zero [ne_bot l] : integral I l (Œª _, (0:E)) vol = 0 :=
has_integral_zero.integral_eq

lemma has_integral.smul (hf : has_integral I l f vol y) (c : ‚Ñù) :
  has_integral I l (c ‚Ä¢ f) vol (c ‚Ä¢ y) :=
by simpa only [has_integral, ‚Üê integral_sum_smul]
  using (tendsto_const_nhds : tendsto _ _ (ùìù c)).smul hf

lemma integrable.smul (hf : integrable I l f vol) (c : ‚Ñù) :
  integrable I l (c ‚Ä¢ f) vol :=
(hf.has_integral.smul c).integrable

lemma integrable.of_smul {c : ‚Ñù} (hf : integrable I l (c ‚Ä¢ f) vol) (hc : c ‚â† 0) :
  integrable I l f vol :=
by { convert hf.smul c‚Åª¬π, ext x, simp only [pi.smul_apply, inv_smul_smul' hc] }

@[simp] lemma integral_smul [ne_bot l] (c : ‚Ñù) :
  integral I l (Œª x, c ‚Ä¢ f x) vol = c ‚Ä¢ integral I l f vol :=
begin
  rcases em (c = 0) with rfl | hc, { simp },
  by_cases hf : integrable I l f vol,
  { exact (hf.has_integral.smul c).integral_eq },
  { have : ¬¨integrable I l (Œª x, c ‚Ä¢ f x) vol, from mt (Œª h, h.of_smul hc) hf,
    rw [integral, integral, dif_neg hf, dif_neg this, smul_zero] }
end

lemma Riemann_integrable_of_continuous_on (h : continuous_on f (Icc I.lower I.upper))

end box_integral
