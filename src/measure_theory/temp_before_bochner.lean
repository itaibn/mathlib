/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import measure_theory.temp_from_set_to_before_bochner

/-! # Temporary file, please remove
-/

noncomputable theory
open topological_space measure_theory measure_theory.Lp filter
open_locale nnreal ennreal topological_space big_operators measure_theory

namespace measure_theory

variables {Œ± Œ≤ Œ≥ E E' F F' G G' H ùïú ùïÇ : Type*} {p : ‚Ñù‚â•0‚àû}
  [is_R_or_C ùïú] -- ùïú for ‚Ñù or ‚ÑÇ
  [is_R_or_C ùïÇ] [measurable_space ùïÇ] -- ùïÇ for ‚Ñù or ‚ÑÇ, together with a measurable_space
  [measurable_space Œ≤] -- Œ≤ for a generic measurable space
  -- F for Lp submodule
  [normed_group F] [normed_space ùïÇ F] [measurable_space F] [borel_space F]
  [second_countable_topology F]
  -- F' for integrals on F
  [normed_group F'] [normed_space ùïÇ F'] [measurable_space F'] [borel_space F']
  [second_countable_topology F'] [normed_space ‚Ñù F'] [complete_space F']
  -- G for Lp add_subgroup
  [normed_group G] [measurable_space G] [borel_space G] [second_countable_topology G]
  -- G' for integrals on G
  [normed_group G'] [measurable_space G'] [borel_space G'] [second_countable_topology G']
  [normed_space ‚Ñù G'] [complete_space G']
  -- H for measurable space and normed group (hypotheses of mem_‚Ñíp)
  [measurable_space H] [normed_group H]

lemma mem_set_congr_ae [measurable_space Œ±] {Œº : measure Œ±} {s t : set Œ±} (hst : s =·µê[Œº] t) :
  ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üî x ‚àà t :=
hst.mono (Œª x hx, by rwa [set.mem_def, set.mem_def, ‚Üê eq_iff_iff])

lemma mem_‚Ñí0_iff_ae_measurable [measurable_space Œ±] {Œº : measure Œ±} {f : Œ± ‚Üí H} :
  mem_‚Ñíp f 0 Œº ‚Üî ae_measurable f Œº :=
by { simp_rw mem_‚Ñíp, refine and_iff_left _, simp, }

lemma simple_func.mem_range_iff_preimage_nonempty [measurable_space Œ±] (f : simple_func Œ± G)
  (y : G) :
  y ‚àà f.range ‚Üî f ‚Åª¬π' {y} ‚â† ‚àÖ :=
begin
  rw [simple_func.mem_range, set.mem_range, ne.def, set.eq_empty_iff_forall_not_mem],
  push_neg,
  simp_rw [set.mem_preimage, set.mem_singleton_iff],
end

lemma simple_func.mem_range_add_iff [measurable_space Œ±] (f g : simple_func Œ± G) (y : G) :
  y ‚àà (f + g).range ‚Üî (f + g) ‚Åª¬π' {y} ‚â† ‚àÖ :=
by { rw ‚Üê simple_func.coe_add, exact simple_func.mem_range_iff_preimage_nonempty (f + g) y, }

lemma simple_func.range_add_subset_add_range [measurable_space Œ±] (f g : simple_func Œ± G)
  [decidable_eq G] :
  (f + g).range ‚äÜ f.range + g.range :=
begin
  intro x,
  simp_rw [finset.mem_add, simple_func.mem_range, set.mem_range, simple_func.coe_add, pi.add_apply],
  rintros ‚ü®y, hy‚ü©,
  exact ‚ü®f y, g y, ‚ü®y, rfl‚ü©, ‚ü®y, rfl‚ü©, hy‚ü©,
end

/-- Indicator of as set as as `simple_func`. -/
def indicator_simple_func [measurable_space Œ±] [has_zero Œ≥] {s : set Œ±} (hs : measurable_set s)
  (c : Œ≥) :
  simple_func Œ± Œ≥ :=
simple_func.piecewise s hs (simple_func.const Œ± c) (simple_func.const Œ± 0)

lemma indicator_simple_func_coe [measurable_space Œ±] [has_zero Œ≥] {s : set Œ±}
  {hs : measurable_set s} {c : Œ≥} :
  ‚áë(indicator_simple_func hs c) = s.indicator (Œª (_x : Œ±), c) :=
by simp only [indicator_simple_func, simple_func.coe_const, simple_func.const_zero,
  simple_func.coe_zero, set.piecewise_eq_indicator, simple_func.coe_piecewise]

lemma indicator_simple_func_zero [measurable_space Œ±] [has_zero Œ≥] {s : set Œ±}
  {hs : measurable_set s} :
  indicator_simple_func hs (0 : Œ≥) = 0 :=
begin
  ext1,
  rw indicator_simple_func_coe,
  simp,
end

lemma indicator_simple_func_range_subset [measurable_space Œ±] [has_zero Œ≥] [decidable_eq Œ≥]
  {s : set Œ±} (hs : measurable_set s) (c : Œ≥) :
  (indicator_simple_func hs c).range ‚äÜ insert (0 : Œ≥) {c} :=
begin
  intro x,
  simp_rw [simple_func.mem_range, indicator_simple_func_coe, set.mem_range_indicator],
  simp only [set.mem_image, exists_and_distrib_right, ne.def, finset.mem_insert,
    finset.mem_singleton],
  intro h,
  cases h,
  { exact or.inl h.1, },
  { exact or.inr h.2.symm, },
end

lemma indicator_simple_func_range [measurable_space Œ±] [has_zero Œ≥] [decidable_eq Œ≥] {s : set Œ±}
  (hs : measurable_set s) (c : Œ≥) (hs_nonempty : s.nonempty) (hs_not_univ : s ‚â† set.univ) :
  (indicator_simple_func hs c).range = insert (0 : Œ≥) {c} :=
begin
  ext1 x,
  simp_rw [simple_func.mem_range, indicator_simple_func_coe, set.mem_range_indicator],
  simp only [hs_nonempty, set.nonempty.image_const, set.mem_singleton_iff, ne.def,
    finset.mem_insert, finset.mem_singleton],
  simp [hs_not_univ],
end

lemma indicator_simple_func_univ_range [measurable_space Œ±] [has_zero Œ≥] [hŒ± : nonempty Œ±] (c : Œ≥) :
  (indicator_simple_func (@measurable_set.univ Œ± _) c).range = {c} :=
begin
  ext1 x,
  simp_rw [simple_func.mem_range, indicator_simple_func_coe, set.mem_range_indicator],
  simp,
end

lemma simple_func.coe_finset_sum_apply {Œπ} [measurable_space Œ±] [add_comm_group Œ≥]
  (f : Œπ ‚Üí simple_func Œ± Œ≥) (s : finset Œπ) (x : Œ±) :
  (‚àë i in s, f i) x = ‚àë i in s, f i x :=
begin
  haveI : decidable_eq Œπ := classical.dec_eq Œπ,
  refine finset.induction _ _ s,
  { simp, },
  intros j s hjs h_sum,
  rw [finset.sum_insert hjs, simple_func.coe_add, pi.add_apply, h_sum, ‚Üê finset.sum_insert hjs],
end

lemma simple_func.coe_finset_sum {Œπ} [measurable_space Œ±] [add_comm_group Œ≥]
  (f : Œπ ‚Üí simple_func Œ± Œ≥) (s : finset Œπ) :
  ‚áë(‚àë i in s, f i) = ‚àë i in s, f i :=
by { ext1 x, simp_rw finset.sum_apply, exact simple_func.coe_finset_sum_apply f s x, }

lemma simple_func_eq_sum_indicator [measurable_space Œ±] [add_comm_group Œ≥]
  (f : simple_func Œ± Œ≥) :
  f = ‚àë y in f.range,
    indicator_simple_func (simple_func.measurable_set_fiber f y) y :=
begin
  ext,
  simp [indicator_simple_func],
  rw simple_func.coe_finset_sum_apply,
  simp_rw simple_func.piecewise_apply,
  simp only [simple_func.coe_const, function.const_apply, set.mem_preimage, set.mem_singleton_iff,
    pi.zero_apply, simple_func.coe_zero],
  haveI : decidable_eq Œ≥ := classical.dec_eq Œ≥,
  have hfa : f a = ite (f a ‚àà f.range) (f a) (0 : Œ≥), by simp [simple_func.mem_range_self],
  have h := (finset.sum_ite_eq f.range (f a) (Œª i, i)).symm,
  dsimp only at h,
  rw ‚Üê hfa at h,
  convert h,
  ext1,
  congr,
end

lemma simple_func.exists_forall_norm_le [measurable_space Œ±] [has_norm Œ≥] (f : simple_func Œ± Œ≥) :
  ‚àÉ C, ‚àÄ x, ‚à•f x‚à• ‚â§ C :=
simple_func.exists_forall_le (simple_func.map (Œª x, ‚à•x‚à•) f)

lemma snorm'_simple_func [normed_group Œ≥] [measurable_space Œ±] {p : ‚Ñù} (f : simple_func Œ± Œ≥)
  (Œº : measure Œ±) :
  snorm' f p Œº = (‚àë y in f.range, (nnnorm y : ‚Ñù‚â•0‚àû) ^ p * Œº (f ‚Åª¬π' {y})) ^ (1/p) :=
begin
  rw snorm',
  have h_map : (Œª a, (nnnorm (f a) : ‚Ñù‚â•0‚àû) ^ p)
    = simple_func.map (Œª a : Œ≥, (nnnorm a : ‚Ñù‚â•0‚àû) ^ p) f,
  { simp, },
  simp_rw h_map,
  rw simple_func.lintegral_eq_lintegral,
  rw simple_func.map_lintegral,
end

lemma snorm_ess_sup_simple_func_lt_top [normed_group Œ≥] [measurable_space Œ±] (f : simple_func Œ± Œ≥)
  (Œº : measure Œ±) :
  snorm_ess_sup f Œº < ‚àû :=
begin
  rw snorm_ess_sup,
  obtain ‚ü®C, hfC‚ü© := simple_func.exists_forall_norm_le f,
  simp_rw ‚Üê of_real_norm_eq_coe_nnnorm,
  refine (ess_sup_le_of_ae_le (ennreal.of_real C) (eventually_of_forall (Œª x, _))).trans_lt
    ennreal.of_real_lt_top,
  exact ennreal.of_real_le_of_real (hfC x),
end

lemma simple_func.mem_‚Ñíp_top [measurable_space Œ±] (f : simple_func Œ± H) (Œº : measure Œ±) :
  mem_‚Ñíp f ‚àû Œº :=
‚ü®simple_func.ae_measurable f,
  by { rw snorm_exponent_top, exact snorm_ess_sup_simple_func_lt_top f Œº}‚ü©

lemma simple_func.finite_measure_of_mem_‚Ñíp [measurable_space Œ±] {Œº : measure Œ±}
  (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû)
  (f : simple_func Œ± H) (hf : mem_‚Ñíp f p Œº) (y : H) (hyf : y ‚àà f.range) :
  y = 0 ‚à® Œº (f ‚Åª¬π' {y}) < ‚àû :=
begin
  have hp_pos_real : 0 < p.to_real, from ennreal.to_real_pos_iff.mpr ‚ü®hp_pos, hp_ne_top‚ü©,
  have hf_snorm := mem_‚Ñíp.snorm_lt_top hf,
  rw [snorm_eq_snorm' hp_pos.ne.symm hp_ne_top, snorm'_simple_func,
    ‚Üê ennreal.lt_rpow_one_div_iff] at hf_snorm,
  swap, { simp [hp_pos_real], },
  rw ennreal.top_rpow_of_pos at hf_snorm,
  swap, { simp [hp_pos_real], },
  rw ennreal.sum_lt_top_iff at hf_snorm,
  specialize hf_snorm y hyf,
  rw ennreal.mul_lt_top_iff at hf_snorm,
  cases hf_snorm,
  { exact or.inr hf_snorm.2, },
  cases hf_snorm,
  { simp only [hp_pos_real, ennreal.rpow_eq_zero_iff, and_true, ennreal.coe_ne_top, or_false,
      nnnorm_eq_zero, ennreal.coe_eq_zero, false_and] at hf_snorm,
    exact or.inl hf_snorm, },
  { simp [hf_snorm], },
end

lemma simple_func.finite_measure_of_integrable [measurable_space Œ±] {Œº : measure Œ±}
  (f : simple_func Œ± H) (hf : integrable f Œº) (y : H) (hyf : y ‚àà f.range) :
  y = 0 ‚à® Œº (f ‚Åª¬π' {y}) < ‚àû :=
begin
  rw ‚Üê mem_‚Ñíp_one_iff_integrable at hf,
  exact simple_func.finite_measure_of_mem_‚Ñíp ennreal.zero_lt_one ennreal.coe_ne_top f hf y hyf,
end

lemma simple_func.mem_‚Ñíp_of_integrable [measurable_space Œ±] {Œº : measure Œ±} (p : ‚Ñù‚â•0‚àû)
  {f : simple_func Œ± H} (hf : integrable f Œº) :
  mem_‚Ñíp f p Œº :=
begin
  refine ‚ü®simple_func.ae_measurable f, _‚ü©,
  by_cases hp0 : p = 0,
  { simp [hp0], },
  rw ‚Üê ne.def at hp0,
  by_cases hp_top : p = ‚àû,
  { simp only [hp_top, snorm_exponent_top],
    exact snorm_ess_sup_simple_func_lt_top f Œº, },
  have hp_pos : 0 < p.to_real,
    from ennreal.to_real_pos_iff.mpr ‚ü®lt_of_le_of_ne (zero_le _) hp0.symm, hp_top‚ü©,
  rw [snorm_eq_snorm' hp0 hp_top, snorm'_simple_func],
  refine ennreal.rpow_lt_top_of_nonneg _ _,
  { simp, },
  refine (ennreal.sum_lt_top (Œª y hy, _)).ne,
  have hyŒº := simple_func.finite_measure_of_integrable f hf y hy,
  cases hyŒº,
  { simp [hyŒº, hp_pos], },
  refine ennreal.mul_lt_top (ennreal.rpow_lt_top_of_nonneg ennreal.to_real_nonneg _) hyŒº,
  exact ennreal.coe_ne_top,
end

lemma simple_func.mem_‚Ñíp_of_finite_measure_range [measurable_space Œ±] {Œº : measure Œ±} (p : ‚Ñù‚â•0‚àû)
  {f : simple_func Œ± H} (hf : ‚àÄ y ‚àà f.range, y = 0 ‚à® Œº (f ‚Åª¬π' {y}) < ‚àû) :
  mem_‚Ñíp f p Œº :=
begin
  by_cases hp0 : p = 0,
  { rw [hp0, mem_‚Ñí0_iff_ae_measurable],
    exact simple_func.ae_measurable f, },
  rw ‚Üê ne.def at hp0,
  by_cases hp_top : p = ‚àû,
  { rw hp_top, exact simple_func.mem_‚Ñíp_top f Œº, },
  have hp_pos : 0 < p.to_real,
    from ennreal.to_real_pos_iff.mpr ‚ü®lt_of_le_of_ne (zero_le _) hp0.symm, hp_top‚ü©,
  refine ‚ü®simple_func.ae_measurable f, _‚ü©,
  rw snorm_eq_snorm' hp0 hp_top,
  rw snorm'_simple_func,
  refine ennreal.rpow_lt_top_of_nonneg (by simp) (ne_of_lt _),
  refine ennreal.sum_lt_top_iff.mpr (Œª y hy, _),
  cases hf y hy with h h,
  { simp [h, hp_pos], },
  { refine ennreal.mul_lt_top _ h,
    exact ennreal.rpow_lt_top_of_nonneg ennreal.to_real_nonneg ennreal.coe_ne_top, },
end

lemma simple_func.mem_‚Ñíp_iff_integrable [measurable_space Œ±] {Œº : measure Œ±} {f : simple_func Œ± H}
  (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) :
  mem_‚Ñíp f p Œº ‚Üî integrable f Œº :=
begin
  refine ‚ü®Œª h, _, simple_func.mem_‚Ñíp_of_integrable p‚ü©,
  rw ‚Üê mem_‚Ñíp_one_iff_integrable,
  refine simple_func.mem_‚Ñíp_of_finite_measure_range 1 _,
  exact simple_func.finite_measure_of_mem_‚Ñíp hp_pos hp_ne_top f h,
end

lemma simple_func.mem_‚Ñíp_of_finite_measure [measurable_space Œ±] (p : ‚Ñù‚â•0‚àû) (f : simple_func Œ± H)
  (Œº : measure Œ±) [finite_measure Œº] :
  mem_‚Ñíp f p Œº :=
begin
  obtain ‚ü®C, hfC‚ü© := simple_func.exists_forall_norm_le f,
  exact mem_‚Ñíp.of_bound (simple_func.ae_measurable f) C (eventually_of_forall hfC),
end

protected lemma simple_func.integrable [measurable_space Œ±] {Œº : measure Œ±} [finite_measure Œº]
  (f : simple_func Œ± H) :
  integrable f Œº :=
mem_‚Ñíp_one_iff_integrable.mp (simple_func.mem_‚Ñíp_of_finite_measure 1 f Œº)

lemma simple_func.measure_preimage_ne_zero_lt_top [measurable_space Œ±]
  {Œº : measure Œ±} (f : simple_func Œ± H) (hf : integrable f Œº) {s : finset H} (hs0 : (0 : H) ‚àâ s) :
  Œº (f ‚Åª¬π' s) < ‚àû :=
begin
  rw ‚Üê simple_func.sum_measure_preimage_singleton,
  refine ennreal.sum_lt_top (Œª y hy, _),
  have hf' := simple_func.finite_measure_of_integrable f hf y,
  by_cases hyf : y ‚àà f.range,
  { cases hf' hyf with hy0 hyŒº,
    { rw hy0 at hy,
      exact absurd hy hs0, },
    { exact hyŒº, }, },
  rw ‚Üê simple_func.preimage_eq_empty_iff f y at hyf,
  simp [hyf],
end

lemma simple_func.preimage_set [measurable_space Œ±] (f : simple_func Œ± Œ≥) (s : set Œ≥)
  [decidable_pred s] :
  f ‚Åª¬π' s = f ‚Åª¬π' ‚Üë(f.range.filter s) :=
begin
  ext1 x,
  simp_rw [set.mem_preimage, finset.mem_coe, finset.mem_filter],
  simp only [true_and, set.mem_range_self, simple_func.mem_range],
  refl,
end

lemma simple_func.preimage_map_ne_zero_subset {Œ¥} [measurable_space Œ±] [has_zero Œ¥] [has_zero Œ≥]
  {f : simple_func Œ± Œ≥} (g : Œ≥ ‚Üí Œ¥) (hg : g 0 = 0)
  {s : finset Œ¥} (hs0 : (0 : Œ¥) ‚àâ s) [decidable_pred (Œª z : Œ≥, z ‚â† 0)] :
  (f.map g) ‚Åª¬π' s ‚äÜ f ‚Åª¬π' (finset.filter (Œª z, z ‚â† (0 : Œ≥)) f.range) :=
begin
  intro x,
  simp_rw [simple_func.map_preimage, set.mem_preimage, finset.mem_coe, finset.mem_filter],
  intro h,
  refine ‚ü®h.1, Œª hf0, _‚ü©,
  rw [hf0, hg] at h,
  exact hs0 h.2,
end

lemma simple_func.preimage_map_ne_zero_subset' {Œ¥} [measurable_space Œ±] [has_zero Œ¥] [has_zero Œ≥]
  {f : simple_func Œ± Œ≥} (g : Œ≥ ‚Üí Œ¥) (hg : g 0 = 0)
  {s : set Œ¥} (hs0 : (0 : Œ¥) ‚àâ s) [decidable_pred (Œª z : Œ≥, z ‚â† 0)] :
  (f.map g) ‚Åª¬π' s ‚äÜ f ‚Åª¬π' (finset.filter (Œª z, z ‚â† (0 : Œ≥)) f.range) :=
begin
  haveI : decidable_pred s := classical.dec_pred s,
  have h_range : (f.map g) ‚Åª¬π' s = (f.map g) ‚Åª¬π' ‚Üë((f.map g).range.filter s),
    from simple_func.preimage_set _ s,
  rw h_range,
  refine simple_func.preimage_map_ne_zero_subset g hg _,
  rw finset.mem_filter,
  push_neg,
  intro h,
  exact hs0,
end

lemma simple_func.preimage_map_singleton_ne_zero_subset {Œ¥} [measurable_space Œ±] [has_zero Œ¥]
  [has_zero Œ≥] {f : simple_func Œ± Œ≥} (g : Œ≥ ‚Üí Œ¥) (hg : g 0 = 0)
  {y : Œ¥} (hy0 : y ‚â† 0) [decidable_pred (Œª z : Œ≥, z ‚â† 0)] :
  (f.map g) ‚Åª¬π' {y} ‚äÜ f ‚Åª¬π' (finset.filter (Œª z, z ‚â† (0 : Œ≥)) f.range) :=
begin
  haveI : decidable_pred ({y} : set Œ¥) := classical.dec_pred _,
  refine simple_func.preimage_map_ne_zero_subset' g hg (Œª h, _),
  rw set.mem_singleton_iff at h,
  exact hy0 h.symm,
end

lemma simple_func.integrable_map [measurable_space Œ±] [normed_group Œ≤] {Œº : measure Œ±}
  (f : simple_func Œ± H) (hf : integrable f Œº) (g : H ‚Üí Œ≤) (hg : g 0 = 0) :
  integrable (f.map g) Œº :=
begin
  have hf' := simple_func.finite_measure_of_integrable _ hf,
  refine ‚ü®(f.map g).ae_measurable, _‚ü©,
  rw has_finite_integral,
  have h_eq : (Œª a, (nnnorm (f.map g a) : ‚Ñù‚â•0‚àû)) = (f.map g).map (Œª a, (nnnorm a : ‚Ñù‚â•0‚àû)),
  { simp_rw simple_func.coe_map, },
  simp_rw h_eq,
  rw simple_func.lintegral_eq_lintegral,
  rw simple_func.lintegral,
  refine ennreal.sum_lt_top (Œª z hz, _),
  rw [simple_func.range_map, finset.mem_image] at hz,
  obtain ‚ü®u, hu, huz‚ü© := hz,
  haveI : decidable_eq Œ≤ := classical.dec_eq Œ≤,
  rw [simple_func.range_map, finset.mem_image] at hu,
  obtain ‚ü®y, hy, hyu‚ü© := hu,
  cases hf' y hy with h h,
  { rw [h, hg] at hyu,
    simp only [hyu.symm, nnnorm_zero, ennreal.coe_zero] at huz,
    simp [huz.symm], },
  { by_cases hz0 : z = 0,
    { simp [hz0], },
    nth_rewrite 0 huz.symm,
    refine ennreal.mul_lt_top ennreal.coe_lt_top _,
    have h_ss1 : ((f.map g).map (Œª a, (nnnorm a : ‚Ñù‚â•0‚àû))) ‚Åª¬π' {z}
      ‚äÜ (f.map g) ‚Åª¬π' (finset.filter (Œª z, z ‚â† (0 : Œ≤)) (f.map g).range),
    { refine simple_func.preimage_map_ne_zero_subset' _ _ _,
      { simp, },
      { intro h, rw set.mem_singleton_iff at h, exact hz0 h.symm, }, },
    haveI : decidable_pred (Œª (z : H), z ‚â† 0) := classical.dec_pred _,
    have h_ss2 : (f.map g) ‚Åª¬π' (finset.filter (Œª z, z ‚â† (0 : Œ≤)) (f.map g).range)
      ‚äÜ f ‚Åª¬π' (finset.filter (Œª z, z ‚â† (0 : H)) f.range),
    { refine simple_func.preimage_map_ne_zero_subset' g hg _,
      simp, },
    refine (measure_mono (set.subset.trans h_ss1 h_ss2)).trans_lt _,
    refine simple_func.measure_preimage_ne_zero_lt_top f hf _,
    simp, },
end

/-- Indicator of a set as an ` Œ± ‚Üí‚Çò[Œº] E`. -/
def indicator_const_ae [measurable_space Œ±] (Œº : measure Œ±) {s : set Œ±} (hs : measurable_set s)
  (c : H) :
  Œ± ‚Üí‚Çò[Œº] H :=
ae_eq_fun.mk (s.indicator (Œª x, c)) ((ae_measurable_indicator_iff hs).mp ae_measurable_const)

lemma measurable_indicator_const_ae [measurable_space Œ±] {s : set Œ±} (hs : measurable_set s)
  {c : H} :
  measurable (s.indicator (Œª _, c)) :=
measurable_const.indicator hs

lemma ae_measurable_indicator_const_ae [measurable_space Œ±] (Œº : measure Œ±) {s : set Œ±}
  (hs : measurable_set s) {c : H} :
  ae_measurable (s.indicator (Œª _, c)) Œº :=
(ae_measurable_indicator_iff hs).mp ae_measurable_const

lemma indicator_const_ae_coe [measurable_space Œ±] {Œº : measure Œ±} {s : set Œ±}
  {hs : measurable_set s} {c : H} :
  ‚áë(indicator_const_ae Œº hs c) =·µê[Œº] s.indicator (Œª _, c) :=
ae_eq_fun.coe_fn_mk (s.indicator (Œª _, c)) (ae_measurable_indicator_const_ae Œº hs)

lemma indicator_const_comp {Œ¥} [has_zero Œ≥] [has_zero Œ¥] {s : set Œ±} (c : Œ≥) (f : Œ≥ ‚Üí Œ¥)
  (hf : f 0 = 0) :
  (Œª x, f (s.indicator (Œª x, c) x)) = s.indicator (Œª x, f c) :=
(set.indicator_comp_of_zero hf).symm

lemma snorm_ess_sup_indicator_le [normed_group Œ≥] [measurable_space Œ±] {Œº : measure Œ±}
  (s : set Œ±) (f : Œ± ‚Üí Œ≥) :
  snorm_ess_sup (s.indicator f) Œº ‚â§ snorm_ess_sup f Œº :=
begin
  refine ess_sup_mono_ae (eventually_of_forall (Œª x, _)),
  rw [ennreal.coe_le_coe, nnnorm_indicator_eq_indicator_nnnorm],
  exact set.indicator_le_self s _ x,
end

lemma snorm_ess_sup_indicator_const_le [normed_group Œ≥] [measurable_space Œ±] {Œº : measure Œ±}
  (s : set Œ±) (c : Œ≥) :
  snorm_ess_sup (s.indicator (Œª x : Œ± , c)) Œº ‚â§ (nnnorm c : ‚Ñù‚â•0‚àû) :=
begin
  refine (snorm_ess_sup_indicator_le s (Œª x, c)).trans _,
  by_cases hŒº0 : Œº = 0,
  { simp [hŒº0], },
  rw snorm_ess_sup_const c hŒº0,
  exact le_rfl,
end

lemma snorm_ess_sup_indicator_const_eq [normed_group Œ≥] [measurable_space Œ±] {Œº : measure Œ±}
  (s : set Œ±) (c : Œ≥) (hŒºs : 0 < Œº s) :
  snorm_ess_sup (s.indicator (Œª x : Œ± , c)) Œº = (nnnorm c : ‚Ñù‚â•0‚àû) :=
begin
  refine le_antisymm (snorm_ess_sup_indicator_const_le s c) _,
  rw snorm_ess_sup,
  by_contra h,
  push_neg at h,
  rw lt_iff_not_ge' at hŒºs,
  refine hŒºs (le_of_eq _),
  have hs_ss : s ‚äÜ {x | (nnnorm c : ‚Ñù‚â•0‚àû) ‚â§ (nnnorm (s.indicator (Œª x : Œ± , c) x) : ‚Ñù‚â•0‚àû)},
  { intros x hx_mem,
    simp [hx_mem], },
  refine measure_mono_null hs_ss _,
  have h' := ae_iff.mp (ae_lt_of_ess_sup_lt h),
  push_neg at h',
  exact h',
end

lemma snorm_indicator_const [normed_group Œ≥] [measurable_space Œ±] {Œº : measure Œ±} {s : set Œ±}
  {c : Œ≥} (hs : measurable_set s) (hp : 0 < p) (hp_top : p ‚â† ‚àû) :
  snorm (s.indicator (Œª x, c)) p Œº = (nnnorm c) * (Œº s) ^ (1 / p.to_real) :=
begin
  have hp_pos : 0 < p.to_real, from ennreal.to_real_pos_iff.mpr ‚ü®hp, hp_top‚ü©,
  rw snorm_eq_snorm' hp.ne.symm hp_top,
  rw snorm',
  simp_rw [nnnorm_indicator_eq_indicator_nnnorm, ennreal.coe_indicator],
  have h_indicator_pow : (Œª a : Œ±, s.indicator (Œª (x : Œ±), (nnnorm c : ‚Ñù‚â•0‚àû)) a ^ p.to_real)
    = s.indicator (Œª (x : Œ±), ‚Üë(nnnorm c) ^ p.to_real),
  { rw indicator_const_comp (nnnorm c : ‚Ñù‚â•0‚àû) (Œª x, x ^ p.to_real) _, simp [hp_pos], },
  rw [h_indicator_pow, lintegral_indicator _ hs, set_lintegral_const, ennreal.mul_rpow_of_nonneg],
  swap, { simp [hp_pos.le], },
  rw [‚Üê ennreal.rpow_mul, mul_one_div_cancel hp_pos.ne.symm, ennreal.rpow_one],
end

lemma snorm_indicator_const' [normed_group Œ≥] [measurable_space Œ±] {Œº : measure Œ±} {s : set Œ±}
  {c : Œ≥} (hs : measurable_set s) (hŒºs : 0 < Œº s) (hp : 0 < p) :
  snorm (s.indicator (Œª x, c)) p Œº = (nnnorm c) * (Œº s) ^ (1 / p.to_real) :=
begin
  by_cases hp_top : p = ‚àû,
  { simp [hp_top, snorm_ess_sup_indicator_const_eq s c hŒºs], },
  exact snorm_indicator_const hs hp hp_top,
end

lemma mem_‚Ñíp_indicator_const (p : ‚Ñù‚â•0‚àû) [measurable_space Œ±] {Œº : measure Œ±} {s : set Œ±}
  (hs : measurable_set s) (c : H) (hŒºsc : c = 0 ‚à® Œº s < ‚àû) :
  mem_‚Ñíp (s.indicator (Œª x : Œ± , c)) p Œº :=
begin
  cases hŒºsc with hc hŒºs,
  { simp only [hc, set.indicator_zero],
    refine ‚ü®ae_measurable_const, _‚ü©,
    by_cases hp0 : p = 0,
    { simp [hp0], },
    by_cases hŒº0 : Œº = 0,
    { simp [hŒº0], },
    rw snorm_const _ hp0 hŒº0,
    simp, },
  refine ‚ü®(ae_measurable_indicator_iff hs).mp ae_measurable_const, _‚ü©,
  by_cases hp0 : p = 0,
  { simp [hp0], },
  rw ‚Üê ne.def at hp0,
  by_cases hp_top : p = ‚àû,
  { rw [hp_top, snorm_exponent_top],
    exact (snorm_ess_sup_indicator_const_le s c).trans_lt ennreal.coe_lt_top, },
  have hp_pos : 0 < p.to_real,
    from ennreal.to_real_pos_iff.mpr ‚ü®lt_of_le_of_ne (zero_le _) hp0.symm, hp_top‚ü©,
  rw snorm_eq_snorm' hp0 hp_top,
  simp_rw snorm',
  refine ennreal.rpow_lt_top_of_nonneg _ _,
  { simp only [hp_pos.le, one_div, inv_nonneg], },
  simp_rw [nnnorm_indicator_eq_indicator_nnnorm, ennreal.coe_indicator],
  have h_indicator_pow : (Œª a : Œ±, s.indicator (Œª (x : Œ±), (nnnorm c : ‚Ñù‚â•0‚àû)) a ^ p.to_real)
    = s.indicator (Œª (x : Œ±), ‚Üë(nnnorm c) ^ p.to_real),
  { rw indicator_const_comp (nnnorm c : ‚Ñù‚â•0‚àû) (Œª x, x ^ p.to_real) _, simp [hp_pos], },
  rw [h_indicator_pow, lintegral_indicator _ hs],
  simp [hp_pos, hŒºs.ne, not_le.mpr hp_pos, not_lt.mpr hp_pos.le],
end

lemma mem_‚Ñíp_indicator_const_ae [measurable_space Œ±] {Œº : measure Œ±} {s : set Œ±}
  (hs : measurable_set s) (c : H) (hŒºsc : c = 0 ‚à® Œº s < ‚àû) :
  mem_‚Ñíp (indicator_const_ae Œº hs c) p Œº :=
by { rw mem_‚Ñíp_congr_ae indicator_const_ae_coe, exact mem_‚Ñíp_indicator_const p hs c hŒºsc }

section indicator_Lp
variables [measurable_space Œ±] {Œº : measure Œ±} {s : set Œ±} {hs : measurable_set s}
  {c : G} {hŒºsc : c = 0 ‚à® Œº s < ‚àû}

/-- Indicator of a set as an element of `Lp`. -/
def indicator_Lp (p : ‚Ñù‚â•0‚àû) (hs : measurable_set s) (c : G) (hŒºsc : c = 0 ‚à® Œº s < ‚àû) : Lp G p Œº :=
mem_‚Ñíp.to_Lp (indicator_const_ae Œº hs c) (mem_‚Ñíp_indicator_const_ae hs c hŒºsc)

lemma indicator_Lp_coe : ‚áë(indicator_Lp p hs c hŒºsc) =·µê[Œº] indicator_const_ae Œº hs c :=
mem_‚Ñíp.coe_fn_to_Lp (mem_‚Ñíp_indicator_const_ae hs c hŒºsc)

lemma indicator_Lp_coe_fn (p : ‚Ñù‚â•0‚àû) (hs : measurable_set s) (c : G) (hŒºsc : c = 0 ‚à® Œº s < ‚àû) :
  ‚áë(indicator_Lp p hs c hŒºsc) =·µê[Œº] s.indicator (Œª _, c) :=
indicator_Lp_coe.trans indicator_const_ae_coe

lemma indicator_Lp_coe_fn_mem : ‚àÄ·µê (x : Œ±) ‚àÇŒº, x ‚àà s ‚Üí (indicator_Lp p hs c hŒºsc x) = c :=
(indicator_Lp_coe_fn p hs c hŒºsc).mono (Œª x hx hxs, hx.trans (set.indicator_of_mem hxs _))

lemma indicator_Lp_coe_fn_nmem : ‚àÄ·µê (x : Œ±) ‚àÇŒº, x ‚àâ s ‚Üí (indicator_Lp p hs c hŒºsc x) = 0 :=
(indicator_Lp_coe_fn p hs c hŒºsc).mono (Œª x hx hxs, hx.trans (set.indicator_of_not_mem hxs _))

lemma norm_indicator_Lp (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) :
  ‚à•indicator_Lp p hs c hŒºsc‚à• = ‚à•c‚à• * (Œº s).to_real ^ (1 / p.to_real) :=
begin
  rw [norm_def, snorm_congr_ae (indicator_Lp_coe_fn p hs c hŒºsc),
    snorm_indicator_const hs hp_pos hp_ne_top, ennreal.to_real_mul, ennreal.to_real_rpow],
  congr,
end

lemma norm_indicator_Lp_top (hŒºs_pos : 0 < Œº s) : ‚à•indicator_Lp ‚àû hs c hŒºsc‚à• = ‚à•c‚à• :=
begin
  rw [norm_def, snorm_congr_ae (indicator_Lp_coe_fn ‚àû hs c hŒºsc),
    snorm_indicator_const' hs hŒºs_pos ennreal.coe_lt_top],
  simp only [div_zero, ennreal.rpow_zero, mul_one, ennreal.coe_to_real, ennreal.top_to_real,
    coe_nnnorm],
end

lemma norm_indicator_Lp' (hp_pos : 0 < p) (hŒºs_pos : 0 < Œº s) :
  ‚à•indicator_Lp p hs c hŒºsc‚à• = ‚à•c‚à• * (Œº s).to_real ^ (1 / p.to_real) :=
begin
  by_cases hp_top : p = ‚àû,
  { simp only [hp_top, div_zero, mul_one, ennreal.top_to_real, real.rpow_zero],
    rw hp_top,
    exact norm_indicator_Lp_top hŒºs_pos, },
  { exact norm_indicator_Lp hp_pos hp_top, },
end

end indicator_Lp



lemma measure_finite_of_integrable_on_ae [measurable_space Œ±] {Œº : measure Œ±} {f : Œ± ‚Üí H}
  {s : set Œ±} (hfs : integrable_on f s Œº)
  (hs : measurable_set s) (C : ‚Ñù‚â•0‚àû) (hC : 0 < C) (hfC : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí C ‚â§ nnnorm (f x)) :
  Œº s < ‚àû :=
begin
  rw [integrable_on, integrable, has_finite_integral] at hfs,
    have hf_int_s := hfs.2,
  have hbs_int : ‚à´‚Åª x in s, C ‚àÇŒº ‚â§ ‚à´‚Åª x in s, (nnnorm (f x)) ‚àÇŒº,
  { refine lintegral_mono_ae _,
    rw ae_restrict_iff' hs,
    exact hfC, },
  rw lintegral_const at hbs_int,
  rw measure.restrict_apply_univ at hbs_int,
  have h_mul_lt_top : C * Œº s < ‚àû, from hbs_int.trans_lt hf_int_s,
  rw ennreal.mul_lt_top_iff at h_mul_lt_top,
  cases h_mul_lt_top with h h,
  { exact h.2, },
  cases h with h h,
  { exact absurd h hC.ne.symm, },
  { rw h, exact ennreal.coe_lt_top, },
end

lemma measure_finite_of_integrable_on [measurable_space Œ±] {Œº : measure Œ±} {f : Œ± ‚Üí H} {s : set Œ±}
  (hfs : integrable_on f s Œº)
  (hs : measurable_set s) (C : ‚Ñù‚â•0‚àû) (hC : 0 < C) (hfC : ‚àÄ x ‚àà s, C ‚â§ nnnorm (f x)) :
  Œº s < ‚àû :=
measure_finite_of_integrable_on_ae hfs hs C hC (eventually_of_forall hfC)

lemma finite_fiber_of_integrable [measurable_space Œ±] {Œº : measure Œ±}
  (f : Œ± ‚Üí G) (hf : integrable f Œº) (y : G) (hy0 : y ‚â† 0) (hfy : measurable_set (f ‚Åª¬π' {y})) :
  Œº (f ‚Åª¬π' {y}) < ‚àû :=
begin
  refine measure_finite_of_integrable_on hf.integrable_on hfy (nnnorm y : ‚Ñù‚â•0‚àû) _ _,
  { rwa [‚Üê of_real_norm_eq_coe_nnnorm, ennreal.of_real_pos, norm_pos_iff], },
  { intros x hxy,
    rw [set.mem_preimage, set.mem_singleton_iff] at hxy,
    rw hxy,
    exact le_rfl, },
end

lemma simple_func.finite_fiber [measurable_space Œ±] {Œº : measure Œ±}
  (f : simple_func Œ± G) (hf : integrable f Œº) (y : G) (hy0 : y ‚â† 0) :
  Œº (f ‚Åª¬π' {y}) < ‚àû :=
finite_fiber_of_integrable f hf y hy0 (simple_func.measurable_set_fiber _ y)

lemma simple_func.zero_or_finite_fiber [measurable_space Œ±] (Œº : measure Œ±)
  (f : simple_func Œ± G) (hf : integrable f Œº) (y : G) :
  y = 0 ‚à® Œº (f ‚Åª¬π' {y}) < ‚àû :=
begin
  by_cases hy : y = 0,
  { exact or.inl hy, },
  { exact or.inr (simple_func.finite_fiber f hf y hy), },
end



protected lemma L1.integrable [measurable_space Œ±] {Œº : measure Œ±} (f : Œ± ‚Üí‚ÇÅ[Œº] G) :
  integrable f Œº :=
by { rw ‚Üê mem_‚Ñíp_one_iff_integrable, exact Lp.mem_‚Ñíp _, }

lemma integrable.smul_const [measurable_space Œ±] {Œº : measure Œ±} {f : Œ± ‚Üí ‚Ñù} (hf : integrable f Œº)
  (c : H) [borel_space H] [normed_space ‚Ñù H] :
  integrable (Œª x, f x ‚Ä¢ c) Œº :=
begin
  by_cases hc0 : c = 0,
  { simp [hc0], },
  rwa integrable_smul_const hc0,
  { exact real.complete_space, },
  { exact real.borel_space, },
end

lemma integrable_on.smul_const [measurable_space Œ±] {Œº : measure Œ±} {f : Œ± ‚Üí ‚Ñù} {s : set Œ±}
  (hf : integrable_on f s Œº) (hs : measurable_set s) (c : H) [borel_space H] [normed_space ‚Ñù H] :
  integrable (s.indicator (Œª x, f x ‚Ä¢ c)) Œº :=
begin
  by_cases hc0 : c = 0,
  { simp [hc0], },
  rw integrable_indicator_iff hs,
  rw integrable_on,
  rwa integrable_smul_const hc0,
  { exact real.complete_space, },
  { exact real.borel_space, },
end


lemma ae_all_finset {Œπ} [measurable_space Œ±] {Œº : measure Œ±} (p : Œπ ‚Üí Œ± ‚Üí Prop) (s : finset Œπ) :
  (‚àÄ·µê x ‚àÇŒº, ‚àÄ i ‚àà s, p i x) ‚Üî ‚àÄ i ‚àà s, ‚àÄ·µê x ‚àÇŒº, p i x :=
begin
  refine ‚ü®Œª h i hi, h.mono (Œª x hx, hx i hi), _‚ü©,
  haveI : decidable_eq Œπ := classical.dec_eq Œπ,
  refine finset.induction _ _ s,
  { simp only [eventually_true, finset.not_mem_empty, forall_false_left, implies_true_iff], },
  intros i s his hs h_insert,
  have h : ‚àÄ (i : Œπ), i ‚àà s ‚Üí (‚àÄ·µê (x : Œ±) ‚àÇŒº, p i x),
    from Œª j hj, h_insert j (finset.mem_insert_of_mem hj),
  specialize hs h,
  specialize h_insert i (finset.mem_insert_self i s),
  refine h_insert.mp (hs.mono (Œª x hx1 hx2, _)),
  intros j hj,
  rw finset.mem_insert at hj,
  cases hj with hji hjs,
  { rwa hji, },
  { exact hx1 j hjs, },
end

lemma eventually_eq.finset_sum {Œπ} [measurable_space Œ±] [add_comm_group Œ≥]
  {Œº : measure Œ±} (f g : Œπ ‚Üí Œ± ‚Üí Œ≥) (s : finset Œπ) (hf : ‚àÄ i ‚àà s, f i =·µê[Œº] g i) :
  ‚àë i in s, f i =·µê[Œº] ‚àë i in s, g i :=
begin
  simp_rw eventually_eq at hf,
  rw ‚Üê ae_all_finset _ s at hf,
  refine hf.mono (Œª x hx, _),
  rw [finset.sum_apply, finset.sum_apply],
  exact finset.sum_congr rfl hx,
end



lemma set.preimage_zero {Œ≥} [has_zero Œ≥] (s : set Œ≥) [decidable ((0 : Œ≥) ‚àà s)]:
  (0 : Œ± ‚Üí Œ≥) ‚Åª¬π' s = ite ((0 : Œ≥) ‚àà s) set.univ ‚àÖ :=
by { change (Œª x, (0 : Œ≥)) ‚Åª¬π' s = ite ((0 : Œ≥) ‚àà s) set.univ ‚àÖ,  rw set.preimage_const }

lemma set.indicator_const_preimage_self {Œ≥} [has_zero Œ≥] (s : set Œ±) (c : Œ≥) [decidable (c = 0)] :
  s.indicator (Œª (_x : Œ±), c) ‚Åª¬π' {c} = ite (c = 0) set.univ s :=
begin
  classical,
  rw set.indicator_preimage,
  simp_rw [set.preimage_const, set.preimage_zero, set.mem_singleton_iff, eq_self_iff_true, if_true],
  by_cases hc : c = 0,
  { simp_rw [hc, eq_self_iff_true, if_true],
    simp, },
  { rw ‚Üê ne.def at hc,
    simp_rw [hc, hc.symm, if_false],
    simp, },
end


end measure_theory
