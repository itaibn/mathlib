/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/
import analysis.normed_space.inner_product
import measure_theory.l2_space
import measure_theory.temp_simple_func

/-! # Conditional expectation

## Implementation notes

When several `measurable_space` structures are introduced, the "default" one is the last one.
For example, when writing `{m m0 : measurable_space Œ±} {Œº : measure Œ±}`, `Œº` is a measure with
respect to `m0`.

-/

noncomputable theory
open topological_space measure_theory measure_theory.Lp filter
open_locale nnreal ennreal topological_space big_operators measure_theory

local notation `to_simple_func` := L1.simple_func.to_simple_func
local notation `indicator_L1s` := L1.simple_func.indicator_L1s

/-- Like `ae_measurable`, but the `measurable_space` structures used for the measurability
statement and for the measure are different.

TODO: change the definition of ae_measurable to use ae_measurable' ? -/
def ae_measurable' {Œ± Œ≤} [measurable_space Œ≤] (m : measurable_space Œ±) {m0 : measurable_space Œ±}
  (f : Œ± ‚Üí Œ≤) (Œº : measure Œ±) :
  Prop :=
‚àÉ g : Œ± ‚Üí Œ≤, @measurable Œ± Œ≤ m _ g ‚àß f =·µê[Œº] g

lemma measurable.ae_measurable' {Œ± Œ≤} [measurable_space Œ≤] {m m0 : measurable_space Œ±} {f : Œ± ‚Üí Œ≤}
  {Œº : measure Œ±} (hf : @measurable Œ± Œ≤ m _ f) :
  ae_measurable' m f Œº :=
‚ü®f, hf, eventually_eq.rfl‚ü©

namespace ae_measurable'

variables {Œ± Œ≤ : Type*} [measurable_space Œ≤] {f : Œ± ‚Üí Œ≤}

lemma mono {m2 m m0 : measurable_space Œ±} (hm : m2 ‚â§ m)
  {Œº : measure Œ±} (hf : ae_measurable' m2 f Œº) :
  ae_measurable' m f Œº :=
by { obtain ‚ü®g, hg_meas, hfg‚ü© := hf, exact ‚ü®g, measurable.mono hg_meas hm le_rfl, hfg‚ü©, }

lemma ae_measurable {m m0 : measurable_space Œ±} (hm : m ‚â§ m0)
  {Œº : measure Œ±} (hf : ae_measurable' m f Œº) :
  ae_measurable f Œº :=
ae_measurable'.mono hm hf

lemma ae_measurable'_of_ae_measurable'_trim {m m0 m0' : measurable_space Œ±} (hm0 : m0 ‚â§ m0')
  {Œº : measure Œ±} (hf : ae_measurable' m f (Œº.trim hm0)) :
  ae_measurable' m f Œº :=
by { obtain ‚ü®g, hg_meas, hfg‚ü© := hf, exact ‚ü®g, hg_meas, ae_eq_of_ae_eq_trim hm0 hfg‚ü©, }

lemma congr_ae {m m0 : measurable_space Œ±} {Œº : measure Œ±}
  {f g : Œ± ‚Üí Œ≤} (hf : ae_measurable' m f Œº) (hfg : f =·µê[Œº] g) :
  ae_measurable' m g Œº :=
by { obtain ‚ü®f', hf'_meas, hff'‚ü© := hf, exact ‚ü®f', hf'_meas, hfg.symm.trans hff'‚ü©, }

lemma add [has_add Œ≤] [has_measurable_add‚ÇÇ Œ≤] {m m0 : measurable_space Œ±}
  {Œº : measure Œ±} {f g : Œ± ‚Üí Œ≤} (hf : ae_measurable' m f Œº) (hg : ae_measurable' m g Œº) :
  ae_measurable' m (f+g) Œº :=
begin
  rcases hf with ‚ü®f', h_f'_meas, hff'‚ü©,
  rcases hg with ‚ü®g', h_g'_meas, hgg'‚ü©,
  refine ‚ü®f' + g', @measurable.add Œ± m _ _ _ _ f' g' h_f'_meas h_g'_meas, _‚ü©,
  exact hff'.add hgg',
end

lemma sub [add_group Œ≤] [has_measurable_sub‚ÇÇ Œ≤] {m m0 : measurable_space Œ±}
  {Œº : measure Œ±} {f g : Œ± ‚Üí Œ≤} (hf : ae_measurable' m f Œº) (hg : ae_measurable' m g Œº) :
  ae_measurable' m (f - g) Œº :=
begin
  rcases hf with ‚ü®f', h_f'_meas, hff'‚ü©,
  rcases hg with ‚ü®g', h_g'_meas, hgg'‚ü©,
  refine ‚ü®f' - g', @measurable.sub Œ± m _ _ _ _ f' g' h_f'_meas h_g'_meas, _‚ü©,
  exact hff'.sub hgg',
end

lemma neg [has_neg Œ≤] [has_measurable_neg Œ≤] {m m0 : measurable_space Œ±}
  {Œº : measure Œ±} {f : Œ± ‚Üí Œ≤} (hf : ae_measurable' m f Œº) :
  ae_measurable' m (-f) Œº :=
begin
  rcases hf with ‚ü®f', h_f'_meas, hff'‚ü©,
  exact ‚ü®-f', @measurable.neg Œ± m _ _ _ _ f' h_f'_meas, hff'.neg‚ü©,
end

lemma smul‚ÇÇ {Œ¥} [has_scalar Œ¥ Œ≤] [measurable_space Œ¥] [has_measurable_smul‚ÇÇ Œ¥ Œ≤]
  {m m0 : measurable_space Œ±} {Œº : measure Œ±}
  {f : Œ± ‚Üí Œ¥} (hf : ae_measurable' m f Œº) {g : Œ± ‚Üí Œ≤} (hg : ae_measurable' m g Œº) :
  ae_measurable' m (Œª x, f x ‚Ä¢ (g x)) Œº :=
begin
  obtain ‚ü®f', hf_meas, hff'‚ü© := hf,
  obtain ‚ü®g', hg_meas, hgg'‚ü© := hg,
  refine ‚ü®Œª x, (f' x) ‚Ä¢ (g' x), _, eventually_eq.comp‚ÇÇ hff' (Œª x y, x ‚Ä¢ y) hgg'‚ü©,
  exact @measurable.smul _ m _ _ _ _ _ _ _ _ hf_meas hg_meas,
end

lemma const_smul {Œ¥} [has_scalar Œ¥ Œ≤] [measurable_space Œ¥] [has_measurable_smul Œ¥ Œ≤]
  {m m0 : measurable_space Œ±} {Œº : measure Œ±} (c : Œ¥) {f : Œ± ‚Üí Œ≤} (hf : ae_measurable' m f Œº) :
  ae_measurable' m (c ‚Ä¢ f) Œº :=
begin
  rcases hf with ‚ü®f', h_f'_meas, hff'‚ü©,
  refine ‚ü®c ‚Ä¢ f', @measurable.const_smul Œ± m _ _ _ _ _ _ f' h_f'_meas c, _‚ü©,
  exact eventually_eq.fun_comp hff' (Œª x, c ‚Ä¢ x),
end

lemma restrict {m m0 : measurable_space Œ±} {Œº : measure Œ±} (hf : ae_measurable' m f Œº) (s : set Œ±) :
  ae_measurable' m f (Œº.restrict s) :=
by { obtain ‚ü®g, hg_meas, hfg‚ü© := hf, exact ‚ü®g, hg_meas, ae_restrict_of_ae hfg‚ü©, }

lemma indicator [has_zero Œ≤] {m m0 : measurable_space Œ±} {Œº : measure Œ±} (hf : ae_measurable' m f Œº)
  {s : set Œ±} (hs : @measurable_set Œ± m s) :
  ae_measurable' m (s.indicator f) Œº :=
begin
  rcases hf with ‚ü®f', h_f'_meas, hff'‚ü©,
  refine ‚ü®s.indicator f', @measurable.indicator Œ± _ m _ _ s _ h_f'_meas hs, _‚ü©,
  refine hff'.mono (Œª x hx, _),
  rw [set.indicator_apply, set.indicator_apply, hx],
end

lemma const {m m0 : measurable_space Œ±} {Œº : measure Œ±} (c : Œ≤) : ae_measurable' m (Œª x : Œ±, c) Œº :=
(@measurable_const _ _ _ m c).ae_measurable'

lemma smul_const {Œ¥} [has_scalar Œ¥ Œ≤] [measurable_space Œ¥] [has_measurable_smul‚ÇÇ Œ¥ Œ≤]
  {m m0 : measurable_space Œ±} {Œº : measure Œ±} {f : Œ± ‚Üí Œ¥} (hf : ae_measurable' m f Œº) (c : Œ≤) :
  ae_measurable' m (Œª x, f x ‚Ä¢ c) Œº :=
ae_measurable'.smul‚ÇÇ hf (const c)

end ae_measurable'

namespace measure_theory

variables {Œ± Œ≤ Œ≥ E E' F F' G G' H ùïú ùïÇ : Type*} {p : ‚Ñù‚â•0‚àû}
  [is_R_or_C ùïú] -- ùïú for ‚Ñù or ‚ÑÇ
  [is_R_or_C ùïÇ] [measurable_space ùïÇ] -- ùïÇ for ‚Ñù or ‚ÑÇ, together with a measurable_space
  [measurable_space Œ≤] -- Œ≤ for a generic measurable space
  -- E for L2
  [inner_product_space ùïÇ E] [measurable_space E] [borel_space E] [second_countable_topology E]
  -- E' for integrals on E
  [inner_product_space ùïÇ E'] [measurable_space E'] [borel_space E'] [second_countable_topology E']
  [normed_space ‚Ñù E'] [complete_space E'] [is_scalar_tower ‚Ñù ùïÇ E']
  -- F for Lp submodule
  [normed_group F] [normed_space ùïÇ F] [measurable_space F] [borel_space F]
  [second_countable_topology F]
  -- F' for integrals on F
  [normed_group F'] [normed_space ùïÇ F'] [measurable_space F'] [borel_space F']
  [second_countable_topology F'] [normed_space ‚Ñù F'] [complete_space F']
  -- G for Lp add_subgroup
  [normed_group G] [measurable_space G] [borel_space G] [second_countable_topology G]
  -- G' for integrals on G
  [normed_group G'] [measurable_space G'] [borel_space G'] [second_countable_topology G']
  [normed_space ‚Ñù G'] [complete_space G']
  -- H for measurable space and normed group (hypotheses of mem_‚Ñíp)
  [measurable_space H] [normed_group H]

lemma ae_measurable.restrict [measurable_space Œ±] {f : Œ± ‚Üí Œ≤} {Œº : measure Œ±}
  (hf : ae_measurable f Œº) (s : set Œ±) :
  ae_measurable f (Œº.restrict s) :=
ae_measurable'.restrict hf s

lemma snorm_eq_lintegral_nnnorm [measurable_space Œ±] {Œº : measure Œ±} [normed_group Œ≥] {p : ‚Ñù‚â•0‚àû}
  {f : Œ± ‚Üí Œ≥} (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) :
  snorm f p Œº = (‚à´‚Åª x, (nnnorm (f x)) ^ p.to_real ‚àÇŒº) ^ (1 / p.to_real) :=
by rw [snorm_eq_snorm' hp_pos.ne.symm hp_ne_top, snorm']

lemma snorm_one_eq_lintegral_nnnorm [measurable_space Œ±] {Œº : measure Œ±} [normed_group Œ≥]
  {f : Œ± ‚Üí Œ≥} :
  snorm f 1 Œº = ‚à´‚Åª x, nnnorm (f x) ‚àÇŒº :=
by simp_rw [snorm_eq_lintegral_nnnorm ennreal.zero_lt_one ennreal.coe_ne_top, ennreal.one_to_real,
  one_div_one, ennreal.rpow_one]

notation Œ± ` ‚Üí‚ÇÇ[`:25 Œº `] ` E := measure_theory.Lp E 2 Œº

section Lp_sub

variables (ùïÇ F)
/-- Lp subspace of functions `f` verifying `ae_measurable' m f Œº`. -/
def Lp_sub [opens_measurable_space ùïÇ] (m : measurable_space Œ±) [measurable_space Œ±] (p : ‚Ñù‚â•0‚àû)
  (Œº : measure Œ±) :
  submodule ùïÇ (Lp F p Œº) :=
{ carrier   := {f : (Lp F p Œº) | ae_measurable' m f Œº} ,
  zero_mem' := ‚ü®(0 : Œ± ‚Üí F), @measurable_zero _ Œ± _ m _, Lp.coe_fn_zero _ _ _‚ü©,
  add_mem'  := Œª f g hf hg, (hf.add hg).congr_ae (Lp.coe_fn_add f g).symm,
  smul_mem' := Œª c f hf, (hf.const_smul c).congr_ae (Lp.coe_fn_smul c f).symm, }
variables {ùïÇ F}

variables [opens_measurable_space ùïÇ]

lemma mem_Lp_sub_iff_ae_measurable' {m m0 : measurable_space Œ±} {Œº : measure Œ±} {f : Lp F p Œº} :
  f ‚àà Lp_sub F ùïÇ m p Œº ‚Üî ae_measurable' m f Œº :=
by simp_rw [‚Üê set_like.mem_coe, ‚Üê submodule.mem_carrier, Lp_sub, set.mem_set_of_eq]

lemma Lp_sub.ae_measurable' {m m0 : measurable_space Œ±} {Œº : measure Œ±} (f : Lp_sub E ùïÇ m p Œº) :
  ae_measurable' m f Œº :=
mem_Lp_sub_iff_ae_measurable'.mp f.mem

lemma mem_Lp_sub_self {m0 : measurable_space Œ±} (Œº : measure Œ±) (f : Lp F p Œº) :
  f ‚àà Lp_sub F ùïÇ m0 p Œº :=
mem_Lp_sub_iff_ae_measurable'.mpr (Lp.ae_measurable f)

lemma Lp_sub_coe {m m0 : measurable_space Œ±} {p : ‚Ñù‚â•0‚àû} {Œº : measure Œ±} {f : Lp_sub F ùïÇ m p Œº} :
  ‚áëf = (f : Lp F p Œº) :=
coe_fn_coe_base f

lemma mem_Lp_sub_indicator_Lp {m m0 : measurable_space Œ±} (hm : m ‚â§ m0)
  {Œº : measure Œ±} {s : set Œ±} (hs : @measurable_set Œ± m s) {c : F} {hŒºsc : c = 0 ‚à® Œº s < ‚àû} :
  indicator_Lp p (hm s hs) c hŒºsc ‚àà Lp_sub F ùïÇ m p Œº :=
‚ü®s.indicator (Œª x : Œ±, c),
  @measurable.indicator Œ± _ m _ _ s (Œª x, c) (@measurable_const _ Œ± _ m _) hs,
  indicator_Lp_coe_fn p (hm s hs) c hŒºsc‚ü©

section complete_subspace

variables {Œπ : Type*} {m m0 : measurable_space Œ±} {Œº : measure Œ±}

lemma mem_Lp_trim_of_mem_Lp_sub (hm : m ‚â§ m0) (f : Lp F p Œº) (hf_meas : f ‚àà Lp_sub F ùïÇ m p Œº) :
  @mem_‚Ñíp Œ± F m _ _ (mem_Lp_sub_iff_ae_measurable'.mp hf_meas).some p (Œº.trim hm) :=
begin
  have hf : ae_measurable' m f Œº, from (mem_Lp_sub_iff_ae_measurable'.mp hf_meas),
  let g := hf.some,
  obtain ‚ü®hg, hfg‚ü© := hf.some_spec,
  change @mem_‚Ñíp Œ± F m _ _ g p (Œº.trim hm),
  refine ‚ü®@measurable.ae_measurable _ _ m _ g (Œº.trim hm) hg, _‚ü©,
  have h_snorm_fg : @snorm Œ± _ m _ g p (Œº.trim hm) = snorm f p Œº,
    by { rw snorm_trim hm hg, exact snorm_congr_ae hfg.symm, },
  rw h_snorm_fg,
  exact Lp.snorm_lt_top f,
end

lemma mem_‚Ñíp_of_mem_‚Ñíp_trim (hm : m ‚â§ m0) {f : Œ± ‚Üí G} (hf : @mem_‚Ñíp Œ± G m _ _ f p (Œº.trim hm)) :
  mem_‚Ñíp f p Œº :=
begin
  refine ‚ü®ae_measurable_of_ae_measurable_trim hm hf.1, _‚ü©,
  have hf_snorm := hf.2,
  let g := @ae_measurable.mk _ _ m _ _ _ hf.1,
  have hg_meas : @measurable _ _ m _ g, from @ae_measurable.measurable_mk _ _ m _ _ _ hf.1,
  have hfg := @ae_measurable.ae_eq_mk _ _ m _ _ _ hf.1,
  rw @snorm_congr_ae _ _ m _ _ _ _ _ hfg at hf_snorm,
  rw snorm_congr_ae (ae_eq_of_ae_eq_trim hm hfg),
  rwa snorm_trim hm hg_meas at hf_snorm,
end

lemma mem_Lp_sub_to_Lp_of_trim (hm : m ‚â§ m0) (f : @Lp Œ± F m _ _ _ _ p (Œº.trim hm)) :
  (mem_‚Ñíp_of_mem_‚Ñíp_trim hm (@Lp.mem_‚Ñíp _ _ m _ _ _ _ _ _ f)).to_Lp f ‚àà Lp_sub F ùïÇ m p Œº :=
begin
  let hf_mem_‚Ñíp := mem_‚Ñíp_of_mem_‚Ñíp_trim hm (@Lp.mem_‚Ñíp _ _ m _ _ _ _ _ _ f),
  rw mem_Lp_sub_iff_ae_measurable',
  refine ae_measurable'.congr_ae _ (mem_‚Ñíp.coe_fn_to_Lp hf_mem_‚Ñíp).symm,
  refine ae_measurable'.ae_measurable'_of_ae_measurable'_trim hm _,
  exact (@Lp.ae_measurable _ _ m _ _ _ _ _ _ f),
end

variables (F ùïÇ p Œº)
def Lp_meas_to_Lp_trim (hm : m ‚â§ m0) (f : Lp_sub F ùïÇ m p Œº) : @Lp Œ± F m _ _ _ _ p (Œº.trim hm) :=
@mem_‚Ñíp.to_Lp _ _ m p (Œº.trim hm) _ _ _ _ (mem_Lp_sub_iff_ae_measurable'.mp f.mem).some
  (mem_Lp_trim_of_mem_Lp_sub hm f f.mem)

def Lp_trim_to_Lp_meas (hm : m ‚â§ m0) (f : @Lp Œ± F m _ _ _ _ p (Œº.trim hm)) :
  Lp_sub F ùïÇ m p Œº :=
‚ü®(mem_‚Ñíp_of_mem_‚Ñíp_trim hm (@Lp.mem_‚Ñíp _ _ m _ _ _ _ _ _ f)).to_Lp f,
  mem_Lp_sub_to_Lp_of_trim hm f‚ü©

variables {F ùïÇ p Œº}

lemma Lp_meas_to_Lp_trim_ae_eq (hm : m ‚â§ m0) (f : Lp_sub F ùïÇ m p Œº) :
  Lp_meas_to_Lp_trim F ùïÇ p Œº hm f =·µê[Œº] f :=
(ae_eq_of_ae_eq_trim hm
    (@mem_‚Ñíp.coe_fn_to_Lp _ _ m _ _ _ _ _ _ _ (mem_Lp_trim_of_mem_Lp_sub hm ‚Üëf f.mem))).trans
  (mem_Lp_sub_iff_ae_measurable'.mp f.mem).some_spec.2.symm

lemma Lp_trim_to_Lp_meas_ae_eq (hm : m ‚â§ m0) (f : @Lp Œ± F m _ _ _ _ p (Œº.trim hm)) :
  Lp_trim_to_Lp_meas F ùïÇ p Œº hm f =·µê[Œº] f :=
mem_‚Ñíp.coe_fn_to_Lp _

lemma Lp_meas_to_Lp_trim_right_inv (hm : m ‚â§ m0) :
  function.right_inverse (Lp_trim_to_Lp_meas F ùïÇ p Œº hm) (Lp_meas_to_Lp_trim F ùïÇ p Œº hm) :=
begin
  intro f,
  ext1,
  refine ae_eq_trim_of_measurable hm _ _ _,
  { exact @Lp.measurable _ _ m _ _ _ _ _ _ _, },
  { exact @Lp.measurable _ _ m _ _ _ _ _ _ _, },
  { exact (Lp_meas_to_Lp_trim_ae_eq hm _).trans (Lp_trim_to_Lp_meas_ae_eq hm _), },
end

lemma Lp_meas_to_Lp_trim_left_inv (hm : m ‚â§ m0) :
  function.left_inverse (Lp_trim_to_Lp_meas F ùïÇ p Œº hm) (Lp_meas_to_Lp_trim F ùïÇ p Œº hm) :=
begin
  intro f,
  ext1,
  ext1,
  rw ‚Üê Lp_sub_coe,
  exact (Lp_trim_to_Lp_meas_ae_eq hm _).trans (Lp_meas_to_Lp_trim_ae_eq hm _),
end

lemma Lp_meas_to_Lp_trim_add (hm : m ‚â§ m0) (f g : Lp_sub F ùïÇ m p Œº) :
  Lp_meas_to_Lp_trim F ùïÇ p Œº hm (f + g)
    = Lp_meas_to_Lp_trim F ùïÇ p Œº hm f + Lp_meas_to_Lp_trim F ùïÇ p Œº hm g :=
begin
  ext1,
  refine eventually_eq.trans _ (@Lp.coe_fn_add _ _ m _ _ _ _ _ _ _ _).symm,
  refine ae_eq_trim_of_measurable hm _ _ _,
  { exact @Lp.measurable _ _ m _ _ _ _ _ _ _, },
  { exact @measurable.add _ m _ _ _ _ _ _ (@Lp.measurable _ _ m _ _ _ _ _ _ _)
      (@Lp.measurable _ _ m _ _ _ _ _ _ _), },
  refine (Lp_meas_to_Lp_trim_ae_eq hm _).trans _,
  refine eventually_eq.trans _
    (eventually_eq.add (Lp_meas_to_Lp_trim_ae_eq hm f).symm (Lp_meas_to_Lp_trim_ae_eq hm g).symm),
  refine (Lp.coe_fn_add _ _).trans _,
  simp_rw Lp_sub_coe,
  refine eventually_of_forall (Œª x, _),
  refl,
end

lemma Lp_meas_to_Lp_trim_smul (hm : m ‚â§ m0) (c : ùïÇ) (f : Lp_sub F ùïÇ m p Œº) :
  Lp_meas_to_Lp_trim F ùïÇ p Œº hm (c ‚Ä¢ f) = c ‚Ä¢ Lp_meas_to_Lp_trim F ùïÇ p Œº hm f :=
begin
  ext1,
  refine eventually_eq.trans _ (@Lp.coe_fn_smul _ _ m _ _ _ _ _ _ _ _ _ _ _ _ _).symm,
  refine ae_eq_trim_of_measurable hm _ _ _,
  { exact @Lp.measurable _ _ m _ _ _ _ _ _ _, },
  { exact @measurable.const_smul _ m _ _ _ _ _ _ _ (@Lp.measurable _ _ m _ _ _ _ _ _ _) c, },
  refine (Lp_meas_to_Lp_trim_ae_eq hm _).trans _,
  refine (Lp.coe_fn_smul c _).trans _,
  refine (Lp_meas_to_Lp_trim_ae_eq hm f).mono (Œª x hx, _),
  rw [pi.smul_apply, pi.smul_apply, hx, Lp_sub_coe],
  refl,
end

lemma Lp_meas_to_Lp_trim_norm_map [hp : fact (1 ‚â§ p)] (hm : m ‚â§ m0) (f : Lp_sub F ùïÇ m p Œº) :
  ‚à•Lp_meas_to_Lp_trim F ùïÇ p Œº hm f‚à• = ‚à•f‚à• :=
begin
  rw [norm_def, snorm_trim hm (@Lp.measurable _ _ m _ _ _ _ _ _ _)],
  swap, { apply_instance, },
  rw [snorm_congr_ae (Lp_meas_to_Lp_trim_ae_eq hm _), Lp_sub_coe, ‚Üê norm_def],
  congr,
end

variables (F ùïÇ p Œº)
def Lp_meas_to_Lp_trim_lie [hp : fact (1 ‚â§ p)] (hm : m ‚â§ m0) :
  Lp_sub F ùïÇ m p Œº ‚âÉ‚Çó·µ¢[ùïÇ] @Lp Œ± F m _ _ _ _ p (Œº.trim hm) :=
{ to_fun    := Lp_meas_to_Lp_trim F ùïÇ p Œº hm,
  map_add'  := Lp_meas_to_Lp_trim_add hm,
  map_smul' := Lp_meas_to_Lp_trim_smul hm,
  inv_fun   := Lp_trim_to_Lp_meas F ùïÇ p Œº hm,
  left_inv  := Lp_meas_to_Lp_trim_left_inv hm,
  right_inv := Lp_meas_to_Lp_trim_right_inv hm,
  norm_map' := Lp_meas_to_Lp_trim_norm_map hm, }
variables {F ùïÇ p Œº}

lemma linear_isometry_equiv.range_eq_univ {R E F : Type*} [semiring R] [normed_group E]
  [normed_group F] [semimodule R E] [semimodule R F] (e : E ‚âÉ‚Çó·µ¢[R] F) :
  set.range e = set.univ :=
by { rw ‚Üê linear_isometry_equiv.coe_to_isometric, exact isometric.range_eq_univ _, }

instance [hm : fact (m ‚â§ m0)] [complete_space F] [hp : fact (1 ‚â§ p)] :
  complete_space (Lp_sub F ùïÇ m p Œº) :=
begin
  refine complete_space_of_is_complete_univ _,
  refine is_complete_of_complete_image
    (Lp_meas_to_Lp_trim_lie F ùïÇ p Œº hm.elim).isometry.uniform_embedding.to_uniform_inducing _,
  rw [set.image_univ, linear_isometry_equiv.range_eq_univ, ‚Üê complete_space_iff_is_complete_univ],
  apply_instance,
end

end complete_subspace

end Lp_sub

def integral_eq_on_fin_meas (m : measurable_space Œ±) [m0 : measurable_space Œ±] (f g : Œ± ‚Üí F')
  (Œº : measure Œ±) :
  Prop :=
‚àÄ s, @measurable_set Œ± m s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = ‚à´ x in s, g x ‚àÇŒº

namespace integral_eq_on_fin_meas

variables {m m0 : measurable_space Œ±} {Œº : measure Œ±} {f f‚ÇÅ f‚ÇÇ g g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F'}

protected lemma rfl : integral_eq_on_fin_meas m f f Œº := Œª s hs hŒºs, rfl

protected lemma refl (f : Œ± ‚Üí F') : integral_eq_on_fin_meas m f f Œº := integral_eq_on_fin_meas.rfl

protected lemma trans (hf1 : integral_eq_on_fin_meas m f f‚ÇÅ Œº)
  (hf2 : integral_eq_on_fin_meas m f‚ÇÅ f‚ÇÇ Œº) :
  integral_eq_on_fin_meas m f f‚ÇÇ Œº :=
Œª s hs hŒºs, (hf1 s hs hŒºs).trans (hf2 s hs hŒºs)

protected lemma symm (hfg : integral_eq_on_fin_meas m f g Œº) :
  integral_eq_on_fin_meas m g f Œº :=
Œª s hs hŒºs, (hfg s hs hŒºs).symm

lemma congr_ae_left' (hf12 : f‚ÇÅ =·µê[Œº] f‚ÇÇ) (hfg1 : integral_eq_on_fin_meas m f‚ÇÅ g Œº) :
  integral_eq_on_fin_meas m f‚ÇÇ g Œº :=
begin
  intros s hs hŒºs,
  rw integral_congr_ae (ae_restrict_of_ae hf12.symm),
  exact hfg1 s hs hŒºs,
end

lemma congr_ae_left (hf12 : f‚ÇÅ =·µê[Œº] f‚ÇÇ) :
  integral_eq_on_fin_meas m f‚ÇÅ g Œº ‚Üî integral_eq_on_fin_meas m f‚ÇÇ g Œº :=
‚ü®Œª h, congr_ae_left' hf12 h, Œª h, congr_ae_left' hf12.symm h‚ü©

lemma congr_ae_right' (hg12 : g‚ÇÅ =·µê[Œº] g‚ÇÇ) (hfg1 : integral_eq_on_fin_meas m f g‚ÇÅ Œº) :
  integral_eq_on_fin_meas m f g‚ÇÇ Œº :=
begin
  intros s hs hŒºs,
  rw integral_congr_ae (ae_restrict_of_ae hg12.symm),
  exact hfg1 s hs hŒºs,
end

lemma congr_ae_right (hg12 : g‚ÇÅ =·µê[Œº] g‚ÇÇ) :
  integral_eq_on_fin_meas m f g‚ÇÅ Œº ‚Üî integral_eq_on_fin_meas m f g‚ÇÇ Œº :=
‚ü®Œª h, congr_ae_right' hg12 h, Œª h, congr_ae_right' hg12.symm h‚ü©

lemma congr_ae' (hf12 : f‚ÇÅ =·µê[Œº] f‚ÇÇ) (hg12 : g‚ÇÅ =·µê[Œº] g‚ÇÇ)
  (hfg‚ÇÅ : integral_eq_on_fin_meas m f‚ÇÅ g‚ÇÅ Œº) :
  integral_eq_on_fin_meas m f‚ÇÇ g‚ÇÇ Œº :=
congr_ae_left' hf12 (congr_ae_right' hg12 hfg‚ÇÅ)

lemma congr_ae (hf12 : f‚ÇÅ =·µê[Œº] f‚ÇÇ) (hg12 : g‚ÇÅ =·µê[Œº] g‚ÇÇ) :
  integral_eq_on_fin_meas m f‚ÇÅ g‚ÇÅ Œº ‚Üî integral_eq_on_fin_meas m f‚ÇÇ g‚ÇÇ Œº :=
‚ü®Œª h, congr_ae' hf12 hg12 h, Œª h, congr_ae' hf12.symm hg12.symm h‚ü©

end integral_eq_on_fin_meas

section is_condexp

/-- `f` is a conditional expectation of `g` with respect to the measurable space structure `m`. -/
def is_condexp (m : measurable_space Œ±) [m0 : measurable_space Œ±] (f g : Œ± ‚Üí F') (Œº : measure Œ±) :
  Prop :=
ae_measurable' m f Œº ‚àß ‚àÄ s (hs : @measurable_set Œ± m s), ‚à´ a in s, f a ‚àÇŒº = ‚à´ a in s, g a ‚àÇŒº

variables {m‚ÇÇ m m0 : measurable_space Œ±} {Œº : measure Œ±} {f f‚ÇÅ f‚ÇÇ g g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F'}

lemma is_condexp.refl (hf : ae_measurable' m f Œº) : is_condexp m f f Œº := ‚ü®hf, Œª s hs, rfl‚ü©

lemma is_condexp.trans (hm2 : m‚ÇÇ ‚â§ m) (hff‚ÇÇ : is_condexp m‚ÇÇ f‚ÇÇ f Œº) (hfg : is_condexp m f g Œº) :
  is_condexp m‚ÇÇ f‚ÇÇ g Œº :=
‚ü®hff‚ÇÇ.1, Œª s hs, (hff‚ÇÇ.2 s hs).trans (hfg.2 s (hm2 s hs))‚ü©

lemma is_condexp_congr_ae_left' (hm : m ‚â§ m0) (hf12 : f‚ÇÅ =·µê[Œº] f‚ÇÇ) (hf‚ÇÅ : is_condexp m f‚ÇÅ g Œº) :
  is_condexp m f‚ÇÇ g Œº :=
begin
  rcases hf‚ÇÅ with ‚ü®‚ü®f, h_meas, h_eq‚ü©, h_int_eq‚ü©,
  refine ‚ü®‚ü®f, h_meas, hf12.symm.trans h_eq‚ü©, Œª s hs, _‚ü©,
  rw set_integral_congr_ae (hm s hs) (hf12.mono (Œª x hx hxs, hx.symm)),
  exact h_int_eq s hs,
end

lemma is_condexp_congr_ae_left (hm : m ‚â§ m0) (hf12 : f‚ÇÅ =·µê[Œº] f‚ÇÇ) :
  is_condexp m f‚ÇÅ g Œº ‚Üî is_condexp m f‚ÇÇ g Œº :=
‚ü®Œª h, is_condexp_congr_ae_left' hm hf12 h, Œª h, is_condexp_congr_ae_left' hm hf12.symm h‚ü©

lemma is_condexp_congr_ae_right' (hm : m ‚â§ m0) (hg12 : g‚ÇÅ =·µê[Œº] g‚ÇÇ) (hf‚ÇÅ : is_condexp m f g‚ÇÅ Œº) :
  is_condexp m f g‚ÇÇ Œº :=
begin
  rcases hf‚ÇÅ with ‚ü®h_meas, h_int_eq‚ü©,
  refine ‚ü®h_meas, Œª s hs, _‚ü©,
  rw set_integral_congr_ae (hm s hs) (hg12.mono (Œª x hx hxs, hx.symm)),
  exact h_int_eq s hs,
end

lemma is_condexp_congr_ae_right (hm : m ‚â§ m0) (hg12 : g‚ÇÅ =·µê[Œº] g‚ÇÇ) :
  is_condexp m f g‚ÇÅ Œº ‚Üî is_condexp m f g‚ÇÇ Œº :=
‚ü®Œª h, is_condexp_congr_ae_right' hm hg12 h, Œª h, is_condexp_congr_ae_right' hm hg12.symm h‚ü©

lemma is_condexp_congr_ae' (hm : m ‚â§ m0) (hf12 : f‚ÇÅ =·µê[Œº] f‚ÇÇ) (hg12 : g‚ÇÅ =·µê[Œº] g‚ÇÇ)
  (hfg‚ÇÅ : is_condexp m f‚ÇÅ g‚ÇÅ Œº) :
  is_condexp m f‚ÇÇ g‚ÇÇ Œº :=
is_condexp_congr_ae_left' hm hf12 (is_condexp_congr_ae_right' hm hg12 hfg‚ÇÅ)

lemma is_condexp_congr_ae (hm : m ‚â§ m0) (hf12 : f‚ÇÅ =·µê[Œº] f‚ÇÇ) (hg12 : g‚ÇÅ =·µê[Œº] g‚ÇÇ) :
  is_condexp m f‚ÇÅ g‚ÇÅ Œº ‚Üî is_condexp m f‚ÇÇ g‚ÇÇ Œº :=
‚ü®Œª h, is_condexp_congr_ae' hm hf12 hg12 h, Œª h, is_condexp_congr_ae' hm hf12.symm hg12.symm h‚ü©

lemma is_condexp.neg (hfg : is_condexp m f g Œº) :
  is_condexp m (-f) (-g) Œº :=
begin
  rcases hfg with ‚ü®h_meas, h_int_eq‚ü©,
  refine ‚ü®h_meas.neg, (Œª s hs, _)‚ü©,
  simp_rw pi.neg_apply,
  rw [integral_neg, integral_neg, h_int_eq s hs],
end

lemma is_condexp.add (hfg‚ÇÅ : is_condexp m f‚ÇÅ g‚ÇÅ Œº) (hfg‚ÇÇ : is_condexp m f‚ÇÇ g‚ÇÇ Œº)
  (hf‚ÇÅ : integrable f‚ÇÅ Œº) (hg‚ÇÅ : integrable g‚ÇÅ Œº) (hf‚ÇÇ : integrable f‚ÇÇ Œº) (hg‚ÇÇ : integrable g‚ÇÇ Œº) :
  is_condexp m (f‚ÇÅ + f‚ÇÇ) (g‚ÇÅ + g‚ÇÇ) Œº :=
begin
  rcases hfg‚ÇÅ with ‚ü®h_meas‚ÇÅ, h_int_eq‚ÇÅ‚ü©,
  rcases hfg‚ÇÇ with ‚ü®h_meas‚ÇÇ, h_int_eq‚ÇÇ‚ü©,
  refine ‚ü®h_meas‚ÇÅ.add h_meas‚ÇÇ, (Œª s hs, _)‚ü©,
  simp_rw pi.add_apply,
  rw [integral_add hf‚ÇÅ.integrable_on hf‚ÇÇ.integrable_on,
    integral_add hg‚ÇÅ.integrable_on hg‚ÇÇ.integrable_on, h_int_eq‚ÇÅ s hs, h_int_eq‚ÇÇ s hs],
end

lemma is_condexp_const_self (c : F') : is_condexp m (Œª x, c) (Œª x, c) Œº :=
‚ü®(@measurable_const _ _ _ m _).ae_measurable', Œª s hs, rfl‚ü©

lemma integrable.finset_sum {Œπ} {s : finset Œπ} (f : Œπ ‚Üí Œ± ‚Üí F')
  (hf_int : ‚àÄ i ‚àà s, integrable (f i) Œº) :
  integrable (‚àë i in s, f i) Œº :=
finset.sum_induction _ (Œª g : Œ± ‚Üí F', integrable g Œº) (Œª g‚ÇÅ g‚ÇÇ, integrable.add)
  (integrable_zero Œ± F' Œº) hf_int

lemma is_condexp.sum {Œπ} {s : finset Œπ} (f g : Œπ ‚Üí Œ± ‚Üí F') (hf_int : ‚àÄ i, integrable (f i) Œº)
  (hg_int : ‚àÄ i, integrable (g i) Œº) (hfg : ‚àÄ i ‚àà s, is_condexp m (f i) (g i) Œº) :
  is_condexp m (‚àë i in s, f i) (‚àë i in s, g i) Œº :=
begin
  revert hfg,
  haveI : decidable_eq Œπ := classical.dec_eq _,
  refine finset.induction _ _ s,
  { simp_rw finset.sum_empty,
    exact Œª _, is_condexp_const_self (0 : F'), },
  intros y s hys hs h_insert,
  specialize hs (Œª i hi, h_insert i (finset.mem_insert_of_mem hi)),
  simp_rw finset.sum_insert hys,
  refine is_condexp.add (h_insert y (finset.mem_insert_self y s)) hs (hf_int y) (hg_int y) _ _,
  { exact integrable.finset_sum f (Œª i _, hf_int i), },
  { exact integrable.finset_sum g (Œª i _, hg_int i), },
end

lemma is_condexp.sub (hfg‚ÇÅ : is_condexp m f‚ÇÅ g‚ÇÅ Œº) (hfg‚ÇÇ : is_condexp m f‚ÇÇ g‚ÇÇ Œº)
  (hf‚ÇÅ : integrable f‚ÇÅ Œº) (hg‚ÇÅ : integrable g‚ÇÅ Œº) (hf‚ÇÇ : integrable f‚ÇÇ Œº) (hg‚ÇÇ : integrable g‚ÇÇ Œº) :
  is_condexp m (f‚ÇÅ - f‚ÇÇ) (g‚ÇÅ - g‚ÇÇ) Œº :=
begin
  rcases hfg‚ÇÅ with ‚ü®h_meas‚ÇÅ, h_int_eq‚ÇÅ‚ü©,
  rcases hfg‚ÇÇ with ‚ü®h_meas‚ÇÇ, h_int_eq‚ÇÇ‚ü©,
  refine ‚ü®h_meas‚ÇÅ.sub h_meas‚ÇÇ, (Œª s hs, _)‚ü©,
  simp_rw pi.sub_apply,
  rw [integral_sub hf‚ÇÅ.integrable_on hf‚ÇÇ.integrable_on,
    integral_sub hg‚ÇÅ.integrable_on hg‚ÇÇ.integrable_on, h_int_eq‚ÇÅ s hs, h_int_eq‚ÇÇ s hs],
end

lemma is_condexp.indicator (hm : m ‚â§ m0) (hfg : is_condexp m f g Œº) {s : set Œ±}
  (hs : @measurable_set Œ± m s) :
  is_condexp m (s.indicator f) (s.indicator g) Œº :=
begin
  rcases hfg with ‚ü®h_meas, h_int_eq‚ü©,
  refine ‚ü®h_meas.indicator hs, (Œª t ht, _)‚ü©,
  specialize h_int_eq (s ‚à© t) (@measurable_set.inter Œ± m s t hs ht),
  rwa [integral_indicator (hm s hs), integral_indicator (hm s hs),
    measure.restrict_restrict (hm s hs)],
end

end is_condexp

section is_condexp_properties

variables {m m0 : measurable_space Œ±} {Œº : measure Œ±}

lemma is_condexp.integrable_on' (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hgf : is_condexp m g f Œº) (s : set Œ±)
  (hs : @measurable_set _ m s) (hfs : ‚à´ x in s, f x ‚àÇŒº ‚â† 0) :
  integrable_on g s Œº :=
by { by_contra h, refine hfs _, rw [(hgf.2 s hs).symm, ‚Üê integral_undef h], }

lemma is_condexp.integrable' (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hgf : is_condexp m g f Œº)
  (hfs : ‚à´ x, f x ‚àÇŒº ‚â† 0) :
  integrable g Œº :=
begin
  rw ‚Üê integrable_on_univ,
  rw ‚Üê integral_univ at hfs,
  exact hgf.integrable_on' hm set.univ (@measurable_set.univ _ m) hfs,
end

lemma is_condexp.integrable_on_of_nonneg (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hgf : is_condexp m g f Œº)
  {s : set Œ±} (hs : @measurable_set _ m s) (hf_nonneg : 0 ‚â§·µê[Œº.restrict s] f)
  (hf_int : integrable_on f s Œº) (hfg_zero : f =·µê[Œº.restrict s] 0 ‚Üí g =·µê[Œº.restrict s] 0) :
  integrable_on g s Œº :=
begin
  have h_int_pos := integral_pos_iff_support_of_nonneg_ae hf_nonneg hf_int,
  by_cases h_support : 0 < Œº.restrict s (function.support f),
  { refine hgf.integrable_on' hm s hs (ne_of_gt _),
    rwa [h_int_pos], },
  { have hf_zero : f =·µê[Œº.restrict s] 0,
    { rw ‚Üê integral_eq_zero_iff_of_nonneg_ae hf_nonneg hf_int,
      refine le_antisymm _ (integral_nonneg_of_ae hf_nonneg),
      rw [‚Üê @not_not (‚à´ x in s, f x ‚àÇŒº ‚â§ 0), not_le],
      exact Œª h, h_support (h_int_pos.mp h), },
    exact (integrable_congr (hfg_zero hf_zero)).mpr (integrable_zero _ _ _), },
end

lemma is_condexp.integrable_of_nonneg (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hgf : is_condexp m g f Œº)
  (hf_nonneg : 0 ‚â§·µê[Œº] f) (hf_int : integrable f Œº) (hfg_zero : f =·µê[Œº] 0 ‚Üí g =·µê[Œº] 0) :
  integrable g Œº :=
begin
  rw ‚Üê integrable_on_univ at hf_int ‚ä¢,
  refine hgf.integrable_on_of_nonneg hm (@measurable_set.univ _ m) _ hf_int _,
  { simpa using hf_nonneg, },
  { simpa using hfg_zero, },
end

lemma is_condexp.integrable_of_nonpos (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hgf : is_condexp m g f Œº)
  (hf_nonpos : f ‚â§·µê[Œº] 0) (hf_int : integrable f Œº) (hfg_zero : f =·µê[Œº] 0 ‚Üí g =·µê[Œº] 0) :
  integrable g Œº :=
begin
  refine integrable_neg_iff.mp _,
  have hf_neg_nonneg : 0 ‚â§·µê[Œº] -f, sorry,
  have hf_neg_int : integrable (-f) Œº, from integrable_neg_iff.mpr hf_int,
  have hf_neg_zero : -f =·µê[Œº] 0 ‚Üí -g =·µê[Œº] 0, sorry,
  have hgf_neg : is_condexp m (-g) (-f) Œº, from hgf.neg,
  exact hgf_neg.integrable_of_nonneg hm hf_neg_nonneg hf_neg_int hf_neg_zero,
end

lemma nonneg_of_integral_eq (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hf : 0 ‚â§·µê[Œº] f) (hf_int : integrable f Œº)
  (hgf : integral_eq_on_fin_meas m g f Œº) (hg : @measurable _ _ m _ g) :
  0 ‚â§·µê[Œº] g :=
begin
  have hg_int : integrable g Œº, sorry,
  have h_int_m : @integrable Œ± _ m _ _ g (Œº.trim hm),
    from integrable_trim_of_measurable hm hg hg_int,
  refine ae_eq_null_of_trim hm _,
  refine @ae_nonneg_of_forall_set_‚Ñù Œ± m (Œº.trim hm) g h_int_m (Œª s hs hŒºs, _),
  rw ‚Üê set_integral_trim hm g hg hg_int hs,
  rw hgf s hs ((le_trim hm).trans_lt hŒºs),
  exact integral_nonneg_of_ae (ae_restrict_of_ae hf),
end

lemma is_condexp.nonneg (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hf : 0 ‚â§·µê[Œº] f) (hgf : is_condexp m g f Œº)
  (hg : integrable g Œº) :
  0 ‚â§·µê[Œº] g :=
begin
  obtain ‚ü®‚ü®f', h_meas, hff'‚ü©, h_int_eq‚ü© := hgf,
  have h_int' : integrable f' Œº := (integrable_congr hff').mp hg,
  have h_int'_m : @integrable Œ± _ m _ _ f' (Œº.trim hm),
    from integrable_trim_of_measurable hm h_meas h_int',
  refine eventually_le.trans (ae_eq_null_of_trim hm _) hff'.symm.le,
  refine @ae_nonneg_of_forall_set_‚Ñù Œ± m (Œº.trim hm) f' h_int'_m (Œª s hs hŒºs, _),
  rw ‚Üê set_integral_trim hm f' h_meas h_int' hs,
  specialize h_int_eq s hs,
  rw set_integral_congr_ae (hm s hs) (hff'.mono (Œª x hx _, hx)) at h_int_eq,
  rw h_int_eq,
  exact integral_nonneg_of_ae (ae_restrict_of_ae hf),
end

lemma is_condexp.nonpos (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hf : f ‚â§·µê[Œº] 0) (hgf : is_condexp m g f Œº)
  (hg : integrable g Œº) :
  g ‚â§·µê[Œº] 0 :=
begin
  have hf_neg : 0 ‚â§·µê[Œº] (-f),
  { refine (hf.mono (Œª x hx, _)),
    rw [pi.zero_apply, ‚Üê neg_zero] at hx,
    rwa [pi.neg_apply, pi.zero_apply, le_neg], },
  have h_neg := is_condexp.nonneg hm hf_neg (is_condexp.neg hgf) hg.neg,
  refine h_neg.mono (Œª x hx, _),
  rw [pi.neg_apply, pi.zero_apply, ‚Üê neg_zero] at hx,
  exact le_of_neg_le_neg hx,
end

lemma is_condexp.mono (hm : m ‚â§ m0) {f g fc gc : Œ± ‚Üí ‚Ñù} (hfg : f ‚â§·µê[Œº] g)
  (hf : is_condexp m fc f Œº) (hfc_int : integrable fc Œº) (hf_int : integrable f Œº)
  (hg : is_condexp m gc g Œº) (hgc_int : integrable gc Œº) (hg_int : integrable g Œº) :
  fc ‚â§·µê[Œº] gc :=
begin
  suffices h_sub : (fc-gc) ‚â§·µê[Œº] 0,
    from (h_sub.mono (Œª x hx, by rwa [pi.sub_apply, pi.zero_apply, sub_nonpos] at hx)),
  have h_sub_fg : f - g ‚â§·µê[Œº] 0,
    from hfg.mono (Œª x hx, by rwa [pi.sub_apply, pi.zero_apply, sub_nonpos]),
  have h_sub_condexp : is_condexp m (fc - gc) (f-g) Œº,
    from is_condexp.sub hf hg hfc_int hf_int hgc_int hg_int,
  exact is_condexp.nonpos hm h_sub_fg h_sub_condexp (hfc_int.sub hgc_int),
end

variables (ùïÇ)
lemma is_condexp.unique (hm : m ‚â§ m0) [borel_space ùïÇ] {f‚ÇÅ f‚ÇÇ g : Œ± ‚Üí E'} (hf‚ÇÅ : is_condexp m f‚ÇÅ g Œº)
  (h_int‚ÇÅ : integrable f‚ÇÅ Œº) (hf‚ÇÇ : is_condexp m f‚ÇÇ g Œº) (h_int‚ÇÇ : integrable f‚ÇÇ Œº):
  f‚ÇÅ =·µê[Œº] f‚ÇÇ :=
begin
  rcases hf‚ÇÅ with ‚ü®‚ü®f‚ÇÅ', h_meas‚ÇÅ, hff'‚ÇÅ‚ü©, h_int_eq‚ÇÅ‚ü©,
  rcases hf‚ÇÇ with ‚ü®‚ü®f‚ÇÇ', h_meas‚ÇÇ, hff'‚ÇÇ‚ü©, h_int_eq‚ÇÇ‚ü©,
  refine hff'‚ÇÅ.trans (eventually_eq.trans _ hff'‚ÇÇ.symm),
  have h : ‚àÄ s : set Œ±, @measurable_set Œ± m s ‚Üí ‚à´ x in s, f‚ÇÅ' x ‚àÇŒº = ‚à´ x in s, f‚ÇÇ' x ‚àÇŒº,
  { intros s hsm,
    have h‚ÇÅ : ‚à´ x in s, f‚ÇÅ' x ‚àÇŒº = ‚à´ x in s, g x ‚àÇŒº,
    { rw ‚Üê h_int_eq‚ÇÅ s hsm,
      exact set_integral_congr_ae (hm s hsm) (hff'‚ÇÅ.mono (Œª x hx hxs, hx.symm)), },
    rw [h‚ÇÅ, ‚Üê h_int_eq‚ÇÇ s hsm],
    exact set_integral_congr_ae (hm s hsm) (hff'‚ÇÇ.mono (Œª x hx hxs, hx)), },
  refine ae_eq_of_ae_eq_trim hm _,
  have h_int‚ÇÅ' : integrable f‚ÇÅ' Œº, from (integrable_congr hff'‚ÇÅ).mp h_int‚ÇÅ,
  have h_int‚ÇÇ' : integrable f‚ÇÇ' Œº, from (integrable_congr hff'‚ÇÇ).mp h_int‚ÇÇ,
  refine @ae_eq_of_forall_set_integral_eq Œ± E' ùïÇ _ _ _ _ _ _ _ _ _ m _ _ _ _ _ _ _,
  { exact integrable_trim_of_measurable hm h_meas‚ÇÅ h_int‚ÇÅ', },
  { exact integrable_trim_of_measurable hm h_meas‚ÇÇ h_int‚ÇÇ', },
  { intros s hs,
    specialize h s hs,
    rwa [set_integral_trim hm _ h_meas‚ÇÅ h_int‚ÇÅ' hs,
      set_integral_trim hm _ h_meas‚ÇÇ h_int‚ÇÇ' hs] at h, },
end
variables {ùïÇ}

lemma is_condexp.le_abs (hm : m ‚â§ m0) {f f_abs g : Œ± ‚Üí ‚Ñù} (hfg : is_condexp m f g Œº)
  (hfg_abs : is_condexp m f_abs (Œª x, abs (g x)) Œº) (hf : integrable f Œº) (hg : integrable g Œº)
  (hf_abs : integrable f_abs Œº) :
  f ‚â§·µê[Œº] f_abs :=
is_condexp.mono hm (eventually_of_forall (Œª x, le_abs_self (g x))) hfg hf hg hfg_abs hf_abs
  (by { simp_rw [‚Üê real.norm_eq_abs], rwa integrable_norm_iff hg.1, })

/-- Replace this with a full statement of Jensen's inequality once we have the convexity results. -/
lemma is_condexp.jensen_norm (hm : m ‚â§ m0) {f f_abs g : Œ± ‚Üí ‚Ñù} (hfg : is_condexp m f g Œº)
  (hfg_abs : is_condexp m f_abs (Œª x, abs (g x)) Œº) (hf : integrable f Œº) (hg : integrable g Œº)
  (hf_abs : integrable f_abs Œº) :
  ‚àÄ·µê x ‚àÇŒº, ‚à•f x‚à• ‚â§ f_abs x :=
begin
  simp_rw [real.norm_eq_abs, abs_le],
  refine eventually.and _ (is_condexp.le_abs hm hfg hfg_abs hf hg hf_abs),
  simp_rw neg_le,
  refine is_condexp.le_abs hm hfg.neg _ hf.neg hg.neg hf_abs,
  simp_rw [pi.neg_apply, abs_neg],
  exact hfg_abs,
end

end is_condexp_properties

lemma ennreal.one_le_two : (1 : ‚Ñù‚â•0‚àû) ‚â§ 2 := ennreal.coe_le_coe.2 (show (1 : ‚Ñù‚â•0) ‚â§ 2, by norm_num)

section condexp_L2_clm

variables [borel_space ùïÇ] {m m0 : measurable_space Œ±} {Œº : measure Œ±}

lemma mem_‚Ñíp.mem_‚Ñíp_restrict_of_le_of_measure_finite {p q : ‚Ñù‚â•0‚àû} (hpq : p ‚â§ q) {f : Œ± ‚Üí G}
  (hf : mem_‚Ñíp f q Œº) {s : set Œ±} (hŒºs : Œº s < ‚àû) :
  mem_‚Ñíp f p (Œº.restrict s) :=
begin
  have hf_meas_restrict : ae_measurable f (Œº.restrict s), from (hf.restrict s).ae_measurable,
  by_cases hp_zero : p = 0,
  { rwa [hp_zero, mem_‚Ñíp_zero_iff_ae_measurable], },
  by_cases hq_zero : q = 0,
  { rw hq_zero at hpq,
    exact absurd (le_antisymm hpq (zero_le _)) hp_zero, },
  refine ‚ü®hf_meas_restrict, _‚ü©,
  refine (snorm_le_snorm_mul_rpow_measure_univ hpq hf_meas_restrict).trans_lt _,
  refine ennreal.mul_lt_top (hf.restrict s).snorm_lt_top (ennreal.rpow_lt_top_of_nonneg _ _),
  { by_cases hq_top : q = ‚àû,
    { simp [hq_top], },
    by_cases hp_top : p = ‚àû,
    { rw hp_top at hpq,
      exact absurd (le_antisymm le_top hpq) hq_top, },
    rw [sub_nonneg, one_div_le_one_div],
    { rwa ennreal.to_real_le_to_real hp_top hq_top, },
    { exact ennreal.to_real_pos_iff.mpr ‚ü®(zero_le _).lt_of_ne (ne.symm hq_zero), hq_top‚ü©, },
    { exact ennreal.to_real_pos_iff.mpr ‚ü®(zero_le _).lt_of_ne (ne.symm hp_zero), hp_top‚ü©, }, },
  { simp only [set.univ_inter, measurable_set.univ, ne.def, measure.restrict_apply],
    exact hŒºs.ne, },
end

lemma integrable_on_Lp_of_measure_finite (f : Lp G p Œº) (hp : 1 ‚â§ p) {s : set Œ±} (hŒºs : Œº s < ‚àû) :
  integrable_on f s Œº :=
mem_‚Ñíp_one_iff_integrable.mp $ mem_‚Ñíp.mem_‚Ñíp_restrict_of_le_of_measure_finite hp (Lp.mem_‚Ñíp _) hŒºs

variables (ùïÇ)
/-- Conditional expectation of a function in L2 with respect to a sigma-algebra -/
def condexp_L2_clm [complete_space E] (hm : m ‚â§ m0) :
  (Œ± ‚Üí‚ÇÇ[Œº] E) ‚ÜíL[ùïÇ] (Lp_sub E ùïÇ m 2 Œº) :=
@orthogonal_projection ùïÇ (Œ± ‚Üí‚ÇÇ[Œº] E) _ _ (Lp_sub E ùïÇ m 2 Œº)
  (by { haveI : fact (m ‚â§ m0) := ‚ü®hm‚ü©, exact infer_instance, })
variables {ùïÇ}

lemma inner_condexp_L2_left_eq_right (hm : m ‚â§ m0) {f g : Lp E' 2 Œº} :
  @inner ùïÇ _ _ (condexp_L2_clm ùïÇ hm f : Lp E' 2 Œº) g
    = inner f (condexp_L2_clm ùïÇ hm g : Lp E' 2 Œº) :=
begin
  haveI : fact (m ‚â§ m0) := ‚ü®hm‚ü©,
  haveI : fact ((1 : ‚Ñù‚â•0‚àû) ‚â§ 2) := ‚ü®ennreal.one_le_two‚ü©,
  exact orthogonal_projection_self_adjoint _ f g,
end

variables (ùïÇ)
lemma inner_set_integral_eq_inner_indicator (hm : m ‚â§ m0) {s : set Œ±} (hs : @measurable_set Œ± m s)
  (hŒºs : Œº s < ‚àû) (c : E') (f : Lp E' 2 Œº) :
  @inner ùïÇ _ _ c (‚à´ x in s, f x ‚àÇŒº) = inner (indicator_Lp 2 (hm s hs) c (or.inr hŒºs)) f :=
begin
  rw ‚Üê integral_inner (integrable_on_Lp_of_measure_finite f ennreal.one_le_two hŒºs),
  simp_rw inner,
  rw ‚Üê integral_indicator (hm s hs),
  refine integral_congr_ae _,
  refine (indicator_Lp_coe_fn 2 (hm s hs) c (or.inr hŒºs)).mono (Œª x hx, _),
  dsimp only,
  rw hx,
  simp_rw set.indicator_apply,
  by_cases hx_mem : x ‚àà s; simp [hx_mem],
end
variables {ùïÇ}

lemma set_integral_eq_inner_indicator (hm : m ‚â§ m0) {s : set Œ±} (hs : @measurable_set Œ± m s)
  (hŒºs : Œº s < ‚àû) (f : Lp ‚Ñù 2 Œº) :
  ‚à´ x in s, f x ‚àÇŒº = inner (indicator_Lp 2 (hm s hs) (1 : ‚Ñù) (or.inr hŒºs)) f :=
begin
  rw ‚Üê inner_set_integral_eq_inner_indicator ‚Ñù hm hs hŒºs (1 : ‚Ñù) f,
  simp only [is_R_or_C.inner_apply, is_R_or_C.conj_to_real, one_mul],
end

section fin_meas_sets

variables (hm : m ‚â§ m0) {s t : set Œ±} {f : Lp ‚Ñù 2 Œº}

lemma norm_condexp_L2_le_one : ‚à•@condexp_L2_clm Œ± E' ùïÇ _ _ _ _ _ _ _ _ _ Œº _ hm‚à• ‚â§ 1 :=
begin
  haveI : fact (m ‚â§ m0) := ‚ü®hm‚ü©,
  haveI : fact ((1 : ‚Ñù‚â•0‚àû) ‚â§ 2) := ‚ü®ennreal.one_le_two‚ü©,
  exact orthogonal_projection_norm_le _,
end

lemma norm_condexp_L2_apply_le (f : Lp E' 2 Œº) : ‚à•condexp_L2_clm ùïÇ hm f‚à• ‚â§ ‚à•f‚à• :=
begin
  refine ((@condexp_L2_clm Œ± E' ùïÇ _ _ _ _ _ _ _ _ _ Œº _ hm).le_op_norm _).trans _,
  nth_rewrite 1 ‚Üê one_mul (‚à•f‚à•),
  exact mul_le_mul (norm_condexp_L2_le_one hm) le_rfl (norm_nonneg _) zero_le_one,
end

lemma snorm_condexp_L2_le (f : Lp E' 2 Œº) : snorm (condexp_L2_clm ùïÇ hm f) 2 Œº ‚â§ snorm f 2 Œº :=
begin
  rw [Lp_sub_coe, ‚Üê ennreal.to_real_le_to_real (Lp.snorm_ne_top _) (Lp.snorm_ne_top _), ‚Üê norm_def,
    ‚Üê norm_def, submodule.norm_coe],
  exact norm_condexp_L2_apply_le hm f,
end

lemma condexp_L2_indicator_of_measurable (hs : @measurable_set _ m s) (hŒºs : Œº s < ‚àû) (c : E') :
  (condexp_L2_clm ùïÇ hm (indicator_Lp 2 (hm s hs) c (or.inr hŒºs)) : Lp E' 2 Œº)
    = indicator_Lp 2 (hm s hs) c (or.inr hŒºs) :=
begin
  rw condexp_L2_clm,
  haveI : fact(m ‚â§ m0) := ‚ü®hm‚ü©,
  have h_mem : indicator_Lp 2 (hm s hs) c (or.inr hŒºs) ‚àà Lp_sub E' ùïÇ m 2 Œº,
    from mem_Lp_sub_indicator_Lp hm hs,
  let ind := (‚ü®indicator_Lp 2 (hm s hs) c (or.inr hŒºs), h_mem‚ü© : Lp_sub E' ùïÇ m 2 Œº),
  have h_coe_ind : (ind : Lp E' 2 Œº) = indicator_Lp 2 (hm s hs) c (or.inr hŒºs), by refl,
  have h_orth_mem := orthogonal_projection_mem_subspace_eq_self ind,
  rw [‚Üê h_coe_ind, h_orth_mem],
end

lemma inner_condexp_L2_eq_inner_fun (f g : Lp E' 2 Œº) (hg : ae_measurable' m g Œº) :
  @inner ùïÇ _ _ (‚Üë(condexp_L2_clm ùïÇ hm f) : Lp E' 2 Œº) g = inner f g :=
begin
  symmetry,
  rw [‚Üê sub_eq_zero, ‚Üê inner_sub_left, condexp_L2_clm],
  simp only [mem_Lp_sub_iff_ae_measurable'.mpr hg, orthogonal_projection_inner_eq_zero],
end

lemma integral_eq_on_fin_meas_condexp_L2 (f : Lp ‚Ñù 2 Œº) :
  integral_eq_on_fin_meas m (condexp_L2_clm ‚Ñù hm f) f Œº :=
begin
  intros s hs hŒºs,
  rw set_integral_eq_inner_indicator hm hs hŒºs,
  have h_eq_inner : ‚à´ x in s, condexp_L2_clm ‚Ñù hm f x ‚àÇŒº
    = inner (indicator_Lp 2 (hm s hs) (1 : ‚Ñù) (or.inr hŒºs)) (condexp_L2_clm ‚Ñù hm f),
  { rw ‚Üê set_integral_eq_inner_indicator hm hs hŒºs,
    congr, },
  rw [h_eq_inner, ‚Üê inner_condexp_L2_left_eq_right, condexp_L2_indicator_of_measurable hm hs hŒºs],
  all_goals { apply_instance, },
end

lemma integrable_on_condexp_L2_of_measure_finite (hŒºs : Œº s < ‚àû) (f : Lp E' 2 Œº) :
  integrable_on (condexp_L2_clm ùïÇ hm f) s Œº :=
integrable_on_Lp_of_measure_finite ((condexp_L2_clm ùïÇ hm f) : Lp E' 2 Œº) ennreal.one_le_two hŒºs

lemma integrable_condexp_L2_of_finite_measure [finite_measure Œº] {f : Lp E' 2 Œº} :
  integrable (condexp_L2_clm ùïÇ hm f) Œº :=
integrable_on_univ.mp $ integrable_on_condexp_L2_of_measure_finite hm (measure_lt_top _ _) f

lemma set_lintegral_compl {s : set Œ±} (hs : measurable_set s) {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} :
  ‚à´‚Åª x in s, f x ‚àÇŒº + ‚à´‚Åª x in s·∂ú, f x ‚àÇŒº = ‚à´‚Åª x, f x ‚àÇŒº :=
by rw [‚Üê lintegral_add_measure, measure.restrict_add_restrict_compl hs]

lemma set_integral_compl {s : set Œ±} (hs : measurable_set s) {f : Œ± ‚Üí F'} (hfi : integrable f Œº) :
  ‚à´ x in s, f x ‚àÇŒº + ‚à´ x in s·∂ú, f x ‚àÇŒº = ‚à´ x, f x ‚àÇŒº :=
by rw [‚Üê integral_add_measure (hfi.restrict s) (hfi.restrict s·∂ú),
  measure.restrict_add_restrict_compl hs]

lemma set_lintegral_congr_fun {s : set Œ±} (hs : measurable_set s) {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû}
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí f x = g x) :
  ‚à´‚Åª x in s, f x ‚àÇŒº = ‚à´‚Åª x in s, g x ‚àÇŒº :=
by { rw lintegral_congr_ae, rw eventually_eq, rwa ae_restrict_iff' hs, }

lemma lintegral_nnnorm_eq_pos_sub_neg (f : Œ± ‚Üí ‚Ñù) (hf : measurable f) :
  ‚à´‚Åª x, nnnorm (f x) ‚àÇŒº = ‚à´‚Åª x in {x | 0 ‚â§ f x}, ennreal.of_real (f x) ‚àÇŒº
    + ‚à´‚Åª x in {x | 0 ‚â§ f x}·∂ú, ennreal.of_real (- f x) ‚àÇŒº :=
have h_meas : measurable_set {x | 0 ‚â§ f x},
  from measurable_set_le measurable_const hf,
calc ‚à´‚Åª x, nnnorm (f x) ‚àÇŒº = ‚à´‚Åª x, ennreal.of_real (‚à•f x‚à•) ‚àÇŒº :
  by simp_rw of_real_norm_eq_coe_nnnorm
... = ‚à´‚Åª x in {x | 0 ‚â§ f x}, ennreal.of_real (‚à•f x‚à•) ‚àÇŒº
      + ‚à´‚Åª x in {x | 0 ‚â§ f x}·∂ú, ennreal.of_real (‚à•f x‚à•) ‚àÇŒº :
  by rw ‚Üê set_lintegral_compl h_meas
... = ‚à´‚Åª x in {x | 0 ‚â§ f x}, ennreal.of_real (f x) ‚àÇŒº
      + ‚à´‚Åª x in {x | 0 ‚â§ f x}·∂ú, ennreal.of_real (‚à•f x‚à•) ‚àÇŒº :
begin
  congr' 1,
  refine set_lintegral_congr_fun h_meas (eventually_of_forall (Œª x hx, _)),
  congr,
  rw [real.norm_eq_abs, abs_eq_self.mpr _],
  exact hx,
end
... = ‚à´‚Åª x in {x | 0 ‚â§ f x}, ennreal.of_real (f x) ‚àÇŒº
      + ‚à´‚Åª x in {x | 0 ‚â§ f x}·∂ú, ennreal.of_real (- f x) ‚àÇŒº :
begin
  congr' 1,
  refine set_lintegral_congr_fun (measurable_set.compl h_meas)
    (eventually_of_forall (Œª x hx, _)),
  congr,
  rw [real.norm_eq_abs, abs_eq_neg_self.mpr _],
  rw [set.mem_compl_iff, set.nmem_set_of_eq] at hx,
  linarith,
end

lemma integral_norm_eq_pos_sub_neg {f : Œ± ‚Üí ‚Ñù} (hf : measurable f) (hfi : integrable f Œº) :
  ‚à´ x, ‚à•f x‚à• ‚àÇŒº = ‚à´ x in {x | 0 ‚â§ f x}, f x ‚àÇŒº - ‚à´ x in {x | 0 ‚â§ f x}·∂ú, f x ‚àÇŒº :=
have h_meas : measurable_set {x | 0 ‚â§ f x}, from measurable_set_le measurable_const hf,
calc ‚à´ x, ‚à•f x‚à• ‚àÇŒº = ‚à´ x in {x | 0 ‚â§ f x}, ‚à•f x‚à• ‚àÇŒº
      + ‚à´ x in {x | 0 ‚â§ f x}·∂ú, ‚à•f x‚à• ‚àÇŒº :
  by rw ‚Üê set_integral_compl h_meas hfi.norm
... = ‚à´ x in {x | 0 ‚â§ f x}, f x ‚àÇŒº + ‚à´ x in {x | 0 ‚â§ f x}·∂ú, ‚à•f x‚à• ‚àÇŒº :
begin
  congr' 1,
  refine set_integral_congr h_meas (Œª x hx, _),
  dsimp only,
  rw [real.norm_eq_abs, abs_eq_self.mpr _],
  exact hx,
end
... = ‚à´ x in {x | 0 ‚â§ f x}, f x ‚àÇŒº - ‚à´ x in {x | 0 ‚â§ f x}·∂ú, f x ‚àÇŒº :
begin
  congr' 1,
  rw ‚Üê integral_neg,
  refine set_integral_congr h_meas.compl (Œª x hx, _),
  dsimp only,
  rw [real.norm_eq_abs, abs_eq_neg_self.mpr _],
  rw [set.mem_compl_iff, set.nmem_set_of_eq] at hx,
  linarith,
end

lemma lintegral_nnnorm_eq_integral_norm {f : Œ± ‚Üí G} (hf : integrable f Œº) :
  ‚à´‚Åª x, nnnorm (f x) ‚àÇŒº = ennreal.of_real ‚à´ x, ‚à•f x‚à• ‚àÇŒº :=
begin
  rw integral_eq_lintegral_of_nonneg_ae _ hf.1.norm,
  swap, { refine ae_of_all _ _, simp, },
  simp_rw of_real_norm_eq_coe_nnnorm,
  rw ennreal.of_real_to_real _,
  exact lt_top_iff_ne_top.mp hf.2,
end

lemma indicator_le_indicator_nonneg {Œ≤} [linear_order Œ≤] [has_zero Œ≤] (s : set Œ±) (f : Œ± ‚Üí Œ≤) :
  s.indicator f ‚â§ {x | 0 ‚â§ f x}.indicator f :=
begin
  intro x,
  simp [set.indicator_apply],
  split_ifs,
  { exact le_rfl, },
  { exact (not_le.mp h_1).le, },
  { exact h_1, },
  { exact le_rfl, },
end

lemma indicator_nonpos_le_indicator {Œ≤} [linear_order Œ≤] [has_zero Œ≤] (s : set Œ±) (f : Œ± ‚Üí Œ≤) :
  {x | f x ‚â§ 0}.indicator f ‚â§ s.indicator f :=
begin
  intro x,
  simp [set.indicator_apply],
  split_ifs,
  { exact le_rfl, },
  { exact h, },
  { exact (not_le.mp h).le, },
  { exact le_rfl, },
end

lemma set_integral_le_nonneg {s : set Œ±} (hs : measurable_set s) {f : Œ± ‚Üí ‚Ñù} (hf : measurable f)
  (hfi : integrable f Œº) :
  ‚à´ x in s, f x ‚àÇŒº ‚â§ ‚à´ x in {y | 0 ‚â§ f y}, f x ‚àÇŒº :=
begin
  rw [‚Üê integral_indicator hs, ‚Üê integral_indicator (measurable_set_le measurable_const hf)],
  exact integral_mono (hfi.indicator hs) (hfi.indicator (measurable_set_le measurable_const hf))
    (indicator_le_indicator_nonneg s f),
end

lemma set_integral_ge_nonpos {s : set Œ±} (hs : measurable_set s) {f : Œ± ‚Üí ‚Ñù} (hf : measurable f)
  (hfi : integrable f Œº) :
  ‚à´ x in {y | f y ‚â§ 0}, f x ‚àÇŒº ‚â§ ‚à´ x in s, f x ‚àÇŒº :=
begin
  rw [‚Üê integral_indicator hs, ‚Üê integral_indicator (measurable_set_le hf measurable_const)],
  exact integral_mono (hfi.indicator (measurable_set_le hf measurable_const)) (hfi.indicator hs)
    (indicator_nonpos_le_indicator s f),
end

lemma set_integral_neg_eq_set_integral_nonpos {f : Œ± ‚Üí ‚Ñù} (hf : measurable f)
  (hfi : integrable f Œº) :
  ‚à´ x in {x | f x < 0}, f x ‚àÇŒº = ‚à´ x in {x | f x ‚â§ 0}, f x ‚àÇŒº :=
begin
  have h_union : {x | f x ‚â§ 0} = {x | f x < 0} ‚à™ {x | f x = 0},
  { ext,
    simp_rw [set.mem_union_eq, set.mem_set_of_eq],
    exact le_iff_lt_or_eq, },
  rw [h_union, integral_union _ (measurable_set_lt hf measurable_const)
    (measurable_set_eq_fun hf measurable_const) hfi.integrable_on hfi.integrable_on],
  { rw ‚Üê add_zero (‚à´ (x : Œ±) in {x : Œ± | f x < 0}, f x ‚àÇŒº),  -- nth_rewrites times out
    congr,
    { rw add_zero, },
    { refine (integral_eq_zero_of_ae _).symm,
      rw [eventually_eq, ae_restrict_iff (measurable_set_eq_fun hf measurable_zero)],
      refine eventually_of_forall (Œª x hx, _),
      simpa using hx, }, },
  { intros x hx,
    simp only [set.mem_inter_eq, set.mem_set_of_eq, set.inf_eq_inter] at hx,
    exact absurd hx.2 hx.1.ne, },
end

lemma integral_norm_le_on (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hf : measurable f)
  (hfi : integrable_on f s Œº) (hg : @measurable _ _ m _ g) (hgi : integrable_on g s Œº)
  (hgf : integral_eq_on_fin_meas m g f Œº) (hs : @measurable_set _ m s) (hŒºs : Œº s < ‚àû) :
  ‚à´ (x : Œ±) in s, ‚à•g x‚à• ‚àÇŒº ‚â§ ‚à´ (x : Œ±) in s, ‚à•f x‚à• ‚àÇŒº :=
begin
  rw integral_norm_eq_pos_sub_neg (hg.mono hm le_rfl) hgi,
  rw integral_norm_eq_pos_sub_neg hf hfi,
  have h_meas_nonneg_g : @measurable_set Œ± m {x | 0 ‚â§ g x},
    from @measurable_set_le _ Œ± _ _ _ m _ _ _ _ g (@measurable_const _ Œ± _ m _) hg,
  have h_meas_nonneg_f : measurable_set {x | 0 ‚â§ f x},
    from measurable_set_le measurable_const hf,
  have h_meas_nonpos_g : @measurable_set Œ± m {x | g x ‚â§ 0},
    from @measurable_set_le _ Œ± _ _ _ m _ _ _ g _ hg (@measurable_const _ Œ± _ m _),
  have h_meas_nonpos_f : measurable_set {x | f x ‚â§ 0},
    from measurable_set_le hf measurable_const,
  refine sub_le_sub _ _,
  { rw [measure.restrict_restrict (hm _ h_meas_nonneg_g),
      measure.restrict_restrict h_meas_nonneg_f,
      hgf _ (@measurable_set.inter Œ± m _ _ h_meas_nonneg_g hs)
        ((measure_mono (set.inter_subset_right _ _)).trans_lt hŒºs),
      ‚Üê measure.restrict_restrict (hm _ h_meas_nonneg_g),
      ‚Üê measure.restrict_restrict h_meas_nonneg_f],
    exact set_integral_le_nonneg (hm _ h_meas_nonneg_g) hf hfi, },
  { have h_set_f_eq : {x : Œ± | 0 ‚â§ f x}·∂ú = {x | f x < 0}, by { ext, simp, },
    have h_set_g_eq : {x : Œ± | 0 ‚â§ g x}·∂ú = {x | g x < 0}, by { ext, simp, },
    simp_rw [h_set_f_eq, h_set_g_eq],
    rw set_integral_neg_eq_set_integral_nonpos hf hfi,
    rw set_integral_neg_eq_set_integral_nonpos (hg.mono hm le_rfl) hgi,
    rw [measure.restrict_restrict (hm _ h_meas_nonpos_g),
      measure.restrict_restrict h_meas_nonpos_f,
      hgf _ (@measurable_set.inter Œ± m _ _ h_meas_nonpos_g hs)
        ((measure_mono (set.inter_subset_right _ _)).trans_lt hŒºs),
      ‚Üê measure.restrict_restrict (hm _ h_meas_nonpos_g),
      ‚Üê measure.restrict_restrict h_meas_nonpos_f],
    exact set_integral_ge_nonpos (hm _ h_meas_nonpos_g) hf hfi, },
end

lemma lintegral_nnnorm_le_on (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù} (hf : measurable f)
  (hfi : integrable_on f s Œº) (hg : @measurable _ _ m _ g) (hgi : integrable_on g s Œº)
  (hgf : integral_eq_on_fin_meas m g f Œº) (hs : @measurable_set _ m s) (hŒºs : Œº s < ‚àû) :
  ‚à´‚Åª x in s, nnnorm (g x) ‚àÇŒº ‚â§ ‚à´‚Åª x in s, nnnorm (f x) ‚àÇŒº :=
begin
  rw [lintegral_nnnorm_eq_integral_norm hfi, lintegral_nnnorm_eq_integral_norm hgi,
    ennreal.of_real_le_of_real_iff],
  { exact integral_norm_le_on hm hf hfi hg hgi hgf hs hŒºs, },
  { exact integral_nonneg (Œª x, norm_nonneg _), },
end

lemma lintegral_nnnorm_condexp_L2_le_on (hm : m ‚â§ m0) (hs : @measurable_set _ m s) (hŒºs : Œº s < ‚àû)
  (f : Lp ‚Ñù 2 Œº) :
  ‚à´‚Åª x in s, nnnorm (condexp_L2_clm ‚Ñù hm f x) ‚àÇŒº ‚â§ ‚à´‚Åª x in s, nnnorm (f x) ‚àÇŒº :=
begin
  let h_meas := Lp_sub.ae_measurable' (condexp_L2_clm ‚Ñù hm f),
  let g := h_meas.some,
  have hg_meas : @measurable _ _ m _ g, from h_meas.some_spec.1,
  have hg_eq : g =·µê[Œº] condexp_L2_clm ‚Ñù hm f, from h_meas.some_spec.2.symm,
  have hg_eq_restrict : g =·µê[Œº.restrict s] condexp_L2_clm ‚Ñù hm f, from ae_restrict_of_ae hg_eq,
  have hg_nnnorm_eq : (Œª x, (nnnorm (g x) : ‚Ñù‚â•0‚àû))
    =·µê[Œº.restrict s] (Œª x, (nnnorm (condexp_L2_clm ‚Ñù hm f x) : ‚Ñù‚â•0‚àû)),
  { refine hg_eq_restrict.mono (Œª x hx, _),
    dsimp only,
    rw hx, },
  rw lintegral_congr_ae hg_nnnorm_eq.symm,
  refine lintegral_nnnorm_le_on hm (Lp.measurable f) _ _ _ _ hs hŒºs,
  { exact integrable_on_Lp_of_measure_finite f ennreal.one_le_two hŒºs, },
  { exact hg_meas, },
  { rw [integrable_on, integrable_congr hg_eq_restrict],
    exact integrable_on_condexp_L2_of_measure_finite hm hŒºs f, },
  { exact integral_eq_on_fin_meas.congr_ae_left' hg_eq.symm (integral_eq_on_fin_meas_condexp_L2 hm f), },
end

lemma condexp_L2_zero_on (hs : @measurable_set _ m s) (hŒºs : Œº s < ‚àû) {f : Lp ‚Ñù 2 Œº}
  (hf : f =·µê[Œº.restrict s] 0) :
  condexp_L2_clm ‚Ñù hm f =·µê[Œº.restrict s] 0 :=
begin
  suffices h_nnnorm_eq_zero : ‚à´‚Åª x in s, nnnorm (condexp_L2_clm ‚Ñù hm f x) ‚àÇŒº = 0,
  { rw lintegral_eq_zero_iff at h_nnnorm_eq_zero,
    refine h_nnnorm_eq_zero.mono (Œª x hx, _),
    dsimp only at hx,
    rw pi.zero_apply at hx ‚ä¢,
    { rwa [ennreal.coe_eq_zero, nnnorm_eq_zero] at hx, },
    { refine measurable.ennreal_coe (measurable.nnnorm _),
      rw Lp_sub_coe,
      exact Lp.measurable _, }, },
  refine le_antisymm _ (zero_le _),
  refine (lintegral_nnnorm_condexp_L2_le_on hm hs hŒºs f).trans (le_of_eq _),
  rw lintegral_eq_zero_iff,
  { refine hf.mono (Œª x hx, _),
    dsimp only,
    rw hx,
    simp, },
  { exact (Lp.measurable _).nnnorm.ennreal_coe, },
end

end fin_meas_sets

lemma ae_nonneg_indicator_Lp {s : set Œ±} (hs : measurable_set s) (hŒºs : Œº s < ‚àû) (t : set Œ±) :
  0 ‚â§·µê[Œº.restrict t] (indicator_Lp 2 hs (1 : ‚Ñù) (or.inr hŒºs)) :=
begin
  have h_ae_eq_s : indicator_Lp 2 hs (1 : ‚Ñù) (or.inr hŒºs) =·µê[Œº.restrict t] s.indicator (Œª _, 1),
    from ae_restrict_of_ae (indicator_Lp_coe_fn 2 hs (1 : ‚Ñù) (or.inr hŒºs)),
  refine h_ae_eq_s.mono (Œª x hx, _),
  rw [hx, set.indicator_apply],
  split_ifs; simp [zero_le_one],
end

lemma integrable_indicator_Lp {s : set Œ±} (hs : measurable_set s) (c : F) (hsŒºc : c = 0 ‚à® Œº s < ‚àû) :
  integrable (indicator_Lp p hs c hsŒºc) Œº :=
begin
  rw [integrable_congr (indicator_Lp_coe_fn p hs c hsŒºc), integrable_indicator_iff hs,
    integrable_on, integrable_const_iff],
  cases hsŒºc,
  { exact or.inl hsŒºc, },
  { right,
    simpa only [set.univ_inter, measurable_set.univ, measure.restrict_apply] using hsŒºc, },
end

lemma lintegral_nnnorm_le_of_bounded_on_finite [opens_measurable_space H] (hm : m ‚â§ m0)
  [@sigma_finite Œ± m (Œº.trim hm)] (C : ‚Ñù‚â•0‚àû) (hC : C < ‚àû) (f : Œ± ‚Üí H) (hf_meas : measurable f)
  (hf : ‚àÄ s : set Œ±, @measurable_set _ m s ‚Üí Œº s < ‚àû ‚Üí ‚à´‚Åª x in s, nnnorm (f x) ‚àÇŒº ‚â§ C) :
  ‚à´‚Åª x, nnnorm (f x) ‚àÇŒº ‚â§ C :=
begin
  let S := @spanning_sets Œ± m (Œº.trim hm) _,
  have hS_meas : ‚àÄ n, @measurable_set _ m (S n), from @measurable_spanning_sets Œ± m (Œº.trim hm) _,
  let F := Œª n, (S n).indicator f,
  have h_F_lim : ‚àÄ a, (‚®Ü n, (nnnorm (F n a) : ‚Ñù‚â•0‚àû)) = nnnorm (f a),
  { refine Œª a, le_antisymm (supr_le (Œª n, _)) _,
    { simp_rw [F, set.indicator_apply],
      split_ifs; simp, },
    { have h_exists : ‚àÉ n, a ‚àà S n,
      { rw [‚Üê set.mem_Union, @Union_spanning_sets Œ± m (Œº.trim hm)],
        exact set.mem_univ a, },
      obtain ‚ü®n‚ÇÄ, han‚ÇÄ‚ü© := h_exists,
      refine le_trans _ (le_supr _ n‚ÇÄ),
      simp_rw [F, set.indicator_apply],
      simp [han‚ÇÄ], }, },
  have h_eq : ‚à´‚Åª (a : Œ±), nnnorm (f a) ‚àÇŒº = ‚à´‚Åª (a : Œ±), ‚®Ü n, (nnnorm (F n a) : ‚Ñù‚â•0‚àû) ‚àÇŒº,
    from lintegral_congr (Œª a, (h_F_lim a).symm),
  rw [h_eq, lintegral_supr],
  { have h_F_bound : ‚àÄ n, ‚à´‚Åª a, nnnorm (F n a) ‚àÇŒº ‚â§ C,
    { intro n,
      simp_rw [F, nnnorm_indicator_eq_indicator_nnnorm, ennreal.coe_indicator],
      rw lintegral_indicator _ (hm _ (hS_meas n)),
      exact hf (S n) (hS_meas n)
        ((le_trim hm).trans_lt (@measure_spanning_sets_lt_top Œ± m (Œº.trim hm) _ n)), },
    exact supr_le h_F_bound, },
  { have h_F_meas : ‚àÄ n, measurable (F n), from Œª n, hf_meas.indicator (hm _ (hS_meas n)),
    exact Œª n, (h_F_meas n).nnnorm.ennreal_coe, },
  { intros n‚ÇÅ n‚ÇÇ hn‚ÇÅ‚ÇÇ a,
    simp_rw [F, set.indicator_apply],
    split_ifs,
    { exact le_rfl, },
    { have h_S_mono : monotone S, from @monotone_spanning_sets Œ± m (Œº.trim hm) _,
      exact absurd (set.mem_of_mem_of_subset h (h_S_mono hn‚ÇÅ‚ÇÇ)) h_1, },
    { simp, },
    { exact le_rfl, }, },
end

lemma integrable_of_bounded_on_finite' [opens_measurable_space H] (hm : m ‚â§ m0)
  [@sigma_finite Œ± m (Œº.trim hm)] (C : ‚Ñù‚â•0‚àû) (hC : C < ‚àû) (f : Œ± ‚Üí H) (hf_meas : measurable f)
  (hf : ‚àÄ s : set Œ±, @measurable_set _ m s ‚Üí Œº s < ‚àû ‚Üí ‚à´‚Åª x in s, nnnorm (f x) ‚àÇŒº ‚â§ C) :
  integrable f Œº :=
begin
  refine ‚ü®hf_meas.ae_measurable, _‚ü©,
  exact (lintegral_nnnorm_le_of_bounded_on_finite hm C hC f hf_meas hf).trans_lt hC,
end

lemma integrable_of_bounded_on_finite [opens_measurable_space H] [sigma_finite Œº]
  (C : ‚Ñù‚â•0‚àû) (hC : C < ‚àû) (f : Œ± ‚Üí H) (hf_meas : ae_measurable f Œº)
  (hf : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´‚Åª x in s, nnnorm (f x) ‚àÇŒº ‚â§ C) :
  integrable f Œº :=
begin
  let f' := hf_meas.mk f,
  have hf' : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´‚Åª x in s, nnnorm (f' x) ‚àÇŒº ‚â§ C,
  { refine Œª s hs hŒºs, (le_of_eq _).trans (hf s hs hŒºs),
    refine lintegral_congr_ae (ae_restrict_of_ae (hf_meas.ae_eq_mk.mono (Œª x hx, _))),
    rw hx, },
  rw integrable_congr hf_meas.ae_eq_mk,
  haveI : sigma_finite (Œº.trim le_rfl) := by rwa trim_eq_self,
  exact integrable_of_bounded_on_finite' le_rfl C hC f' hf_meas.measurable_mk hf',
end

lemma indicator_Lp_disjoint_union (s t : set Œ±)
  (hs : measurable_set s) (ht : measurable_set t) (hst : s ‚à© t = ‚àÖ) (hŒºs : Œº s < ‚àû)
  (hŒºt : Œº t < ‚àû) :
  (indicator_Lp 2 (hs.union ht) (1 : ‚Ñù)
      (or.inr ((measure_union_le s t).trans_lt (ennreal.add_lt_top.mpr ‚ü®hŒºs, hŒºt‚ü©))))
    = indicator_Lp 2 hs (1 : ‚Ñù) (or.inr hŒºs) + indicator_Lp 2 ht (1 : ‚Ñù) (or.inr hŒºt) :=
begin
  have hs_eq := indicator_Lp_coe_fn 2 hs (1 : ‚Ñù) (or.inr hŒºs),
  have ht_eq := indicator_Lp_coe_fn 2 ht (1 : ‚Ñù) (or.inr hŒºt),
  ext1,
  refine eventually_eq.trans _ (Lp.coe_fn_add _ _).symm,
  refine (indicator_Lp_coe_fn 2 (hs.union ht) (1 : ‚Ñù)
    (or.inr ((measure_union_le s t).trans_lt (ennreal.add_lt_top.mpr ‚ü®hŒºs, hŒºt‚ü©)))).trans _,
  refine eventually_eq.trans _ (eventually_eq.add hs_eq.symm ht_eq.symm),
  refine eventually_of_forall (Œª x, _),
  simp_rw set.indicator_apply,
  by_cases hxs : x ‚àà s,
  { simp only [hxs, if_true, true_or, ite_eq_right_iff, self_eq_add_right, one_ne_zero,
      set.mem_union_eq],
    intro hxt,
    rw [‚Üê set.mem_empty_eq x, ‚Üê hst],
    exact set.mem_inter hxs hxt, },
  { simp only [hxs, false_or, if_false, zero_add, set.mem_union_eq],
    congr, },
end

/-! ## Extension of the conditional expectation to L¬π

We define `T_condexp ùïÇ hm s hs : E' ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] E'`, which to a value `x : E'` associates the
conditional expectation of the measurable set `s` multiplies (as scalar) by `x`. -/

variables (ùïÇ)
include ùïÇ
def condexp_smul (hm : m ‚â§ m0) (s : set Œ±) (hs : measurable_set s) (hŒºs : Œº s < ‚àû) (x : E') :
  Œ± ‚Üí E' :=
  Œª a, condexp_L2_clm ‚Ñù hm (indicator_Lp 2 hs (1 : ‚Ñù) (or.inr hŒºs)) a ‚Ä¢ x

lemma condexp_smul_zero  (hm : m ‚â§ m0) (s : set Œ±) (hs : measurable_set s) (hŒºs : Œº s < ‚àû) :
  condexp_smul ùïÇ hm s hs hŒºs (0 : E') = 0 :=
by { rw condexp_smul, simp_rw smul_zero, refl, }

lemma measurable_condexp_smul (hm : m ‚â§ m0) (s : set Œ±) (hs : measurable_set s)
  (hŒºs : Œº s < ‚àû) (x : E') :
  measurable (condexp_smul ùïÇ hm s hs hŒºs x) :=
by { rw [condexp_smul, Lp_sub_coe], exact (Lp.measurable _).smul_const x, }

lemma integrable_on_condexp_smul (hm : m ‚â§ m0) (s : set Œ±) (hs : measurable_set s) (hŒºs : Œº s < ‚àû)
  (x : E') {t : set Œ±} (ht : Œº t < ‚àû) :
  integrable_on (condexp_smul ùïÇ hm s hs hŒºs x) t Œº :=
begin
  by_cases hx0 : x = 0,
  { rw [hx0, condexp_smul_zero],
    exact integrable_on_zero, },
  { exact (integrable_smul_const hx0).mpr (integrable_on_condexp_L2_of_measure_finite hm ht _), },
end

lemma lintegral_nnnorm_condexp_L2_indicator_le (hm : m ‚â§ m0) (s : set Œ±) (hs : measurable_set s)
  (hŒºs : Œº s < ‚àû) {t : set Œ±} (ht : @measurable_set _ m t) (hŒºt : Œº t < ‚àû) :
  ‚à´‚Åª a in t, nnnorm (condexp_L2_clm ‚Ñù hm (indicator_Lp 2 hs (1 : ‚Ñù) (or.inr hŒºs)) a) ‚àÇŒº
    ‚â§ Œº (s ‚à© t) :=
begin
  refine (lintegral_nnnorm_condexp_L2_le_on hm ht hŒºt _).trans (le_of_eq _),
  have h_eq : ‚à´‚Åª (x : Œ±) in t, (nnnorm ((indicator_Lp 2 hs (1 : ‚Ñù) (or.inr hŒºs)) x)) ‚àÇŒº
    = ‚à´‚Åª (x : Œ±) in t, s.indicator (Œª x, (1 : ‚Ñù‚â•0‚àû)) x ‚àÇŒº,
  { refine lintegral_congr_ae (ae_restrict_of_ae _),
    refine (indicator_Lp_coe_fn 2 hs (1 : ‚Ñù) (or.inr hŒºs)).mono (Œª x hx, _),
    rw hx,
    simp_rw set.indicator_apply,
    split_ifs; simp, },
  rw [h_eq, lintegral_indicator _ hs, lintegral_const, measure.restrict_restrict hs],
  simp only [one_mul, set.univ_inter, measurable_set.univ, measure.restrict_apply],
end

lemma lintegral_nnnorm_condexp_smul_le' (hm : m ‚â§ m0) (s : set Œ±) (hs : measurable_set s)
  (hŒºs : Œº s < ‚àû) (x : E') {t : set Œ±} (ht : @measurable_set _ m t) (hŒºt : Œº t < ‚àû) :
  ‚à´‚Åª a in t, nnnorm (condexp_smul ùïÇ hm s hs hŒºs x a) ‚àÇŒº ‚â§ Œº (s ‚à© t) * nnnorm x :=
begin
  simp_rw [condexp_smul, nnnorm_smul, ennreal.coe_mul],
  rw lintegral_mul_const,
  swap, { rw Lp_sub_coe, exact (Lp.measurable _).nnnorm.ennreal_coe, },
  refine ennreal.mul_le_mul _ le_rfl,
  exact lintegral_nnnorm_condexp_L2_indicator_le ùïÇ hm s hs hŒºs ht hŒºt,
end

lemma lintegral_nnnorm_condexp_smul_le (hm : m ‚â§ m0) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) (hŒºs : Œº s < ‚àû) (x : E') :
  ‚à´‚Åª a, nnnorm (condexp_smul ùïÇ hm s hs hŒºs x a) ‚àÇŒº ‚â§ Œº s * nnnorm x :=
begin
  refine lintegral_nnnorm_le_of_bounded_on_finite hm (Œº s * nnnorm x)
    (ennreal.mul_lt_top hŒºs ennreal.coe_lt_top) (condexp_smul ùïÇ hm s hs hŒºs x)
    (measurable_condexp_smul ùïÇ hm s hs hŒºs x) (Œª t ht hŒºt, _),
  refine (lintegral_nnnorm_condexp_smul_le' ùïÇ hm s hs hŒºs x ht hŒºt).trans _,
  exact ennreal.mul_le_mul (measure_mono (set.inter_subset_left _ _)) le_rfl,
end

lemma integrable_condexp_smul (hm : m ‚â§ m0) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) (hŒºs : Œº s < ‚àû) (x : E') :
  integrable (condexp_smul ùïÇ hm s hs hŒºs x) Œº :=
begin
  refine ‚ü®(measurable_condexp_smul ùïÇ hm s hs hŒºs x).ae_measurable, _‚ü©,
  exact (lintegral_nnnorm_condexp_smul_le ùïÇ hm s hs hŒºs x).trans_lt
    (ennreal.mul_lt_top hŒºs ennreal.coe_lt_top),
end

lemma condexp_smul_add (hm : m ‚â§ m0) (s : set Œ±) (hs : measurable_set s) (hŒºs : Œº s < ‚àû)
  (x y : E') :
  condexp_smul ùïÇ hm s hs hŒºs (x + y) =
    condexp_smul ùïÇ hm s hs hŒºs x + condexp_smul ùïÇ hm s hs hŒºs y :=
by { simp_rw [condexp_smul, smul_add], refl, }

lemma condexp_smul_smul (hm : m ‚â§ m0) (s : set Œ±) (hs : measurable_set s) (hŒºs : Œº s < ‚àû)
  (x : E') (c : ùïÇ) :
  condexp_smul ùïÇ hm s hs hŒºs (c ‚Ä¢ x) = c ‚Ä¢ condexp_smul ùïÇ hm s hs hŒºs x :=
begin
  simp_rw [condexp_smul],
  ext1 a,
  rw [pi.smul_apply, ‚Üê smul_assoc, smul_comm, smul_assoc],
end

lemma condexp_smul_smul_‚Ñù (hm : m ‚â§ m0) (s : set Œ±) (hs : measurable_set s) (hŒºs : Œº s < ‚àû)
  (x : E') (c : ‚Ñù) :
  condexp_smul ùïÇ hm s hs hŒºs (c ‚Ä¢ x) = c ‚Ä¢ condexp_smul ùïÇ hm s hs hŒºs x :=
begin
  simp_rw [condexp_smul],
  ext1 a,
  rw [pi.smul_apply, ‚Üê smul_assoc, smul_comm, smul_assoc],
end

def T_condexp_fn (hm : m ‚â§ m0) (Œº : measure Œ±) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) (x : E') :
  Œ± ‚Üí‚ÇÅ[Œº] E' :=
dite (Œº s < ‚àû)
  (Œª hŒºs, (mem_‚Ñíp_one_iff_integrable.mpr (integrable_condexp_smul ùïÇ hm s hs hŒºs x)).to_Lp _)
  (Œª hŒºs, 0)

lemma T_condexp_fn_coe_of_finite (hm : m ‚â§ m0) (Œº : measure Œ±) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) (hŒºs : Œº s < ‚àû) (x : E') :
  T_condexp_fn ùïÇ hm Œº s hs x =·µê[Œº] condexp_smul ùïÇ hm s hs hŒºs x :=
by { simp only [T_condexp_fn, hŒºs, dif_pos], exact mem_‚Ñíp.coe_fn_to_Lp _, }

lemma T_condexp_fn_eq_zero_of_not_finite (hm : m ‚â§ m0) (Œº : measure Œ±)
  [@sigma_finite Œ± m (Œº.trim hm)] (s : set Œ±) (hs : measurable_set s) (hŒºs : ¬¨ Œº s < ‚àû) (x : E') :
  T_condexp_fn ùïÇ hm Œº s hs x = 0 :=
by simp only [T_condexp_fn, hŒºs, dif_neg, not_false_iff]

lemma T_condexp_fn_add (hm : m ‚â§ m0) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) (x y : E') :
  T_condexp_fn ùïÇ hm Œº s hs (x + y) = T_condexp_fn ùïÇ hm Œº s hs x + T_condexp_fn ùïÇ hm Œº s hs y :=
begin
  simp_rw T_condexp_fn,
  split_ifs,
  { rw ‚Üê mem_‚Ñíp.to_Lp_add,
    congr,
    exact condexp_smul_add ùïÇ hm s hs h x y, },
  { rw zero_add _, },
end

lemma T_condexp_fn_smul (hm : m ‚â§ m0) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) (x : E') (c : ùïÇ) :
  T_condexp_fn ùïÇ hm Œº s hs (c ‚Ä¢ x) = c ‚Ä¢ T_condexp_fn ùïÇ hm Œº s hs x :=
begin
  simp_rw T_condexp_fn,
  split_ifs,
  { rw ‚Üê mem_‚Ñíp.to_Lp_const_smul,
    congr,
    exact condexp_smul_smul ùïÇ hm s hs h x c, },
  { rw smul_zero _, },
end

lemma T_condexp_fn_smul_‚Ñù (hm : m ‚â§ m0) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) (x : E') (c : ‚Ñù) :
  T_condexp_fn ùïÇ hm Œº s hs (c ‚Ä¢ x) = c ‚Ä¢ T_condexp_fn ùïÇ hm Œº s hs x :=
begin
  simp_rw T_condexp_fn,
  split_ifs,
  { rw ‚Üê mem_‚Ñíp.to_Lp_const_smul,
    congr,
    exact condexp_smul_smul_‚Ñù ùïÇ hm s hs h x c, },
  { rw smul_zero _, },
end

lemma norm_T_condexp_fn_le (hm : m ‚â§ m0) (Œº : measure Œ±) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) (x : E') :
  ‚à•T_condexp_fn ùïÇ hm Œº s hs x‚à• ‚â§ (Œº s).to_real * ‚à•x‚à• :=
begin
  by_cases hŒºs : Œº s < ‚àû,
  swap,
  { simp only [T_condexp_fn, hŒºs, measure_theory.Lp.norm_zero, dif_neg, not_false_iff],
    exact mul_nonneg ennreal.to_real_nonneg (norm_nonneg _), },
  have : 0 ‚â§ ‚à´ (a : Œ±), ‚à•T_condexp_fn ùïÇ hm Œº s hs x a‚à• ‚àÇŒº,
    from integral_nonneg (Œª a, norm_nonneg _),
  rw [L1.norm_eq_integral_norm, ‚Üê ennreal.to_real_of_real (norm_nonneg x), ‚Üê ennreal.to_real_mul,
    ‚Üê ennreal.to_real_of_real this, ennreal.to_real_le_to_real ennreal.of_real_ne_top
      (ennreal.mul_ne_top hŒºs.ne ennreal.of_real_ne_top),
    ‚Üê lintegral_nnnorm_eq_integral_norm],
  swap, { rw [‚Üê mem_‚Ñíp_one_iff_integrable], exact Lp.mem_‚Ñíp _, },
  have h_eq : ‚à´‚Åª a, nnnorm (T_condexp_fn ùïÇ hm Œº s hs x a) ‚àÇŒº
    = ‚à´‚Åª a, nnnorm (condexp_smul ùïÇ hm s hs hŒºs x a) ‚àÇŒº,
  { refine lintegral_congr_ae _,
    refine (T_condexp_fn_coe_of_finite ùïÇ hm Œº s hs hŒºs x).mono (Œª z hz, _),
    dsimp only,
    rw hz, },
  rw [h_eq, of_real_norm_eq_coe_nnnorm],
  exact lintegral_nnnorm_condexp_smul_le ùïÇ hm s hs hŒºs x,
end

lemma continuous_T_condexp_hm (hm : m ‚â§ m0) (Œº : measure Œ±) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) :
  continuous (Œª x : E', T_condexp_fn ùïÇ hm Œº s hs x) :=
continuous_of_linear_of_bound (T_condexp_fn_add ùïÇ hm s hs)
  (Œª c x, T_condexp_fn_smul_‚Ñù ùïÇ hm s hs x c) (norm_T_condexp_fn_le ùïÇ hm Œº s hs)

variables (E')
def T_condexp (hm : m ‚â§ m0) (Œº : measure Œ±) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) :
  E' ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] E' :=
{ to_fun := T_condexp_fn ùïÇ hm Œº s hs,
  map_add' := T_condexp_fn_add ùïÇ hm s hs,
  map_smul' := Œª c x, T_condexp_fn_smul_‚Ñù ùïÇ hm s hs x c,
  cont := continuous_T_condexp_hm ùïÇ hm Œº s hs, }
variables {E'}

lemma condexp_L2_disjoint_union (hm : m ‚â§ m0) (s t : set Œ±) (hs : measurable_set s)
  (ht : measurable_set t) (hst : s ‚à© t = ‚àÖ) (hŒºs : Œº s < ‚àû) (hŒºt : Œº t < ‚àû) :
  condexp_L2_clm ‚Ñù hm (indicator_Lp 2 (hs.union ht) (1 : ‚Ñù)
    (or.inr ((measure_union_le s t).trans_lt (ennreal.add_lt_top.mpr ‚ü®hŒºs, hŒºt‚ü©))))
    = condexp_L2_clm ‚Ñù hm (indicator_Lp 2 hs (1 : ‚Ñù) (or.inr hŒºs))
    + condexp_L2_clm ‚Ñù hm (indicator_Lp 2 ht (1 : ‚Ñù) (or.inr hŒºt)) :=
begin
  have h_add : (indicator_Lp 2 (hs.union ht) (1 : ‚Ñù)
      (or.inr ((measure_union_le s t).trans_lt (ennreal.add_lt_top.mpr ‚ü®hŒºs, hŒºt‚ü©))))
    = indicator_Lp 2 hs (1 : ‚Ñù) (or.inr hŒºs) + indicator_Lp 2 ht (1 : ‚Ñù) (or.inr hŒºt),
  from indicator_Lp_disjoint_union s t hs ht hst hŒºs hŒºt,
  rw h_add,
  rw (condexp_L2_clm ‚Ñù hm).map_add,
end

lemma condexp_smul_disjoint_union (hm : m ‚â§ m0) (s t : set Œ±) (hs : measurable_set s)
  (ht : measurable_set t) (hst : s ‚à© t = ‚àÖ) (hŒºs : Œº s < ‚àû) (hŒºt : Œº t < ‚àû) (x : E') :
  condexp_smul ùïÇ hm (s ‚à™ t) (hs.union ht)
      ((measure_union_le s t).trans_lt (ennreal.add_lt_top.mpr ‚ü®hŒºs, hŒºt‚ü©)) x
    =·µê[Œº] condexp_smul ùïÇ hm s hs hŒºs x + condexp_smul ùïÇ hm t ht hŒºt x :=
begin
  simp_rw condexp_smul,
  rw condexp_L2_disjoint_union ùïÇ hm s t hs ht hst hŒºs hŒºt,
  simp_rw pi.add_apply,
  sorry
end

lemma T_condexp_fn_disjoint_union (hm : m ‚â§ m0) [@sigma_finite Œ± m (Œº.trim hm)] (s t : set Œ±)
  (hs : measurable_set s) (ht : measurable_set t) (hst : s ‚à© t = ‚àÖ) (hŒºs : Œº s < ‚àû)
  (hŒºt : Œº t < ‚àû) (x : E') :
  T_condexp_fn ùïÇ hm Œº (s ‚à™ t) (hs.union ht) x
    = T_condexp_fn ùïÇ hm Œº s hs x + T_condexp_fn ùïÇ hm Œº t ht x :=
begin
  ext1,
  have hTs := T_condexp_fn_coe_of_finite ùïÇ hm Œº s hs hŒºs x,
  have hTt := T_condexp_fn_coe_of_finite ùïÇ hm Œº t ht hŒºt x,
  have hT_union := T_condexp_fn_coe_of_finite ùïÇ hm Œº (s ‚à™ t) (hs.union ht)
    ((measure_union_le s t).trans_lt (ennreal.add_lt_top.mpr ‚ü®hŒºs, hŒºt‚ü©)) x,
  refine hT_union.trans _,
  refine eventually_eq.trans _ (Lp.coe_fn_add _ _).symm,
  refine eventually_eq.trans _ (eventually_eq.add hTs.symm hTt.symm),
  exact condexp_smul_disjoint_union ùïÇ hm s t hs ht hst hŒºs hŒºt x,
end

lemma T_condexp_disjoint_union (hm : m ‚â§ m0) [@sigma_finite Œ± m (Œº.trim hm)] (s t : set Œ±)
  (hs : measurable_set s) (ht : measurable_set t) (hst : s ‚à© t = ‚àÖ) (hŒºs : Œº s < ‚àû)
  (hŒºt : Œº t < ‚àû) :
  T_condexp E' ùïÇ hm Œº (s ‚à™ t) (hs.union ht)
    = T_condexp E' ùïÇ hm Œº s hs + T_condexp E' ùïÇ hm Œº t ht :=
by { ext1 x, exact T_condexp_fn_disjoint_union ùïÇ hm s t hs ht hst hŒºs hŒºt x, }

lemma T_condexp_smul (hm : m ‚â§ m0) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) (x : E') (c : ùïÇ) :
  T_condexp E' ùïÇ hm Œº s hs (c ‚Ä¢ x) = c ‚Ä¢ T_condexp E' ùïÇ hm Œº s hs x :=
T_condexp_fn_smul ùïÇ hm s hs x c

lemma norm_T_condexp_le (hm : m ‚â§ m0) [@sigma_finite Œ± m (Œº.trim hm)]
  (s : set Œ±) (hs : measurable_set s) :
  ‚à•T_condexp E' ùïÇ hm Œº s hs‚à• ‚â§ (Œº s).to_real :=
begin
  refine continuous_linear_map.op_norm_le_bound _ ennreal.to_real_nonneg (Œª x, _),
  exact norm_T_condexp_fn_le ùïÇ hm Œº s hs x,
end

omit ùïÇ
variables {ùïÇ}

/-- Without a finiteness hypothesis on the measure, the integral of `condexp_L2 ùïÇ hm f - f` on a
`m`-measurable set `s` is equal to 0 if `Œº s < ‚àû`. -/
lemma integral_condexp_L2_sub_eq_of_measure_finite (hm : m ‚â§ m0) {f : Lp E' 2 Œº} {s : set Œ±}
  (hs : @measurable_set Œ± m s) (hŒºs : Œº s < ‚àû) :
  ‚à´ x in s, (condexp_L2_clm ùïÇ hm f x - f x) ‚àÇŒº = 0 :=
begin
  rw [‚Üê neg_eq_zero, ‚Üê integral_neg],
  simp_rw neg_sub,
  haveI : fact (m ‚â§ m0) := ‚ü®hm‚ü©,
  have h_inner_zero : ‚àÄ (g : Lp E' 2 Œº) (hg : g ‚àà Lp_sub E' ùïÇ m 2 Œº),
      inner (f - condexp_L2_clm ùïÇ hm f) g = (0 : ùïÇ),
    from Œª g hg, orthogonal_projection_inner_eq_zero f g hg,
  by_cases h_int_on : integrable_on (f - condexp_L2_clm ùïÇ hm f) s Œº,
  swap, { simp_rw ‚Üê pi.sub_apply f, rw integral_undef h_int_on, },
  refine integral_zero_of_forall_integral_inner_zero _ h_int_on _,
  intro c,
  specialize h_inner_zero (indicator_Lp 2 (hm s hs) c (or.inr hŒºs)) (mem_Lp_sub_indicator_Lp hm hs),
  rw [inner_eq_zero_sym, inner_indicator_Lp] at h_inner_zero,
  rw ‚Üê h_inner_zero,
  refine set_integral_congr_ae (hm s hs) _,
  refine (Lp.coe_fn_sub f (condexp_L2_clm ùïÇ hm f)).mono (Œª x hx hxs, _),
  congr,
  rw [hx, pi.sub_apply, Lp_sub_coe],
end

lemma integral_condexp_L2_eq_‚Ñù [finite_measure Œº] (hm : m ‚â§ m0) {f : Lp ‚Ñù 2 Œº} {s : set Œ±}
  (hs : @measurable_set Œ± m s) :
  ‚à´ x in s, condexp_L2_clm ‚Ñù hm f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº :=
integral_condexp_L2_eq_of_measure_finite_‚Ñù hm hs (measure_lt_top Œº s)

lemma integrable_on_condexp_L2_of_measure_finite (hm : m ‚â§ m0) {s : set Œ±}
  (hs : @measurable_set _ m s) (hŒºs : Œº s < ‚àû) {f : Lp ‚Ñù 2 Œº} (hf : integrable_on f s Œº) :
  integrable_on (condexp_L2_clm ‚Ñù hm f) s Œº :=
begin
  sorry
end

lemma condexp_L2_zero (hm : m ‚â§ m0) (f : Lp E' 2 Œº) (hf : f =·µê[Œº] 0) :
  condexp_L2_clm ùïÇ hm f =·µê[Œº] 0 :=
begin
  have hf_zero : f = 0, by {ext1, exact hf.trans (coe_fn_zero E' 2 Œº).symm, },
  rw [hf_zero, (condexp_L2_clm ùïÇ hm).map_zero],
  exact coe_fn_zero E' 2 Œº,
end

lemma integrable_condexp_L2 (hm : m ‚â§ m0) (f : Lp E' 2 Œº) (hf : integrable f Œº) :
  integrable (condexp_L2_clm ùïÇ hm f) Œº :=
begin
  sorry,
end

/-- Without a finiteness hypothesis on the measure, the integral of `condexp_L2` on a `m`-measurable
set `s` with `Œº s < ‚àû` is equal to the integral of `f` on `s`. -/
lemma integral_condexp_L2_eq_of_measure_finite (hm : m ‚â§ m0) {f : Lp E' 2 Œº}
  (hf_int : integrable f Œº) (h_condexp_int : integrable (condexp_L2_clm ùïÇ hm f) Œº) {s : set Œ±}
  (hs : @measurable_set Œ± m s) (hŒºs : Œº s < ‚àû) :
  ‚à´ x in s, condexp_L2_clm ùïÇ hm f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº :=
begin
  haveI : fact (m ‚â§ m0) := ‚ü®hm‚ü©,
  have h_inner_zero : ‚àÄ (g : Lp E' 2 Œº) (hg : g ‚àà Lp_sub E' ùïÇ m 2 Œº),
      inner (f - condexp_L2_clm ùïÇ hm f) g = (0 : ùïÇ),
    from Œª g hg, orthogonal_projection_inner_eq_zero f g hg,
  suffices h_sub : ‚à´ a in s, (f a - condexp_L2_clm ùïÇ hm f a) ‚àÇŒº = 0,
  { rw [integral_sub (hf_int.restrict s) (h_condexp_int.restrict s), sub_eq_zero] at h_sub,
    exact h_sub.symm, },
  refine integral_zero_of_forall_integral_inner_zero _ ((hf_int.sub h_condexp_int).restrict s) _,
  intro c,
  specialize h_inner_zero (indicator_Lp 2 (hm s hs) c (or.inr hŒºs)) (mem_Lp_sub_indicator_Lp hm hs),
  rw [inner_eq_zero_sym, inner_indicator_Lp] at h_inner_zero,
  rw ‚Üê h_inner_zero,
  refine set_integral_congr_ae (hm s hs) _,
  refine (Lp.coe_fn_sub f (condexp_L2_clm ùïÇ hm f)).mono (Œª x hx hxs, _),
  congr,
  rw [hx, pi.sub_apply, Lp_sub_coe],
end

lemma is_condexp_condexp_L2 (hm : m ‚â§ m0) [finite_measure Œº] (f : Lp E' 2 Œº) :
  is_condexp m ((condexp_L2_clm ùïÇ hm f) : Œ± ‚Üí E') f Œº :=
begin
  have hf_int : integrable f Œº, from Lp.integrable f ennreal.one_le_two,
  have h_condexp_int : integrable (condexp_L2_clm ùïÇ hm f) Œº,
    from Lp.integrable (condexp_L2_clm ùïÇ hm f) ennreal.one_le_two,
  exact (is_condexp_iff_is_condexp'_of_integrable h_condexp_int hf_int).mpr
    (is_condexp'_condexp_L2 hm f),
end

end condexp_L2_clm

section coe_linear_maps

variables [measurable_space Œ±] {Œº : measure Œ±}

lemma L1s_to_L2_add (f g : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G) :
  (mem_‚Ñí2_simple_func_L1 (f+g)).to_Lp ‚áë(f+g)
    = (mem_‚Ñí2_simple_func_L1 f).to_Lp f + (mem_‚Ñí2_simple_func_L1 g).to_Lp g :=
begin
  ext1,
  refine (mem_‚Ñíp.coe_fn_to_Lp _).trans (eventually_eq.trans _ (Lp.coe_fn_add _ _).symm),
  refine (Lp.coe_fn_add _ _).trans _,
  have hf : f.val =·µê[Œº] mem_‚Ñíp.to_Lp f (mem_‚Ñí2_simple_func_L1 f),
  { refine eventually_eq.trans _ (mem_‚Ñíp.coe_fn_to_Lp _).symm,
    simp only [L1.simple_func.coe_coe, subtype.val_eq_coe], },
  have hg : g.val =·µê[Œº] mem_‚Ñíp.to_Lp g (mem_‚Ñí2_simple_func_L1 g),
  { refine eventually_eq.trans _ (mem_‚Ñíp.coe_fn_to_Lp _).symm,
    simp only [L1.simple_func.coe_coe, subtype.val_eq_coe], },
  exact hf.add hg,
end

lemma L1s_to_L2_smul [opens_measurable_space ùïÇ] (c : ùïÇ) (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
  mem_‚Ñíp.to_Lp ‚áë(@has_scalar.smul _ _ L1.simple_func.has_scalar c f)
      (mem_‚Ñí2_simple_func_L1 (@has_scalar.smul _ _ L1.simple_func.has_scalar c f))
    = c ‚Ä¢ (mem_‚Ñíp.to_Lp f (mem_‚Ñí2_simple_func_L1 f)) :=
begin
  ext1,
  refine (mem_‚Ñíp.coe_fn_to_Lp _).trans (eventually_eq.trans _ (Lp.coe_fn_smul _ _).symm),
  refine (Lp.coe_fn_smul _ _).trans _,
  suffices h : ‚áë(f : Lp E 1 Œº) =·µê[Œº] (mem_‚Ñíp.to_Lp ‚áëf _),
    from eventually_eq.fun_comp h (Œª x : E, c ‚Ä¢ x),
  refine eventually_eq.trans _ (mem_‚Ñíp.coe_fn_to_Lp _).symm,
  simp,
end

/-- Linear map coercing a simple function of L1 to L2. -/
variables (ùïÇ)
def L1s_to_L2_lm [opens_measurable_space ùïÇ] : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) ‚Üí‚Çó[ùïÇ] (Œ± ‚Üí‚ÇÇ[Œº] E) :=
{ to_fun := Œª f, mem_‚Ñíp.to_Lp f (mem_‚Ñí2_simple_func_L1 f),
  map_add' := L1s_to_L2_add,
  map_smul' := L1s_to_L2_smul, }
variables {ùïÇ}

lemma L1s_to_L2_coe_fn [opens_measurable_space ùïÇ] (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : L1s_to_L2_lm ùïÇ f =·µê[Œº] f :=
mem_‚Ñíp.coe_fn_to_Lp _

lemma integrable_L1s_to_L2 [opens_measurable_space ùïÇ] (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
  integrable (L1s_to_L2_lm ùïÇ f) Œº :=
(integrable_congr (L1s_to_L2_coe_fn f)).mpr (L1.integrable_coe_fn _)

variables [finite_measure Œº]

lemma L2_to_L1_add (f g : Œ± ‚Üí‚ÇÇ[Œº] G) :
  (mem_‚Ñíp.mem_‚Ñíp_of_exponent_le (Lp.mem_‚Ñíp (f+g)) ennreal.one_le_two).to_Lp ‚áë(f+g)
    = (mem_‚Ñíp.mem_‚Ñíp_of_exponent_le (Lp.mem_‚Ñíp f) ennreal.one_le_two).to_Lp f
      + (mem_‚Ñíp.mem_‚Ñíp_of_exponent_le (Lp.mem_‚Ñíp g) ennreal.one_le_two).to_Lp g :=
begin
  ext1,
  refine (mem_‚Ñíp.coe_fn_to_Lp _).trans (eventually_eq.trans _ (Lp.coe_fn_add _ _).symm),
  refine (Lp.coe_fn_add _ _).trans _,
  have hf : ‚áëf =·µê[Œº] mem_‚Ñíp.to_Lp f
    (mem_‚Ñíp.mem_‚Ñíp_of_exponent_le (Lp.mem_‚Ñíp f) ennreal.one_le_two),
  { exact (mem_‚Ñíp.coe_fn_to_Lp _).symm, },
  have hg : g.val =·µê[Œº] mem_‚Ñíp.to_Lp g
    (mem_‚Ñíp.mem_‚Ñíp_of_exponent_le (Lp.mem_‚Ñíp g) ennreal.one_le_two),
  { exact (mem_‚Ñíp.coe_fn_to_Lp _).symm, },
  exact hf.add hg,
end

lemma L2_to_L1_smul [borel_space ùïÇ] (c : ùïÇ) (f : Œ± ‚Üí‚ÇÇ[Œº] E) :
  (mem_‚Ñíp.mem_‚Ñíp_of_exponent_le (Lp.mem_‚Ñíp (c ‚Ä¢ f)) ennreal.one_le_two).to_Lp ‚áë(c ‚Ä¢ f)
    = c ‚Ä¢ ((mem_‚Ñíp.mem_‚Ñíp_of_exponent_le (Lp.mem_‚Ñíp f) ennreal.one_le_two).to_Lp f) :=
begin
  ext1,
  refine (mem_‚Ñíp.coe_fn_to_Lp _).trans (eventually_eq.trans _ (Lp.coe_fn_smul _ _).symm),
  refine (Lp.coe_fn_smul _ _).trans _,
  suffices h : ‚áëf =·µê[Œº] (mem_‚Ñíp.to_Lp ‚áëf _), from eventually_eq.fun_comp h (Œª x : E, c ‚Ä¢ x),
  exact (mem_‚Ñíp.coe_fn_to_Lp _).symm,
end

lemma continuous_L2_to_L1 : continuous (Œª (f : Œ± ‚Üí‚ÇÇ[Œº] G),
    (mem_‚Ñíp.mem_‚Ñíp_of_exponent_le (Lp.mem_‚Ñíp f) ennreal.one_le_two).to_Lp f) :=
begin
  refine metric.continuous_iff.mpr (Œª f Œµ hŒµ_pos, _),
  simp_rw dist_def,
  by_cases hŒº0 : Œº = 0,
  { simp only [hŒº0, exists_prop, forall_const, gt_iff_lt, ennreal.zero_to_real, snorm_measure_zero],
    exact ‚ü®Œµ, hŒµ_pos, Œª h, h‚ü©, },
  have h_univ_pow_pos : 0 < (Œº set.univ ^ (1 / (2 : ‚Ñù))).to_real,
  { refine ennreal.to_real_pos_iff.mpr ‚ü®_, _‚ü©,
    { have hŒº_univ_pos : 0 < Œº set.univ,
      { refine lt_of_le_of_ne (zero_le _) (ne.symm _),
        rwa [ne.def, measure_theory.measure.measure_univ_eq_zero], },
      exact ennreal.rpow_pos hŒº_univ_pos (measure_ne_top Œº set.univ), },
    { refine ennreal.rpow_ne_top_of_nonneg _ (measure_ne_top Œº set.univ),
      simp [zero_le_one], }, },
  refine ‚ü®Œµ / (Œº set.univ ^ (1/(2 : ‚Ñù))).to_real, div_pos hŒµ_pos h_univ_pow_pos, Œª g hfg, _‚ü©,
  rw lt_div_iff h_univ_pow_pos at hfg,
  refine lt_of_le_of_lt _ hfg,
  rw ‚Üê ennreal.to_real_mul,
  rw ennreal.to_real_le_to_real _ _,
  swap, { rw snorm_congr_ae (Lp.coe_fn_sub _ _).symm, exact Lp.snorm_ne_top _, },
  swap, { rw snorm_congr_ae (Lp.coe_fn_sub _ _).symm,
    refine ennreal.mul_ne_top (Lp.snorm_ne_top _) _,
    exact ennreal.rpow_ne_top_of_nonneg (by simp [zero_le_one]) (measure_ne_top Œº set.univ), },
  refine (le_of_eq _).trans ((snorm_le_snorm_mul_rpow_measure_univ (ennreal.one_le_two)
    ((Lp.ae_measurable g).sub (Lp.ae_measurable f))).trans (le_of_eq _)),
  { refine snorm_congr_ae _,
    exact eventually_eq.sub
      ((Lp.mem_‚Ñíp g).mem_‚Ñíp_of_exponent_le ennreal.one_le_two).coe_fn_to_Lp
      ((Lp.mem_‚Ñíp f).mem_‚Ñíp_of_exponent_le ennreal.one_le_two).coe_fn_to_Lp, },
  { congr,
    simp only [ennreal.one_to_real, ennreal.to_real_bit0, div_one],
    norm_num, },
end

/-- Continuous linear map sending a function of L2 to L1. -/
def L2_to_L1_clm [borel_space ùïÇ] : (Œ± ‚Üí‚ÇÇ[Œº] E) ‚ÜíL[ùïÇ] (Œ± ‚Üí‚ÇÅ[Œº] E) :=
{ to_fun    := Œª f, (mem_‚Ñíp.mem_‚Ñíp_of_exponent_le (Lp.mem_‚Ñíp f) ennreal.one_le_two).to_Lp f,
  map_add'  := L2_to_L1_add,
  map_smul' := L2_to_L1_smul,
  cont      := continuous_L2_to_L1, }

lemma L2_to_L1_coe_fn [borel_space ùïÇ] (f : Œ± ‚Üí‚ÇÇ[Œº] E) : L2_to_L1_clm f =·µê[Œº] f :=
mem_‚Ñíp.coe_fn_to_Lp _

end coe_linear_maps

section condexp_L1s_‚Ñù

variables {m m0 : measurable_space Œ±} (hm : m ‚â§ m0) [complete_space E] {Œº : measure Œ±}
  [borel_space ùïÇ]

variables (ùïÇ)
/-- Conditional expectation as a linear map from the simple functions of L1 to ae_eq_fun. -/
def condexp_L1s_to_ae_eq_fun_lm : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) ‚Üí‚Çó[ùïÇ] (Œ± ‚Üí‚Çò[Œº] E) :=
(Lp_submodule E 2 Œº ùïÇ).subtype.comp ((Lp_sub E ùïÇ m 2 Œº).subtype.comp
  ((condexp_L2_clm ùïÇ hm).to_linear_map.comp (L1s_to_L2_lm ùïÇ)))

lemma condexp_L1s_to_ae_eq_fun_ae_eq_condexp_L2 (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
  condexp_L1s_to_ae_eq_fun_lm ùïÇ hm f =·µê[Œº] condexp_L2_clm ùïÇ hm (L1s_to_L2_lm ùïÇ f) :=
by refl

variables [finite_measure Œº]

lemma is_condexp_condexp_L2_L1s_to_L2 (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') :
  is_condexp m (condexp_L2_clm ùïÇ hm (L1s_to_L2_lm ùïÇ f) : Œ± ‚Üí E') f Œº :=
is_condexp_congr_ae_right' hm (L1s_to_L2_coe_fn f) (is_condexp_condexp_L2 hm _)

lemma is_condexp_condexp_L1s_to_ae_eq_fun (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') :
  is_condexp m ((condexp_L1s_to_ae_eq_fun_lm ùïÇ hm f) : Œ± ‚Üí E') f Œº :=
is_condexp_congr_ae_left' hm (condexp_L1s_to_ae_eq_fun_ae_eq_condexp_L2 ùïÇ hm _).symm
  (is_condexp_condexp_L2_L1s_to_L2 ùïÇ hm f)

lemma integral_condexp_L1s_to_ae_eq_fun (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') {s : set Œ±} (hs : @measurable_set Œ± m s) :
  ‚à´ a in s, (condexp_L1s_to_ae_eq_fun_lm ùïÇ hm f) a ‚àÇŒº = ‚à´ a in s, f a ‚àÇŒº :=
(is_condexp_condexp_L1s_to_ae_eq_fun ùïÇ hm f).2 s hs

include ùïÇ hm

/-- Conditional expectation as a function from the simple functions of L1 to L1. -/
def condexp_L1s_to_L1 (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : Œ± ‚Üí‚ÇÅ[Œº] E :=
begin
  refine ‚ü®condexp_L1s_to_ae_eq_fun_lm ùïÇ hm f, _‚ü©,
  rw [mem_Lp_iff_mem_‚Ñíp, mem_‚Ñíp_one_iff_integrable,
    integrable_congr (condexp_L1s_to_ae_eq_fun_ae_eq_condexp_L2 ùïÇ hm f)],
  exact Lp.integrable _ ennreal.one_le_two,
end

lemma condexp_L1s_to_L1_coe (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
  (condexp_L1s_to_L1 ùïÇ hm f : Œ± ‚Üí‚Çò[Œº] E) = condexp_L1s_to_ae_eq_fun_lm ùïÇ hm f :=
rfl

lemma condexp_L1s_to_L1_ae_eq_condexp_L1s_to_ae_eq_fun (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
  condexp_L1s_to_L1 ùïÇ hm f =·µê[Œº] condexp_L1s_to_ae_eq_fun_lm ùïÇ hm f :=
begin
  sorry
end

lemma condexp_L1s_to_L1_add (f g : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
  condexp_L1s_to_L1 ùïÇ hm (f + g) = condexp_L1s_to_L1 ùïÇ hm f + condexp_L1s_to_L1 ùïÇ hm g :=
begin
  refine subtype.ext _,
  push_cast,
  simp_rw condexp_L1s_to_L1_coe,
  exact (condexp_L1s_to_ae_eq_fun_lm ùïÇ hm).map_add _ _,
end

lemma condexp_L1s_to_L1_smul (c : ùïÇ) (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) :
  condexp_L1s_to_L1 ùïÇ hm (c ‚Ä¢ f) = c ‚Ä¢ condexp_L1s_to_L1 ùïÇ hm f :=
begin
  refine subtype.ext _,
  simp_rw condexp_L1s_to_L1_coe,
  exact (condexp_L1s_to_ae_eq_fun_lm ùïÇ hm).map_smul _ _,
end

/-- Conditional expectation as a linear map from the simple functions of L1 to L1. -/
def condexp_L1s : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) ‚Üí‚Çó[ùïÇ] (Œ± ‚Üí‚ÇÅ[Œº] E) :=
{ to_fun := Œª f, condexp_L1s_to_L1 ùïÇ hm f,
  map_add' := condexp_L1s_to_L1_add ùïÇ hm,
  map_smul' := condexp_L1s_to_L1_smul ùïÇ hm, }

lemma is_condexp_condexp_L1s (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') : is_condexp m (condexp_L1s ùïÇ hm f) f Œº :=
is_condexp_congr_ae_left' hm (condexp_L1s_to_L1_ae_eq_condexp_L1s_to_ae_eq_fun ùïÇ hm _).symm
  (is_condexp_condexp_L2_L1s_to_L2 ùïÇ hm f)

lemma integral_condexp_L1s (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') {s : set Œ±} (hs : @measurable_set Œ± m s) :
  ‚à´ a in s, (condexp_L1s ùïÇ hm f) a ‚àÇŒº = ‚à´ a in s, f a ‚àÇŒº :=
(is_condexp_condexp_L1s ùïÇ hm f).2 s hs
omit ùïÇ hm
variables {ùïÇ}

lemma condexp_L1s_nonneg {f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù} (hf : 0 ‚â§·µê[Œº] f) : 0 ‚â§·µê[Œº] condexp_L1s ‚Ñù hm f :=
is_condexp.nonneg hm hf (is_condexp_condexp_L1s ‚Ñù hm f) (Lp.integrable _ le_rfl)

lemma condexp_L1s_nonpos {f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù} (hf : f ‚â§·µê[Œº] 0) : condexp_L1s ‚Ñù hm f ‚â§·µê[Œº] 0 :=
is_condexp.nonpos hm hf (is_condexp_condexp_L1s ‚Ñù hm f) (Lp.integrable _ le_rfl)

lemma condexp_L1s_mono {f g : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù} (hfg : f ‚â§·µê[Œº] g) :
  condexp_L1s ‚Ñù hm f ‚â§·µê[Œº] condexp_L1s ‚Ñù hm g :=
is_condexp.mono hm hfg (is_condexp_condexp_L1s ‚Ñù hm f) (Lp.integrable _ le_rfl)
  (Lp.integrable _ le_rfl) (is_condexp_condexp_L1s ‚Ñù hm g) (Lp.integrable _ le_rfl)
  (Lp.integrable _ le_rfl)

lemma condexp_L1s_R_jensen_norm (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) :
  ‚àÄ·µê x ‚àÇŒº, ‚à•condexp_L1s ‚Ñù hm f x‚à•
    ‚â§ condexp_L1s ‚Ñù hm (L1.simple_func.map (Œª x, ‚à•x‚à•) f norm_zero) x :=
begin
  have h := is_condexp_congr_ae_right' hm (L1.simple_func.map_coe (Œª (x : ‚Ñù), ‚à•x‚à•) f norm_zero)
    (is_condexp_condexp_L1s ‚Ñù hm (L1.simple_func.map (Œª (x : ‚Ñù), ‚à•x‚à•) f norm_zero)),
  exact is_condexp.jensen_norm hm (is_condexp_condexp_L1s ‚Ñù hm f) h
      (Lp.integrable _ le_rfl) (Lp.integrable _ le_rfl) (Lp.integrable _ le_rfl),
end

lemma norm_condexp_L1s_le_R (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) : ‚à•condexp_L1s ‚Ñù hm f‚à• ‚â§ ‚à•f‚à• :=
begin
  simp_rw [L1.simple_func.norm_eq, norm_def],
  rw ennreal.to_real_le_to_real (Lp.snorm_ne_top _) (Lp.snorm_ne_top _),
  simp_rw snorm_one_eq_lintegral_nnnorm,
  let F := Œª x : ‚Ñù, ‚à•x‚à•,
  have h_left : ‚à´‚Åª a, (nnnorm (((condexp_L1s ‚Ñù hm) f) a) : ‚Ñù‚â•0‚àû) ‚àÇŒº
      = ‚à´‚Åª a, ennreal.of_real (‚à•((condexp_L1s ‚Ñù hm) f) a‚à•) ‚àÇŒº,
    by { congr, ext1 x, rw ‚Üê of_real_norm_eq_coe_nnnorm, },
  have h_right : ‚à´‚Åª a, (nnnorm ((f : Lp ‚Ñù 1 Œº) a) : ‚Ñù‚â•0‚àû) ‚àÇŒº
      = ‚à´‚Åª a, ennreal.of_real (‚à•(f : Lp ‚Ñù 1 Œº) a‚à•) ‚àÇŒº,
    by { congr, ext1 x, rw ‚Üê of_real_norm_eq_coe_nnnorm, },
  rw [h_left, h_right],
  have h_le : ‚à´‚Åª a, ennreal.of_real (‚à•((condexp_L1s ‚Ñù hm) f) a‚à•) ‚àÇŒº
    ‚â§ ‚à´‚Åª a, ennreal.of_real (condexp_L1s ‚Ñù hm (L1.simple_func.map F f norm_zero) a) ‚àÇŒº,
  { refine lintegral_mono_ae ((condexp_L1s_R_jensen_norm hm f).mono (Œª x hx, _)),
    rwa ennreal.of_real_le_of_real_iff ((norm_nonneg _).trans hx), },
  refine h_le.trans _,
  have h_integral_eq := integral_condexp_L1s ‚Ñù hm (L1.simple_func.map F f norm_zero)
    (@measurable_set.univ Œ± m),
  rw [integral_univ, integral_univ] at h_integral_eq,
  rw ‚Üê (ennreal.to_real_le_to_real _ _),
  swap, { have h := Lp.snorm_ne_top (condexp_L1s ‚Ñù hm (L1.simple_func.map F f norm_zero)),
    rw snorm_one_eq_lintegral_nnnorm at h,
    simp_rw [‚Üê of_real_norm_eq_coe_nnnorm, ‚Üê lt_top_iff_ne_top] at h,
    refine (lt_of_le_of_lt _ h).ne,
    refine lintegral_mono_ae (eventually_of_forall (Œª x, ennreal.of_real_le_of_real _)),
    rw real.norm_eq_abs,
    exact le_abs_self _, },
  swap, { simp_rw of_real_norm_eq_coe_nnnorm,
    have h := Lp.snorm_ne_top (f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù),
    rw snorm_one_eq_lintegral_nnnorm at h,
    exact h, },
  rw [‚Üê integral_eq_lintegral_of_nonneg_ae _ (Lp.ae_measurable _),
    ‚Üê integral_eq_lintegral_of_nonneg_ae, h_integral_eq,
    integral_congr_ae (L1.simple_func.map_coe F f norm_zero)],
  { simp only [L1.simple_func.coe_coe], },
  { exact eventually_of_forall (by simp [norm_nonneg]), },
  { exact measurable.comp_ae_measurable measurable_norm (Lp.ae_measurable _), },
  { refine condexp_L1s_nonneg hm ((L1.simple_func.map_coe F f norm_zero).mono (Œª x hx, _)),
    rw [hx, pi.zero_apply],
    simp only [norm_nonneg], },
end

lemma norm_condexp_L1s_indicator_L1s_R_le {s : set Œ±} (hs : measurable_set s)
  (c : ‚Ñù) (hŒºsc : c = 0 ‚à® Œº s < ‚àû) :
  ‚à•condexp_L1s ‚Ñù hm (indicator_L1s hs c hŒºsc)‚à• ‚â§ ‚à•c‚à• * (Œº s).to_real :=
(norm_condexp_L1s_le_R hm _).trans norm_indicator_L1s.le

end condexp_L1s_‚Ñù

section condexp_def

variables {m m0 : measurable_space Œ±} (hm : m ‚â§ m0) {Œº : measure Œ±}

variables (ùïÇ)
include ùïÇ hm
lemma is_condexp_‚Ñù_smul_const {s : set Œ±} (hs : measurable_set s) (c : E') (hŒºs : Œº s < ‚àû)
  {f_ind : Œ± ‚Üí ‚Ñù} (h_condexp : is_condexp m f_ind (indicator_L1s hs (1 : ‚Ñù) (or.inr hŒºs)) Œº) :
  is_condexp m (Œª x, f_ind x ‚Ä¢ c) (indicator_L1s hs c (or.inr hŒºs)) Œº :=
begin
  obtain ‚ü®h_meas, h_int_eq‚ÇÅ‚ü© := h_condexp,
  refine ‚ü®ae_measurable'.smul_const h_meas c, Œª t ht, _‚ü©,
  have h_smul : ‚à´ a in t, (indicator_L1s hs c (or.inr hŒºs)) a ‚àÇŒº
      = ‚à´ a in t, ((indicator_L1s hs (1 : ‚Ñù) (or.inr hŒºs)) a) ‚Ä¢ c ‚àÇŒº,
    from set_integral_congr_ae (hm t ht) ((indicator_L1s_eq_smul c hŒºs).mono (Œª x hx hxs, hx)),
  refine eq.trans _ h_smul.symm,
  rw [integral_smul_const, integral_smul_const, h_int_eq‚ÇÅ t ht],
end
omit ùïÇ hm

lemma is_condexp.smul_const {f g : Œ± ‚Üí ‚Ñù} (hfg : is_condexp m f g Œº) (c : G') :
  is_condexp m (Œª x, f x ‚Ä¢ c) (Œª x, g x ‚Ä¢ c) Œº :=
‚ü®ae_measurable'.smul_const hfg.1 c, Œª s hs,
  by rw [integral_smul_const, integral_smul_const, hfg.2 s hs]‚ü©

lemma right_of_or_not_left {p q : Prop} (h_or : p ‚à® q) (h_not : ¬¨p) : q :=
begin
  cases h_or,
  { exact absurd h_or h_not, },
  { exact h_or, },
end

def piece (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G) (y : G) : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G :=
  indicator_L1s (L1.simple_func.measurable_set_fiber f y) y
    (L1.simple_func.zero_or_finite_fiber f y)

lemma piece_eq_indicator_L1s (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G) (y : G) :
  piece f y = indicator_L1s (L1.simple_func.measurable_set_fiber f y) y
    (L1.simple_func.zero_or_finite_fiber f y) :=
rfl

lemma L1.simple_func_eq_sum_pieces (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G) :
  f = ‚àë y in L1.simple_func.range_nonzero f, piece f y :=
L1.simple_func.simple_func_eq_sum_indicator_L1s f

def L1s_extension_fun [normed_space ‚Ñù G] (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G) :
  Œ± ‚Üí‚ÇÅ[Œº] G :=
begin
  haveI : decidable_eq G := classical.dec_eq _,
  exact ‚àë y in L1.simple_func.range_nonzero f,
    dite (y = 0) (Œª h, (0 : Œ±‚Üí‚ÇÅ[Œº] G))
    (Œª h, L1.indicator_fun_smul_const (T
      (indicator_L1s (L1.simple_func.measurable_set_fiber f y) (1 : ‚Ñù)
        (or.inr (L1.simple_func.finite_fiber f y h)))) y)
end

lemma L1s_extension_fun_def [normed_space ‚Ñù G] [decidable_eq G]
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G) :
  L1s_extension_fun T f = ‚àë y in L1.simple_func.range_nonzero f,
    dite (y = 0) (Œª h, (0 : Œ±‚Üí‚ÇÅ[Œº] G))
    (Œª h, L1.indicator_fun_smul_const (T
      (indicator_L1s (L1.simple_func.measurable_set_fiber f y) (1 : ‚Ñù)
        (or.inr (L1.simple_func.finite_fiber f y h)))) y) :=
by { simp only [L1s_extension_fun], congr, ext1 y, congr, }

lemma finset.eq_empty_or_singleton_of_subset_singleton (s : finset Œ≥) (c : Œ≥) (hsc : s ‚äÜ {c}) :
  s = ‚àÖ ‚à® s = {c} :=
begin
  by_cases h_empty : s = ‚àÖ,
  { exact or.inl h_empty, },
  right,
  refine finset.subset.antisymm hsc _,
  rw finset.eq_empty_iff_forall_not_mem at h_empty,
  push_neg at h_empty,
  obtain ‚ü®y, hy‚ü© := h_empty,
  have hyc : y = c, from finset.mem_singleton.mp (finset.mem_of_subset hsc hy),
  rw hyc at hy,
  intros y0 hy0,
  rw finset.mem_singleton at hy0,
  rwa hy0,
end

@[simp] lemma L1s_extension_fun_zero [normed_space ‚Ñù G] (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) :
  L1s_extension_fun T (0 : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G) = 0 :=
by { rw [L1s_extension_fun, L1.simple_func.range_nonzero_zero, finset.sum_empty], }

lemma L1s_extension_indicator_of_ne_zero [normed_space ‚Ñù G] (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  {s : set Œ±} (hs : measurable_set s) (hŒºs : Œº s < ‚àû) (c : G) (hc0 : c ‚â† 0) :
  L1s_extension_fun T (indicator_L1s hs c (or.inr hŒºs)) =
    L1.indicator_fun_smul_const (T (indicator_L1s hs (1 : ‚Ñù) (or.inr hŒºs))) c :=
begin
  by_cases hŒºs0 : Œº s = 0,
  { simp_rw L1.simple_func.indicator_L1s_set_measure_zero hŒºs0, simp, },
  rw ‚Üê ne.def at hŒºs0,
  have hŒºs_pos : 0 < Œº s, from lt_of_le_of_ne (zero_le _) hŒºs0.symm,
  rw L1s_extension_fun,
  rw L1.simple_func.range_nonzero_indicator_L1s_eq hs c (or.inr hŒºs) hŒºs_pos hc0,
  rw finset.sum_singleton,
  simp only [hc0, dif_neg, not_false_iff],
  congr' 2,
  exact L1.simple_func.indicator_L1s_congr_ae _ _ _ _ _
    (L1.simple_func.indicator_L1s_fiber_ae_eq_self hs c (or.inr hŒºs) hc0),
end

--lemma L1.simple_func.nmem_range_add_iff (f g : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G) [decidable_eq G] (y : G) (hŒº : Œº ‚â† 0) :
--  y ‚àâ (to_simple_func (f + g)).range ‚Üî Œº ((to_simple_func f + to_simple_func g) ‚Åª¬π' {y}) = 0 :=
--begin
--  have h_add_ae : ‚áëf + ‚áëg =·µê[Œº] to_simple_func f + to_simple_func g,
--  { exact (eventually_eq.add (L1.simple_func.to_simple_func_eq_to_fun _)
--      (L1.simple_func.to_simple_func_eq_to_fun _)).symm, },
--  rw [L1.simple_func.to_simple_func_mem_range_iff _ hŒº,
--    measure_congr (L1.simple_func.preimage_congr_ae (L1.simple_func.coe_fn_add _ _) _),
--    measure_congr (L1.simple_func.preimage_congr_ae h_add_ae _), not_not],
--end

--lemma L1.simple_func.range_add_subset_add_range (f g : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G) [decidable_eq G] :
--  (to_simple_func (f + g)).range ‚äÜ (to_simple_func f).range + (to_simple_func g).range :=
--finset.subset.trans (L1.simple_func.range_add_subset f g)
--  (simple_func.range_add_subset_add_range _ _)

lemma add_sum (op : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') ‚Üí Œ≥) [add_comm_monoid Œ≥]
  (h_op_add : ‚àÄ (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') (s : set Œ±) (hs : measurable_set s) (cs : F')
    (hŒºs : cs = 0 ‚à® Œº s < ‚àû),
    op (f + indicator_L1s hs cs hŒºs) = op f + op (indicator_L1s hs cs hŒºs))
  (sF' : finset F') (S : F' ‚Üí set Œ±) (hS : ‚àÄ y, measurable_set (S y)) (cS : F' ‚Üí F')
  (hŒºS : ‚àÄ y, cS y = 0 ‚à® Œº (S y) < ‚àû)
  (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') :
  op (f + ‚àë y in sF', indicator_L1s (hS y) (cS y) (hŒºS y))
    = op f + ‚àë y in sF', op (indicator_L1s (hS y) (cS y) (hŒºS y)) :=
begin
  classical,
  refine finset.induction _ _ sF',
  { simp, },
  intros y s hys hops,
  rw [finset.sum_insert hys, add_comm (indicator_L1s (hS y) (cS y) (hŒºS y)), ‚Üê add_assoc, h_op_add,
    hops, finset.sum_insert hys, add_comm ( op (indicator_L1s (hS y) (cS y) (hŒºS y))), ‚Üê add_assoc],
end

lemma to_simple_func_add_indicator_L1s_disjoint (s : set Œ±) (hs : measurable_set s) (cs : F')
  (hŒºsc : cs = 0 ‚à® Œº s < ‚àû) (t : set Œ±) (ht : measurable_set t) (ct : F')
  (hŒºtc : ct = 0 ‚à® Œº t < ‚àû) (hst : disjoint s t) :
  to_simple_func (indicator_L1s hs cs hŒºsc + indicator_L1s ht ct hŒºtc)
    = to_simple_func (indicator_L1s hs cs hŒºsc) + to_simple_func (indicator_L1s ht ct hŒºtc) :=
begin
  by_cases hŒºs_eq_zero : Œº s = 0,
  { rw L1.simple_func.indicator_L1s_set_measure_zero hŒºs_eq_zero,
    rw L1.simple_func.to_simple_func_zero,
    simp_rw zero_add, },
  rw ‚Üê ne.def at hŒºs_eq_zero,
  have hŒºs_pos : 0 < Œº s, from lt_of_le_of_ne (zero_le _) hŒºs_eq_zero.symm,
  by_cases hŒºt_eq_zero : Œº t = 0,
  { rw L1.simple_func.indicator_L1s_set_measure_zero hŒºt_eq_zero,
    rw L1.simple_func.to_simple_func_zero,
    simp_rw add_zero, },
  rw ‚Üê ne.def at hŒºt_eq_zero,
  have hŒºt_pos : 0 < Œº t, from lt_of_le_of_ne (zero_le _) hŒºt_eq_zero.symm,
  rw L1.simple_func.to_simple_func_indicator hs cs hŒºsc hŒºs_pos,
  rw L1.simple_func.to_simple_func_indicator ht ct hŒºtc hŒºt_pos,
  rw L1.simple_func.to_simple_func_def,
  sorry,
end

lemma op_eq_sum_op_pieces (op : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') ‚Üí Œ≥) [add_comm_monoid Œ≥]
  (h_op_add : ‚àÄ (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') (s : set Œ±) (hs : measurable_set s) (cs : F')
    (hŒºs : cs = 0 ‚à® Œº s < ‚àû),
    op (f + indicator_L1s hs cs hŒºs) = op f + op (indicator_L1s hs cs hŒºs))
  (h_op_zero : op 0 = 0)
  (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') :
  op f = ‚àë y in (L1.simple_func.range_nonzero f), op (piece f y) :=
begin
  nth_rewrite 0 L1.simple_func_eq_sum_pieces f,
  suffices h_zero_add : op (0 + ‚àë (y : F') in (L1.simple_func.range_nonzero f), piece f y)
    = op 0 + ‚àë (y : F') in (L1.simple_func.range_nonzero f), op (piece f y),
  { rwa [zero_add, h_op_zero, zero_add] at h_zero_add, },
  simp_rw piece_eq_indicator_L1s,
  rw add_sum op h_op_add,
end

lemma add_of_indicator_add (op : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') ‚Üí Œ≥) [add_comm_monoid Œ≥]
  (h_op_add : ‚àÄ (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') (s : set Œ±) (hs : measurable_set s) (cs : F')
    (hŒºs : cs = 0 ‚à® Œº s < ‚àû),
    op (f + indicator_L1s hs cs hŒºs) = op f + op (indicator_L1s hs cs hŒºs))
  (h_op_zero : op 0 = 0)
  (f g : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') :
  op (f + g) = op f + op g :=
begin
  nth_rewrite 0 L1.simple_func_eq_sum_pieces g,
  simp_rw piece_eq_indicator_L1s,
  rw add_sum op h_op_add,
  rw op_eq_sum_op_pieces op h_op_add h_op_zero g,
  simp_rw piece_eq_indicator_L1s,
end

--lemma to_simple_func_add_indicator_of_disjoint [decidable_eq G'] (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G') (s : set Œ±)
--  (hs : measurable_set s) (c : G') (hŒºsc : c = 0 ‚à® Œº s < ‚àû)
--  (hs_disj : ‚àÄ y ‚àà (to_simple_func f).range, disjoint s (to_simple_func f ‚Åª¬π' {y})) :
--  ‚àÉ (t : set Œ±) (ht : measurable_set t) (hst : s =·µê[Œº] t),
--  to_simple_func (f + indicator_L1s hs c hŒºsc) = to_simple_func f + indicator_simple_func ht c :=
--begin
--  sorry,
--end

lemma ennreal.eq_zero_or_pos (x : ‚Ñù‚â•0‚àû) : x = 0 ‚à® 0 < x := sorry

lemma finset.disjoint_iff [decidable_eq Œ≥] (s t : finset Œ≥) : disjoint s t ‚Üî s ‚à© t ‚äÜ ‚àÖ := iff.rfl

lemma L1s_extension_fun_add_indicator_L1s_of_disjoint_of_nmem (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G') (s : set Œ±) (hs : measurable_set s) (c : G') (hŒºsc : c = 0 ‚à® Œº s < ‚àû)
  (hs_disj : ‚àÄ y ‚â† 0, disjoint (f ‚Åª¬π' {y}) s) (hc0 : c ‚â† 0) (hŒºs : 0 < Œº s)
  (hc_nmem : c ‚àâ L1.simple_func.range_nonzero f) :
  L1s_extension_fun T (f + indicator_L1s hs c hŒºsc)
    = L1s_extension_fun T f + L1s_extension_fun T (indicator_L1s hs c hŒºsc) :=
begin
  classical,
  simp_rw L1s_extension_fun_def T,
  rw [L1.simple_func.range_nonzero_add_indicator_of_disjoint f hs c hŒºsc hs_disj,
    L1.simple_func.range_nonzero_indicator_L1s_eq hs c hŒºsc hŒºs hc0, finset.sum_singleton,
    finset.sum_union],
  swap,
  { rw finset.disjoint_iff,
    intros x hx,
    rw [finset.mem_inter, finset.mem_singleton] at hx,
    cases hx with hx hx_eq_c,
    rw hx_eq_c at hx,
    exact absurd hx hc_nmem, },
  rw finset.sum_singleton, -- it looks like rfl in the goal view, but preimages in _ are different.
  have h_preim_f_add : ‚àÄ x ‚àà L1.simple_func.range_nonzero f,
    ‚áë(f + indicator_L1s hs c hŒºsc) ‚Åª¬π' {x} =·µê[Œº] f ‚Åª¬π' {x},
  { sorry, },
  have h_preim_f_add_c : ‚áë(f + indicator_L1s hs c hŒºsc) ‚Åª¬π' {c}
    =·µê[Œº] (indicator_L1s hs c hŒºsc) ‚Åª¬π' {c},
  { sorry, },
  sorry,
end

lemma L1s_extension_fun_add_indicator_L1s_of_disjoint_of_mem (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G') (s : set Œ±) (hs : measurable_set s) (c : G') (hŒºsc : c = 0 ‚à® Œº s < ‚àû)
  (hs_disj : ‚àÄ y ‚â† 0, disjoint (f ‚Åª¬π' {y}) s) (hc0 : c ‚â† 0) (hŒºs : 0 < Œº s)
  (hc_nmem : c ‚àà L1.simple_func.range_nonzero f) :
  L1s_extension_fun T (f + indicator_L1s hs c hŒºsc)
    = L1s_extension_fun T f + L1s_extension_fun T (indicator_L1s hs c hŒºsc) :=
begin
  classical,
  simp_rw L1s_extension_fun_def T,
  rw [L1.simple_func.range_nonzero_add_indicator_of_disjoint f hs c hŒºsc hs_disj,
    L1.simple_func.range_nonzero_indicator_L1s_eq hs c hŒºsc hŒºs hc0, finset.sum_singleton],
  have h_union_eq : L1.simple_func.range_nonzero f ‚à™ {c} = L1.simple_func.range_nonzero f,
  { sorry, },
  sorry,
end

lemma L1s_extension_fun_add_indicator_L1s_of_disjoint (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G') (s : set Œ±) (hs : measurable_set s) (c : G') (hŒºsc : c = 0 ‚à® Œº s < ‚àû)
  (hs_disj : ‚àÄ y ‚â† 0, disjoint (f ‚Åª¬π' {y}) s) :
  L1s_extension_fun T (f + indicator_L1s hs c hŒºsc)
    = L1s_extension_fun T f + L1s_extension_fun T (indicator_L1s hs c hŒºsc) :=
begin
  classical,
  by_cases hc0 : c = 0,
  { simp_rw [hc0, L1.simple_func.indicator_L1s_zero, L1s_extension_fun_zero, add_zero], },
  cases ennreal.eq_zero_or_pos (Œº s) with hŒºs hŒºs,
  { simp_rw [L1.simple_func.indicator_L1s_set_measure_zero hŒºs, L1s_extension_fun_zero,
      add_zero], },
  by_cases hc_mem : c ‚àà L1.simple_func.range_nonzero f,
  { exact L1s_extension_fun_add_indicator_L1s_of_disjoint_of_mem T f s hs c hŒºsc hs_disj hc0 hŒºs
      hc_mem, },
  { exact L1s_extension_fun_add_indicator_L1s_of_disjoint_of_nmem T f s hs c hŒºsc hs_disj hc0 hŒºs
      hc_mem, },
end

lemma L1s_extension_fun_add_indicator_L1s_of_subset (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G') (s : set Œ±) (hs : measurable_set s) (c : G') (hŒºsc : c = 0 ‚à® Œº s < ‚àû)
  (hs_subset : ‚àÉ y ‚àà (L1.simple_func.range_nonzero f), s ‚äÜ (to_simple_func f ‚Åª¬π' {y})) :
  L1s_extension_fun T (f + indicator_L1s hs c hŒºsc)
    = L1s_extension_fun T f + L1s_extension_fun T (indicator_L1s hs c hŒºsc) :=
begin
  classical,
  rcases hs_subset with ‚ü®ys, hys, hs_subset‚ü©,
  have h_eq_sum : indicator_L1s hs c hŒºsc = ‚àë y in L1.simple_func.range_nonzero f,
    ite (ys = y) (indicator_L1s hs c hŒºsc) 0,
  { rw finset.sum_ite_eq,
    simp [hys], },
  nth_rewrite 0 L1.simple_func_eq_sum_pieces f,
  nth_rewrite 0 h_eq_sum,
  rw ‚Üê finset.sum_add_distrib,
  classical,
  have h_eq_sum' : L1s_extension_fun T (indicator_L1s hs c hŒºsc)
    = ‚àë y in L1.simple_func.range_nonzero f,
      ite (ys = y) (L1s_extension_fun T (indicator_L1s hs c hŒºsc)) 0,
  { rw finset.sum_ite_eq,
    simp [hys], },
  rw L1s_extension_fun_def T f,
  rw h_eq_sum',
  rw ‚Üê finset.sum_add_distrib,
  sorry,
end

lemma L1s_extension_fun_add_indicator_L1s (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G')
  (s : set Œ±) (hs : measurable_set s) (c : G') (hŒºsc : c = 0 ‚à® Œº s < ‚àû) :
  L1s_extension_fun T (f + indicator_L1s hs c hŒºsc)
    = L1s_extension_fun T f + L1s_extension_fun T (indicator_L1s hs c hŒºsc) :=
begin
  by_cases hc0 : c = 0,
  { simp_rw [hc0, L1.simple_func.indicator_L1s_zero Œº _, add_zero],
    rw [L1s_extension_fun_zero T, add_zero], },
  classical,
  have hŒºs := right_of_or_not_left hŒºsc hc0,
  rw L1s_extension_indicator_of_ne_zero T hs hŒºs c hc0,
  rw L1s_extension_fun,
  rw L1s_extension_fun,
  sorry,
end

lemma L1s_extension_fun_add (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  (f g : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G') :
  L1s_extension_fun T (f + g) = L1s_extension_fun T f + L1s_extension_fun T g :=
begin
  refine add_of_indicator_add (L1s_extension_fun T) _ (L1s_extension_fun_zero T) _ _,
  exact L1s_extension_fun_add_indicator_L1s T,
end

def L1s_extension_hom (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) :
  (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] G') ‚Üí+ (Œ± ‚Üí‚ÇÅ[Œº] G') :=
{ to_fun := L1s_extension_fun T,
  map_zero' := L1s_extension_fun_zero T,
  map_add' := L1s_extension_fun_add T, }

lemma L1s_extension_fun_smul_indicator_L1s [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F']
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  {s : set Œ±} (hs : measurable_set s) (x : F') (hŒºsx : x = 0 ‚à® Œº s < ‚àû) (c : ùïÇ) :
  L1s_extension_fun T (c ‚Ä¢ (indicator_L1s hs x hŒºsx))
    = c ‚Ä¢ L1s_extension_fun T (indicator_L1s hs x hŒºsx) :=
begin
  rw const_smul_indicator_L1s,
  by_cases hx0 : x = 0,
  { simp_rw [hx0, smul_zero, L1.simple_func.indicator_L1s_zero, L1s_extension_fun_zero,
      smul_zero], },
  by_cases hc0 : c = 0,
  { simp_rw [hc0, zero_smul, L1.simple_func.indicator_L1s_zero, L1s_extension_fun_zero], },
  have hcx : c ‚Ä¢ x ‚â† 0, from smul_ne_zero.mpr ‚ü®hc0, hx0‚ü©,
  have hŒºs := right_of_or_not_left hŒºsx hx0,
  rw [L1s_extension_indicator_of_ne_zero T hs hŒºs (c ‚Ä¢ x) hcx,
    L1s_extension_indicator_of_ne_zero T hs hŒºs x hx0, const_smul_indicator_fun_smul_const],
end

lemma L1s_extension_fun_smul [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F']
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) (c : ùïÇ) (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') :
  L1s_extension_fun T (c ‚Ä¢ f) = c ‚Ä¢ L1s_extension_fun T f :=
begin
  change L1s_extension_hom T (c ‚Ä¢ f) = c ‚Ä¢ L1s_extension_hom T f,
  rw [L1.simple_func.simple_func_eq_sum_indicator_L1s f, finset.smul_sum],
  simp_rw @add_monoid_hom.map_sum F' (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') (Œ± ‚Üí‚ÇÅ[Œº] F') _ _ (L1s_extension_hom T) _
    (L1.simple_func.range_nonzero f),
  rw finset.smul_sum,
  congr,
  ext1 x,
  exact L1s_extension_fun_smul_indicator_L1s ùïÇ T _ x _ c,
end

variables (F')
def L1s_extension_lm [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F'] (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) :
  (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') ‚Üí‚Çó[ùïÇ] (Œ± ‚Üí‚ÇÅ[Œº] F') :=
{ to_fun := L1s_extension_fun T,
  map_add' := Œª f g, L1s_extension_fun_add T f g,
  map_smul' := Œª c f, L1s_extension_fun_smul ùïÇ T c f,  }
variables {F'}

lemma L1s_extension_lm_coe [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F']
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) :
  ‚áë(L1s_extension_lm F' ùïÇ T) = L1s_extension_fun T :=
rfl

lemma L1s_extension_lm_zero [nonempty Œ±] [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F']
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) :
  L1s_extension_lm F' ùïÇ T 0 = 0 :=
by { rw L1s_extension_lm_coe, exact L1s_extension_fun_zero T, }

lemma L1s_extension_indicator [nonempty Œ±] [borel_space ùïÇ] (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  {s : set Œ±} (hs : measurable_set s) (hŒºs : Œº s < ‚àû) (c : F') :
  L1s_extension_fun T (indicator_L1s hs c (or.inr hŒºs)) =
    L1.indicator_fun_smul_const (T (indicator_L1s hs (1 : ‚Ñù) (or.inr hŒºs))) c :=
begin
  by_cases hc0 : c = 0,
  { rw [hc0, L1.simple_func.indicator_L1s_zero Œº hs, L1.indicator_fun_smul_const_zero],
    exact L1s_extension_fun_zero T, },
  exact L1s_extension_indicator_of_ne_zero T hs hŒºs c hc0,
end

lemma norm_L1s_extension_indicator [nonempty Œ±] [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F']
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  {s : set Œ±} (hs : measurable_set s) (c : F') (hŒºsc : c = 0 ‚à® Œº s < ‚àû) :
  ‚à•L1s_extension_lm F' ùïÇ T (indicator_L1s hs c hŒºsc)‚à• ‚â§ ‚à•T‚à• * ‚à•indicator_L1s hs c hŒºsc‚à• :=
begin
  by_cases hc : c = 0,
  { simp_rw hc,
    simp_rw L1.simple_func.indicator_L1s_zero,
    rw [L1s_extension_lm_zero, _root_.norm_zero, _root_.norm_zero, mul_zero], },
  have hŒºs : Œº s < ‚àû, from right_of_or_not_left hŒºsc hc,
  rw [L1s_extension_lm_coe, L1s_extension_indicator ùïÇ T hs hŒºs c, norm_def,
    snorm_congr_ae (L1.indicator_fun_smul_const_coe_fn _ c),
    snorm_eq_snorm' one_ne_zero ennreal.coe_ne_top, snorm'],
  simp_rw [ennreal.one_to_real, div_one, ennreal.rpow_one, nnnorm_smul, ennreal.coe_mul],
  rw [lintegral_mul_const _ (Lp.measurable _).nnnorm.ennreal_coe, ennreal.to_real_mul, mul_comm,
    ‚Üê of_real_norm_eq_coe_nnnorm, ennreal.to_real_of_real (norm_nonneg _)],
  have hT' := continuous_linear_map.le_op_norm T (indicator_L1s hs (1 : ‚Ñù) (or.inr hŒºs)),
  rw [norm_def, snorm_eq_snorm' one_ne_zero ennreal.coe_ne_top, snorm'] at hT',
  simp_rw [ennreal.one_to_real, div_one, ennreal.rpow_one] at hT',
  rw [norm_indicator_L1s, real.norm_eq_abs, abs_one, one_mul] at hT',
  rw [norm_indicator_L1s, ‚Üê mul_assoc, mul_comm (‚à•T‚à•), mul_assoc],
  exact mul_le_mul le_rfl hT' ennreal.to_real_nonneg (norm_nonneg _),
  exact borel_space.opens_measurable,
end

lemma norm_L1s_extension [nonempty Œ±] [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F']
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') :
  ‚à•L1s_extension_lm F' ùïÇ T f‚à• ‚â§ ‚à•T‚à• * ‚à•f‚à• :=
begin
  rw [L1.simple_func.norm_eq_integral, simple_func.map_integral _ _ (L1.simple_func.integrable _)],
  swap, { exact norm_zero, },
  nth_rewrite 0 L1.simple_func.simple_func_eq_sum_indicator_L1s f,
  rw linear_map.map_sum,
  rw finset.mul_sum,
  simp_rw measure_congr
    (L1.simple_func.preimage_congr_ae (L1.simple_func.to_simple_func_eq_to_fun f) _),
  have h_restrict_set : ‚àë (x : F') in (to_simple_func f).range, ‚à•T‚à• * (Œº (f ‚Åª¬π' {x})).to_real ‚Ä¢ ‚à•x‚à•
    = ‚àë (x : F') in L1.simple_func.range_nonzero f, ‚à•T‚à• * (Œº (f ‚Åª¬π' {x})).to_real ‚Ä¢ ‚à•x‚à•,
  { sorry, },
  rw h_restrict_set,
  refine (norm_sum_le _ _).trans (finset.sum_le_sum (Œª x hxf, _)),
  refine (norm_L1s_extension_indicator ùïÇ T _ x _).trans _,
  rw [smul_eq_mul, mul_comm _ (‚à•x‚à•), norm_indicator_L1s],
end

variables (F')
def L1s_extension_clm [nonempty Œ±] [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F']
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) :
  (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] F') ‚ÜíL[ùïÇ] (Œ± ‚Üí‚ÇÅ[Œº] F') :=
{ to_linear_map := L1s_extension_lm F' ùïÇ T,
  cont := linear_map.continuous_of_bound (L1s_extension_lm F' ùïÇ T) (‚à•T‚à•)
    (Œª f, norm_L1s_extension ùïÇ T f) }
variables {ùïÇ F'}

lemma L1s_extension_clm_coe [nonempty Œ±] [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F']
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) :
  ‚áë(L1s_extension_clm F' ùïÇ T) = L1s_extension_fun T :=
rfl

include hm
lemma is_condexp_L1s_extension_indicator [nonempty Œ±] [borel_space ùïÇ] [smul_comm_class ùïÇ ‚Ñù F']
  (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù) {s : set Œ±} (hs : measurable_set s)
  (c : F') (hŒºsc : c = 0 ‚à® Œº s < ‚àû) (hT_condexp : ‚àÄ f, is_condexp m (T f) f Œº) :
  is_condexp m (L1s_extension_clm F' ùïÇ T (indicator_L1s hs c hŒºsc))
    (indicator_L1s hs c hŒºsc) Œº :=
begin
  by_cases hc0 : c = 0,
  { simp [hc0, L1.simple_func.indicator_L1s_zero Œº hs],
    rw [‚Üê L1.simple_func.coe_coe, L1.simple_func.coe_zero,
      is_condexp_congr_ae hm (Lp.coe_fn_zero F' 1 Œº) (Lp.coe_fn_zero F' 1 Œº)],
    change is_condexp m (Œª x, (0 : F')) (Œª x, (0 : F')) Œº,
    exact is_condexp_const_self _, },
  have hŒºs : Œº s < ‚àû, from right_of_or_not_left hŒºsc hc0,
  specialize hT_condexp (indicator_L1s hs (1 : ‚Ñù) (or.inr hŒºs)),
  refine is_condexp_congr_ae_right' hm (indicator_L1s_eq_smul c hŒºs).symm _,
  rw [L1s_extension_clm_coe, L1s_extension_indicator ùïÇ T hs hŒºs],
  swap, { assumption, },
  swap, { assumption, },
  refine is_condexp_congr_ae_left' hm (L1.indicator_fun_smul_const_coe_fn _ c).symm _,
  exact is_condexp.smul_const hT_condexp c,
end
omit hm

include hm
lemma is_condexp_L1s_extension [nonempty Œ±] [borel_space ùïÇ] (T : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù)
  (hT_condexp : ‚àÄ f, is_condexp m (T f) f Œº) (f : Œ±‚Üí‚ÇÅ‚Çõ[Œº] E') :
  is_condexp m (L1s_extension_clm E' ùïÇ T f) f Œº :=
begin
  rw L1.simple_func.simple_func_eq_sum_indicator_L1s f,
  rw (L1s_extension_clm E' ùïÇ T).map_sum,
  refine is_condexp_congr_ae' hm
    (Lp.coe_fn_sum _ (L1.simple_func.range_nonzero f)).symm
    (L1.simple_func.coe_finset_sum _ (L1.simple_func.range_nonzero f)).symm _,
  refine is_condexp.sum _ _ (Œª i, L1.integrable _) (Œª i, L1.integrable _) _,
  exact Œª y hy, is_condexp_L1s_extension_indicator hm T _ y _ (Œª hŒºs, hT_condexp _),
end
omit hm

variables [finite_measure Œº] [borel_space ùïÇ]

variables (ùïÇ)
lemma condexp_L1s_indicator_L1s_eq {s : set Œ±} (hs : measurable_set s) (hŒºs : Œº s < ‚àû) (c : E') :
  condexp_L1s_lm ùïÇ hm (indicator_L1s hs c (or.inr hŒºs)) =·µê[Œº]
    Œª x, (condexp_L1s_lm ‚Ñù hm (indicator_L1s hs (1 : ‚Ñù) (or.inr hŒºs)) x) ‚Ä¢ c :=
begin
  refine is_condexp.unique ùïÇ hm (is_condexp_condexp_L1s ùïÇ hm _) (Lp.integrable _ le_rfl) _ _,
  swap,
  { by_cases hc : c = 0,
    { simp [hc], },
    { exact (integrable_smul_const hc).mpr (Lp.integrable _ le_rfl), }, },
  have h_condexp := is_condexp_condexp_L1s ‚Ñù hm (indicator_L1s hs (1 : ‚Ñù) (or.inr hŒºs)),
  exact is_condexp_‚Ñù_smul_const ùïÇ hm hs c hŒºs h_condexp,
end
variables {ùïÇ}

lemma norm_condexp_L1s_indicator_L1s {s : set Œ±} (hs : measurable_set s) (hŒºs : Œº s < ‚àû) (c : E') :
  ‚à•condexp_L1s_lm ùïÇ hm (indicator_L1s hs c (or.inr hŒºs))‚à• ‚â§ ‚à•indicator_L1s hs c (or.inr hŒºs)‚à• :=
begin
  rw norm_indicator_L1s,
  rw [ norm_def, snorm_congr_ae (condexp_L1s_indicator_L1s_eq ùïÇ hm hs hŒºs c),
    snorm_eq_snorm' ennreal.zero_lt_one.ne.symm ennreal.coe_ne_top, snorm'],
  simp_rw [ennreal.one_to_real, div_one, ennreal.rpow_one, nnnorm_smul,
    ennreal.coe_mul],
  rw [lintegral_mul_const _ (Lp.measurable _).nnnorm.ennreal_coe, ennreal.to_real_mul, mul_comm,
    ‚Üê of_real_norm_eq_coe_nnnorm, ennreal.to_real_of_real (norm_nonneg _)],
  swap, { apply_instance, },
  refine mul_le_mul le_rfl _ ennreal.to_real_nonneg (norm_nonneg _),
  suffices h_norm : ‚à•(condexp_L1s_lm ‚Ñù hm) (indicator_L1s hs (1 : ‚Ñù) (or.inr hŒºs))‚à•
    ‚â§ (Œº s).to_real,
  { rw [norm_def, snorm_eq_snorm' ennreal.zero_lt_one.ne.symm ennreal.coe_ne_top,
      snorm', ennreal.one_to_real, div_one] at h_norm,
    simp_rw ennreal.rpow_one at h_norm,
    exact h_norm, },
  refine (norm_condexp_L1s_indicator_L1s_R_le hm hs (1 : ‚Ñù) (or.inr hŒºs)).trans _,
  simp only [one_mul, norm_one],
end

lemma norm_condexp_L1s_le (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') : ‚à•condexp_L1s_lm ùïÇ hm f‚à• ‚â§ ‚à•f‚à• :=
begin
  rw L1.simple_func.norm_eq_integral,
  rw simple_func.map_integral _ _ (L1.simple_func.integrable _),
  swap, { exact norm_zero, },
  nth_rewrite 0 L1.simple_func.simple_func_eq_sum_indicator_L1s f,
  rw linear_map.map_sum,
  simp_rw measure_congr
    (L1.simple_func.preimage_congr_ae (L1.simple_func.to_simple_func_eq_to_fun f) _),
  have h_restrict_set : ‚àë (x : E') in (to_simple_func f).range, (Œº (f ‚Åª¬π' {x})).to_real ‚Ä¢ ‚à•x‚à•
    = ‚àë (x : E') in L1.simple_func.range_nonzero f, (Œº (f ‚Åª¬π' {x})).to_real ‚Ä¢ ‚à•x‚à•,
  { sorry, },
  rw h_restrict_set,
  refine (norm_sum_le _ _).trans _,
  refine finset.sum_le_sum (Œª x hxf, (norm_condexp_L1s_indicator_L1s hm _ _ x).trans _),
  { exact measure_lt_top _ _, },
  rw [smul_eq_mul, mul_comm, norm_indicator_L1s],
end

lemma continuous_condexp_L1s : continuous (@condexp_L1s_lm Œ± E' ùïÇ _ _ _ _ _ _ m m0 hm _ Œº _ _) :=
linear_map.continuous_of_bound _ 1 (Œª f, (norm_condexp_L1s_le hm f).trans (one_mul _).symm.le)

variables (ùïÇ)
/-- Conditional expectation as a continuous linear map from the simple functions in L1 to L1. -/
def condexp_L1s_clm : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') ‚ÜíL[ùïÇ] (Œ± ‚Üí‚ÇÅ[Œº] E') :=
{ to_linear_map := condexp_L1s_lm ùïÇ hm,
  cont := continuous_condexp_L1s hm, }

/-- Conditional expectation as a continuous linear map from L1 to L1. -/
def condexp_L1 : (Œ± ‚Üí‚ÇÅ[Œº] E') ‚ÜíL[ùïÇ] (Œ± ‚Üí‚ÇÅ[Œº] E') :=
@continuous_linear_map.extend ùïÇ (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') (Œ± ‚Üí‚ÇÅ[Œº] E') (Œ± ‚Üí‚ÇÅ[Œº] E') _ _ _ _ _ _ _
  (condexp_L1s_clm ùïÇ hm) _ (L1.simple_func.coe_to_L1 Œ± E' ùïÇ) L1.simple_func.dense_range
  L1.simple_func.uniform_inducing

lemma condexp_L1_eq_condexp_L1s (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') :
  condexp_L1 ùïÇ hm (f : Œ± ‚Üí‚ÇÅ[Œº] E') = condexp_L1s_clm ùïÇ hm f :=
begin
  refine uniformly_extend_of_ind L1.simple_func.uniform_inducing L1.simple_func.dense_range _ _,
  exact @continuous_linear_map.uniform_continuous ùïÇ (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E') (Œ± ‚Üí‚ÇÅ[Œº] E') _ _ _ _ _
    (@condexp_L1s_clm Œ± E' ùïÇ _ _ _ _ _ _ _ _ _ _ _ hm Œº _ _),
end
variables {ùïÇ}

lemma ae_measurable'_condexp_L1 (f : Œ± ‚Üí‚ÇÅ[Œº] E') : ae_measurable' m (condexp_L1 ùïÇ hm f) Œº :=
begin
  refine @is_closed_property _ (Œ± ‚Üí‚ÇÅ[Œº] E') _ _ _ L1.simple_func.dense_range _ _ f,
  { change is_closed ((condexp_L1 ùïÇ hm) ‚Åª¬π' {x : ‚Ü•(Lp E' 1 Œº) | ae_measurable' m x Œº}),
    haveI : fact ((1 : ‚Ñù‚â•0‚àû) ‚â§ 1) := ‚ü®le_rfl‚ü©,
    exact is_closed.preimage (continuous_linear_map.continuous _) (is_closed_ae_measurable' hm), },
  { intro fs,
    rw condexp_L1_eq_condexp_L1s,
    obtain ‚ü®f', hf'_meas, hf'‚ü© := (is_condexp_condexp_L1s ùïÇ hm fs).1,
    refine ‚ü®f', hf'_meas, _‚ü©,
    refine eventually_eq.trans (eventually_of_forall (Œª x, _)) hf',
    refl, },
end

lemma integral_eq_condexp_L1 (f : Œ± ‚Üí‚ÇÅ[Œº] E') (s : set Œ±) (hs : @measurable_set Œ± m s) :
  ‚à´ a in s, (condexp_L1 ùïÇ hm f) a ‚àÇŒº = ‚à´ a in s, f a ‚àÇŒº :=
begin
  refine @is_closed_property _ (Œ± ‚Üí‚ÇÅ[Œº] E') _ _ _ L1.simple_func.dense_range (is_closed_eq _ _) _ f,
  { change continuous ((Œª (g : ‚Ü•(Lp E' 1 Œº)), ‚à´ (a : Œ±) in s, g a ‚àÇŒº) ‚àò (condexp_L1 ùïÇ hm)),
    continuity, },
  { continuity, },
  { simp_rw condexp_L1_eq_condexp_L1s,
    exact Œª fs, (is_condexp_condexp_L1s ùïÇ hm fs).2 s hs, },
end

lemma is_condexp_condexp_L1 (f : Œ± ‚Üí‚ÇÅ[Œº] E') : is_condexp m (condexp_L1 ùïÇ hm f) f Œº :=
‚ü®ae_measurable'_condexp_L1 hm f, integral_eq_condexp_L1 hm f‚ü©

variables (ùïÇ)
include ùïÇ hm
/-- Conditional expectation of an integrable function. This is an `m`-measurable function such
that for all `m`-measurable sets `s`, `‚à´ x in s, condexp ùïÇ hm f hf x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº`. -/
def condexp (f : Œ± ‚Üí E') (hf : integrable f Œº) : Œ± ‚Üí E' :=
(is_condexp_condexp_L1 hm (hf.to_L1 f)).1.some
omit ùïÇ hm
variables {ùïÇ}

end condexp_def

section condexp_properties
include ùïÇ

variables {f f‚ÇÇ g : Œ± ‚Üí E'} {m‚ÇÇ m m0 : measurable_space Œ±} {hm : m ‚â§ m0} {Œº : measure Œ±}
  [finite_measure Œº] [borel_space ùïÇ]

lemma measurable_condexp (hf : integrable f Œº) : @measurable _ _ m _ (condexp ùïÇ hm f hf) :=
(is_condexp_condexp_L1 hm (hf.to_L1 f)).1.some_spec.1

lemma condexp_ae_eq_condexp_L1 (hf : integrable f Œº) :
  condexp ùïÇ hm f hf =·µê[Œº] condexp_L1 ùïÇ hm (hf.to_L1 f) :=
(is_condexp_condexp_L1 hm (hf.to_L1 f)).1.some_spec.2.symm

lemma is_condexp_condexp (hf : integrable f Œº) : is_condexp m (condexp ùïÇ hm f hf) f Œº :=
is_condexp_congr_ae' hm (condexp_ae_eq_condexp_L1 hf).symm (integrable.coe_fn_to_L1 hf)
  (is_condexp_condexp_L1 hm (hf.to_L1 f))

lemma integrable_condexp (hf : integrable f Œº) : integrable (condexp ùïÇ hm f hf) Œº :=
(integrable_congr (condexp_ae_eq_condexp_L1 hf)).mpr (Lp.integrable _ le_rfl)

lemma integrable_trim_condexp (hf : integrable f Œº) :
  @integrable Œ± E' m _ _ (condexp ùïÇ hm f hf) (Œº.trim hm) :=
integrable_trim_of_measurable hm (measurable_condexp hf) (integrable_condexp hf)

lemma set_integral_condexp_eq (hf : integrable f Œº) {s : set Œ±} (hs : @measurable_set Œ± m s) :
  ‚à´ x in s, condexp ùïÇ hm f hf x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº :=
(is_condexp_condexp hf).2 s hs

lemma integral_condexp (hf : integrable f Œº) : ‚à´ x, condexp ùïÇ hm f hf x ‚àÇŒº = ‚à´ x, f x ‚àÇŒº :=
by rw [‚Üê integral_univ, set_integral_condexp_eq hf (@measurable_set.univ Œ± m), integral_univ]

lemma condexp_comp (hm2 : m‚ÇÇ ‚â§ m) (hm : m ‚â§ m0) (hf : integrable f Œº) :
  condexp ùïÇ (hm2.trans hm) (condexp ùïÇ hm f hf) (integrable_condexp hf)
    =·µê[Œº] condexp ùïÇ (hm2.trans hm) f hf :=
begin
  refine is_condexp.unique ùïÇ (hm2.trans hm) _ (integrable_condexp _)
    (is_condexp_condexp hf) (integrable_condexp hf),
  exact is_condexp.trans hm2 (is_condexp_condexp _) (is_condexp_condexp hf),
end

omit ùïÇ
end condexp_properties

end measure_theory
