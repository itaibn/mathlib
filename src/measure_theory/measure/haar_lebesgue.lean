/-
Copyright (c) 2021 Floris van Doorn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn
-/
import measure_theory.measure.lebesgue
import measure_theory.measure.haar
import linear_algebra.finite_dimensional

/-!
# Relationship between the Haar and Lebesgue measures

We prove that the Haar measure and Lebesgue measure are equal on `‚Ñù` and on `‚Ñù^Œπ`.
We deduce basic properties of any Haar measure on a finite dimensional real vector space:
* `map_linear_map_add_haar_eq_smul_add_haar`: a linear map rescales the Haar measure by the
  absolute value of its determinant.

-/

open topological_space set
open_locale ennreal pointwise

/-- The interval `[0,1]` as a compact set with non-empty interior. -/
def topological_space.positive_compacts.Icc01 : positive_compacts ‚Ñù :=
‚ü®Icc 0 1, is_compact_Icc, by simp_rw [interior_Icc, nonempty_Ioo, zero_lt_one]‚ü©

universe u

/-- The set `[0,1]^n` as a compact set with non-empty interior. -/
def topological_space.positive_compacts.pi_Icc01 (Œπ : Type*) [fintype Œπ] :
  positive_compacts (Œπ ‚Üí ‚Ñù) :=
‚ü®set.pi set.univ (Œª i, Icc 0 1), is_compact_univ_pi (Œª i, is_compact_Icc),
begin
  rw interior_pi_set,
  simp only [interior_Icc, univ_pi_nonempty_iff, nonempty_Ioo, implies_true_iff, zero_lt_one],
end‚ü©

namespace measure_theory

open measure topological_space.positive_compacts finite_dimensional

/-!
### The Lebesgue measure is a Haar measure on `‚Ñù` and on `‚Ñù^Œπ`.
-/

lemma is_add_left_invariant_real_volume : is_add_left_invariant ‚áë(volume : measure ‚Ñù) :=
by simp [‚Üê map_add_left_eq_self, real.map_volume_add_left]

/-- The Haar measure equals the Lebesgue measure on `‚Ñù`. -/
lemma add_haar_measure_eq_volume : add_haar_measure Icc01 = volume :=
begin
  convert (add_haar_measure_unique _ Icc01).symm,
  { simp [Icc01] },
  { apply_instance },
  { exact is_add_left_invariant_real_volume }
end

instance : is_add_haar_measure (volume : measure ‚Ñù) :=
by { rw ‚Üê add_haar_measure_eq_volume, apply_instance }

lemma is_add_left_invariant_real_volume_pi (Œπ : Type*) [fintype Œπ] :
  is_add_left_invariant ‚áë(volume : measure (Œπ ‚Üí ‚Ñù)) :=
by simp [‚Üê map_add_left_eq_self, real.map_volume_pi_add_left]

/-- The Haar measure equals the Lebesgue measure on `‚Ñù^Œπ`. -/
lemma add_haar_measure_eq_volume_pi (Œπ : Type*) [fintype Œπ] :
  add_haar_measure (pi_Icc01 Œπ) = volume :=
begin
  convert (add_haar_measure_unique _ (pi_Icc01 Œπ)).symm,
  { simp only [pi_Icc01, volume_pi_pi (Œª i, Icc (0 : ‚Ñù) 1) (Œª (i : Œπ), measurable_set_Icc),
      finset.prod_const_one, ennreal.of_real_one, real.volume_Icc, one_smul, sub_zero] },
  { apply_instance },
  { exact is_add_left_invariant_real_volume_pi Œπ }
end

instance is_add_haar_measure_volume_pi (Œπ : Type*) [fintype Œπ] :
  is_add_haar_measure (volume : measure (Œπ ‚Üí ‚Ñù)) :=
by { rw ‚Üê add_haar_measure_eq_volume_pi, apply_instance }

/-!
### Applying a linear map rescales Haar measure by the determinant

We first prove this on `Œπ ‚Üí ‚Ñù`, using that this is already known for the product Lebesgue
measure (thanks to matrices computations). Then, we extend this to any finite-dimensional real
vector space by using a linear equiv with a space of the form `Œπ ‚Üí ‚Ñù`, and arguing that such a
linear equiv maps Haar measure to Haar measure.
-/

lemma map_linear_map_add_haar_pi_eq_smul_add_haar
  {Œπ : Type*} [fintype Œπ] {f : (Œπ ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] (Œπ ‚Üí ‚Ñù)} (hf : f.det ‚â† 0)
  (Œº : measure (Œπ ‚Üí ‚Ñù)) [is_add_haar_measure Œº] :
  measure.map f Œº = ennreal.of_real (abs (f.det)‚Åª¬π) ‚Ä¢ Œº :=
begin
  /- We have already proved the result for the Lebesgue product measure, using matrices.
  We deduce it for any Haar measure by uniqueness (up to scalar multiplication). -/
  have := add_haar_measure_unique (is_add_left_invariant_add_haar Œº) (pi_Icc01 Œπ),
  conv_lhs { rw this }, conv_rhs { rw this },
  simp [add_haar_measure_eq_volume_pi, real.map_linear_map_volume_pi_eq_smul_volume_pi hf,
    smul_smul, mul_comm],
end

lemma map_linear_map_add_haar_eq_smul_add_haar
  {E : Type*} [normed_group E] [normed_space ‚Ñù E] [measurable_space E] [borel_space E]
  [finite_dimensional ‚Ñù E] (Œº : measure E) [is_add_haar_measure Œº]
  {f : E ‚Üí‚Çó[‚Ñù] E} (hf : f.det ‚â† 0) :
  measure.map f Œº = ennreal.of_real (abs (f.det)‚Åª¬π) ‚Ä¢ Œº :=
begin
  -- we reduce to the case of `E = Œπ ‚Üí ‚Ñù`, for which we have already proved the result using
  -- matrices in `map_linear_map_haar_pi_eq_smul_haar`.
  let Œπ := fin (finrank ‚Ñù E),
  haveI : finite_dimensional ‚Ñù (Œπ ‚Üí ‚Ñù) := by apply_instance,
  have : finrank ‚Ñù E = finrank ‚Ñù (Œπ ‚Üí ‚Ñù), by simp,
  have e : E ‚âÉ‚Çó[‚Ñù] Œπ ‚Üí ‚Ñù := linear_equiv.of_finrank_eq E (Œπ ‚Üí ‚Ñù) this,
  -- next line is to avoid `g` getting reduced by `simp`.
  obtain ‚ü®g, hg‚ü© : ‚àÉ g, g = (e : E ‚Üí‚Çó[‚Ñù] (Œπ ‚Üí ‚Ñù)).comp (f.comp (e.symm : (Œπ ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] E)) :=
    ‚ü®_, rfl‚ü©,
  have gdet : g.det = f.det, by { rw [hg], exact linear_map.det_conj f e },
  rw ‚Üê gdet at hf ‚ä¢,
  have fg : f = (e.symm : (Œπ ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] E).comp (g.comp (e : E ‚Üí‚Çó[‚Ñù] (Œπ ‚Üí ‚Ñù))),
  { ext x,
    simp only [linear_equiv.coe_coe, function.comp_app, linear_map.coe_comp,
      linear_equiv.symm_apply_apply, hg] },
  simp only [fg, linear_equiv.coe_coe, linear_map.coe_comp],
  have Ce : continuous e := (e : E ‚Üí‚Çó[‚Ñù] (Œπ ‚Üí ‚Ñù)).continuous_of_finite_dimensional,
  have Cg : continuous g := linear_map.continuous_of_finite_dimensional g,
  have Cesymm : continuous e.symm := (e.symm : (Œπ ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] E).continuous_of_finite_dimensional,
  rw [‚Üê map_map Cesymm.measurable (Cg.comp Ce).measurable, ‚Üê map_map Cg.measurable Ce.measurable],
  haveI : is_add_haar_measure (map e Œº) := is_add_haar_measure_map Œº e.to_add_equiv Ce Cesymm,
  have ecomp : (e.symm) ‚àò e = id,
    by { ext x, simp only [id.def, function.comp_app, linear_equiv.symm_apply_apply] },
  rw [map_linear_map_add_haar_pi_eq_smul_add_haar hf (map e Œº), linear_map.map_smul,
    map_map Cesymm.measurable Ce.measurable, ecomp, map_id]
end

@[simp] lemma haar_preimage_linear_map
  {E : Type*} [normed_group E] [normed_space ‚Ñù E] [measurable_space E] [borel_space E]
  [finite_dimensional ‚Ñù E] (Œº : measure E) [is_add_haar_measure Œº]
  {f : E ‚Üí‚Çó[‚Ñù] E} (hf : f.det ‚â† 0) (s : set E) :
  Œº (f ‚Åª¬π' s) = ennreal.of_real (abs (f.det)‚Åª¬π) * Œº s :=
calc Œº (f ‚Åª¬π' s) = measure.map f Œº s :
  ((f.equiv_of_det_ne_zero hf).to_continuous_linear_equiv.to_homeomorph
    .to_measurable_equiv.map_apply s).symm
... = ennreal.of_real (abs (f.det)‚Åª¬π) * Œº s :
  by { rw map_linear_map_add_haar_eq_smul_add_haar Œº hf, refl }

/-!
### Basic properties of Haar measures on real vector spaces
-/

@[simp] lemma add_haar_ball
  {E : Type*} [normed_group E] [measurable_space E]
  [borel_space E] (Œº : measure E) [is_add_haar_measure Œº] (x : E) (r : ‚Ñù) :
  Œº (metric.ball x r) = Œº (metric.ball (0 : E) r) :=
begin
  have : metric.ball (0 : E) r = ((+) x) ‚Åª¬π' (metric.ball x r), by { ext y, simp [dist_eq_norm] },
  rw [this, add_haar_preimage_add]
end


@[simp] lemma add_haar_closed_ball
  {E : Type*} [normed_group E] [measurable_space E]
  [borel_space E] (Œº : measure E) [is_add_haar_measure Œº] (x : E) (r : ‚Ñù) :
  Œº (metric.closed_ball x r) = Œº (metric.closed_ball (0 : E) r) :=
begin
  have : metric.closed_ball (0 : E) r = ((+) x) ‚Åª¬π' (metric.closed_ball x r),
    by { ext y, simp [dist_eq_norm] },
  rw [this, add_haar_preimage_add]
end

variables {E : Type*} [normed_group E] [measurable_space E] [normed_space ‚Ñù E]
  [finite_dimensional ‚Ñù E]
  [borel_space E] (Œº : measure E) [is_add_haar_measure Œº]

lemma map_add_haar_smul {r : ‚Ñù} (hr : r ‚â† 0) :
  measure.map ((‚Ä¢) r) Œº = ennreal.of_real (abs (r^(finrank ‚Ñù E))‚Åª¬π) ‚Ä¢ Œº :=
begin
  let f : E ‚Üí‚Çó[‚Ñù] E := r ‚Ä¢ 1,
  change measure.map f Œº = _,
  have hf : f.det ‚â† 0,
  { simp only [mul_one, linear_map.det_smul, ne.def, monoid_hom.map_one],
    assume h,
    exact hr (pow_eq_zero h) },
  simp only [map_linear_map_add_haar_eq_smul_add_haar Œº hf, mul_one, linear_map.det_smul,
    monoid_hom.map_one],
end

lemma add_haar_preimage_smul {r : ‚Ñù} (hr : r ‚â† 0) (s : set E) :
  Œº (((‚Ä¢) r) ‚Åª¬π' s) = ennreal.of_real (abs (r^(finrank ‚Ñù E))‚Åª¬π) * Œº s :=
calc Œº (((‚Ä¢) r) ‚Åª¬π' s) = measure.map ((‚Ä¢) r) Œº s :
  ((homeomorph.smul (is_unit_iff_ne_zero.2 hr).unit).to_measurable_equiv.map_apply s).symm
... = ennreal.of_real (abs (r^(finrank ‚Ñù E))‚Åª¬π) * Œº s : by { rw map_add_haar_smul Œº hr, refl }

lemma add_haar_smul_of_ne_zero {r : ‚Ñù} (hr : r ‚â† 0) (s : set E) :
  Œº (r ‚Ä¢ s) = ennreal.of_real (abs (r^(finrank ‚Ñù E))) * Œº s :=
begin
  have : r ‚Ä¢ s = ((‚Ä¢) r‚Åª¬π) ‚Åª¬π' s,
  { ext x,
    rw mem_smul_set,
    split,
    { rintros ‚ü®y, ys, hy‚ü©,
      rw ‚Üê hy,
      simp [smul_smul, inv_mul_cancel hr, ys] },
    { assume h,
      simp at h,
      refine ‚ü®_, h, _‚ü©,
      simp [smul_smul, mul_inv_cancel hr] } },
  rw [this, add_haar_preimage_smul],
  simp only [inv_inv', inv_pow'],
  exact inv_ne_zero hr,
end

open_locale topological_space
open filter

lemma haar_singleton_zero_of_finrank_ne_zero (h : finrank ‚Ñù E ‚â† 0) : Œº {(0 : E)} = 0 :=
begin
  have B : ‚àÄ (r : ‚Ñù), r ‚â† 0 ‚Üí
    1 * Œº {(0 : E)} = ennreal.of_real (abs (r^(finrank ‚Ñù E))‚Åª¬π) * Œº {(0 : E)},
  { assume r hr,
    rw one_mul,
    have A : ((‚Ä¢) r) ‚Åª¬π' ({(0 : E)} : set E) = {(0 : E)}, by { ext y, simp [hr], },
    have := add_haar_preimage_smul Œº hr ({(0 : E)} : set E),
    rwa A at this },
  have : tendsto (Œª (r : ‚Ñù), ennreal.of_real (abs (r^(finrank ‚Ñù E))‚Åª¬π)) at_top
    (ùìù (ennreal.of_real (abs 0))),
  { apply tendsto.comp,

  },
  have T := ennreal.tendsto.mul_const
  contrapose h,
  have Z := (ennreal.mul_eq_mul_right h (is_compact_singleton.add_haar_lt_top Œº).ne).1
    (B 2 two_ne_zero),
  simp at Z,
end

lemma haar_smul_of_zero (s : set E) :
  Œº ((0 : ‚Ñù) ‚Ä¢ s) = ennreal.of_real (abs ((0 : ‚Ñù)^(finrank ‚Ñù E))) * Œº s :=
begin
  rcases eq_empty_or_nonempty s with rfl|hs,
  { simp only [measure_empty, mul_zero, smul_set_empty] },
  { have : (0 : ‚Ñù) ‚Ä¢ s = {(0 : E)},
      by { ext y, simp [mem_smul_set, set.nonempty_def.1 hs, eq_comm] },
    simp only [this],
    by_cases h : finrank ‚Ñù E = 0,
    { haveI : subsingleton E := finrank_zero_iff.1 h,
      simp only [h, one_mul, ennreal.of_real_one, abs_one, subsingleton.eq_univ_of_nonempty hs,
        pow_zero, subsingleton.eq_univ_of_nonempty (singleton_nonempty (0 : E))] },
    { simp only [h, zero_mul, ennreal.of_real_zero, abs_zero, ne.def, not_false_iff, zero_pow'],

    }

  }
end

end measure_theory


#exit


lemma smul_map_volume_mul_left {a : ‚Ñù} (h : a ‚â† 0) :
  ennreal.of_real (abs a) ‚Ä¢ measure.map ((*) a) volume = volume :=
begin
  refine (real.measure_ext_Ioo_rat $ Œª p q, _).symm,
  cases lt_or_gt_of_ne h with h h,
  { simp only [real.volume_Ioo, measure.smul_apply, ‚Üê ennreal.of_real_mul (le_of_lt $ neg_pos.2 h),
      measure.map_apply (measurable_const_mul a) measurable_set_Ioo, neg_sub_neg,
      ‚Üê neg_mul_eq_neg_mul, preimage_const_mul_Ioo_of_neg _ _ h, abs_of_neg h, mul_sub,
      mul_div_cancel' _ (ne_of_lt h)] },
  { simp only [real.volume_Ioo, measure.smul_apply, ‚Üê ennreal.of_real_mul (le_of_lt h),
      measure.map_apply (measurable_const_mul a) measurable_set_Ioo, preimage_const_mul_Ioo _ _ h,
      abs_of_pos h, mul_sub, mul_div_cancel' _ (ne_of_gt h)] }
end

lemma map_volume_mul_left {a : ‚Ñù} (h : a ‚â† 0) :
  measure.map ((*) a) volume = ennreal.of_real (abs a‚Åª¬π) ‚Ä¢ volume :=
by conv_rhs { rw [‚Üê real.smul_map_volume_mul_left h, smul_smul,
  ‚Üê ennreal.of_real_mul (abs_nonneg _), ‚Üê abs_mul, inv_mul_cancel h, abs_one, ennreal.of_real_one,
  one_smul] }

@[simp] lemma volume_preimage_mul_left {a : ‚Ñù} (h : a ‚â† 0) (s : set ‚Ñù) :
  volume (((*) a) ‚Åª¬π' s) = ennreal.of_real (abs a‚Åª¬π) * volume s :=
calc volume (((*) a) ‚Åª¬π' s) = measure.map ((*) a) volume s :
  ((homeomorph.mul_left' a h).to_measurable_equiv.map_apply s).symm
... = ennreal.of_real (abs a‚Åª¬π) * volume s : by { rw map_volume_mul_left h, refl }

lemma smul_map_volume_mul_right {a : ‚Ñù} (h : a ‚â† 0) :
  ennreal.of_real (abs a) ‚Ä¢ measure.map (* a) volume = volume :=
by simpa only [mul_comm] using real.smul_map_volume_mul_left h

lemma map_volume_mul_right {a : ‚Ñù} (h : a ‚â† 0) :
  measure.map (* a) volume = ennreal.of_real (abs a‚Åª¬π) ‚Ä¢ volume :=
by simpa only [mul_comm] using real.map_volume_mul_left h

@[simp] lemma volume_preimage_mul_right {a : ‚Ñù} (h : a ‚â† 0) (s : set ‚Ñù) :
  volume ((* a) ‚Åª¬π' s) = ennreal.of_real (abs a‚Åª¬π) * volume s :=
by simpa only [mul_comm] using volume_preimage_mul_left h s

lemma map_volume_neg : measure.map has_neg.neg (volume : measure ‚Ñù) = volume :=
eq.symm $ real.measure_ext_Ioo_rat $ Œª p q,
  by simp [show measure.map has_neg.neg volume (Ioo (p : ‚Ñù) q) = _,
    from measure.map_apply measurable_neg measurable_set_Ioo]

@[simp] lemma volume_preimage_neg (s : set ‚Ñù) : volume (-s) = volume s :=
calc volume (has_neg.neg ‚Åª¬π' s) = measure.map (has_neg.neg) volume s :
  ((homeomorph.neg ‚Ñù).to_measurable_equiv.map_apply s).symm
... = volume s : by rw map_volume_neg
