import analysis.box_integral.partition.marked
import analysis.specific_limits

open set function filter emetric
open_locale classical topological_space filter ennreal
noncomputable theory

namespace box_integral

variables {Œπ : Type*}

namespace box

variables {I : box Œπ}

def split_center_box (I : box Œπ) (s : set Œπ) : box Œπ :=
{ lower := s.piecewise (Œª i, (I.lower i + I.upper i) / 2) I.lower,
  upper := s.piecewise I.upper (Œª i, (I.lower i + I.upper i) / 2),
  lower_lt_upper := Œª i, by { dunfold set.piecewise, split_ifs;
    simp only [left_lt_add_div_two, add_div_two_lt_right, I.lower_lt_upper] } }

lemma mem_split_center_box {s : set Œπ} {y : Œπ ‚Üí ‚Ñù} :
  y ‚àà I.split_center_box s ‚Üî y ‚àà I ‚àß ‚àÄ i, (I.lower i + I.upper i) / 2 < y i ‚Üî i ‚àà s :=
begin
  simp only [split_center_box, mem_def, ‚Üê forall_and_distrib],
  refine forall_congr (Œª i, _),
  dunfold set.piecewise,
  split_ifs with hs; simp only [hs, iff_true, iff_false, not_lt],
  exacts [‚ü®Œª H, ‚ü®‚ü®(left_lt_add_div_two.2 (I.lower_lt_upper i)).trans H.1, H.2‚ü©, H.1‚ü©, Œª H, ‚ü®H.2, H.1.2‚ü©‚ü©,
    ‚ü®Œª H, ‚ü®‚ü®H.1, H.2.trans (add_div_two_lt_right.2 (I.lower_lt_upper i)).le‚ü©, H.2‚ü©, Œª H, ‚ü®H.1.1, H.2‚ü©‚ü©]
end

lemma split_center_box_le (I : box Œπ) (s : set Œπ) : I.split_center_box s ‚â§ I :=
Œª x hx, (mem_split_center_box.1 hx).1

lemma disjoint_split_center_box (I : box Œπ) {s t : set Œπ} (h : s ‚â† t) :
  disjoint (I.split_center_box s : set (Œπ ‚Üí ‚Ñù)) (I.split_center_box t) :=
begin
  rintro y ‚ü®hs, ht‚ü©, apply h,
  ext i,
  rw [mem_coe, mem_split_center_box] at hs ht,
  rw [‚Üê hs.2, ‚Üê ht.2]
end

lemma injective_split_center_box (I : box Œπ) : injective I.split_center_box :=
Œª s t H, by_contra $ Œª Hne, (I.disjoint_split_center_box Hne).ne (nonempty_coe _).ne_empty (H ‚ñ∏ rfl)

lemma Union_coe_split_center_box (I : box Œπ) :
  (‚ãÉ s, (I.split_center_box s : set (Œπ ‚Üí ‚Ñù))) = I :=
subset.antisymm (Union_subset $ Œª s, I.split_center_box_le s) $
  Œª y hy, mem_Union.2 ‚ü®{i | _ < y i}, mem_split_center_box.2 ‚ü®hy, Œª i, iff.rfl‚ü©‚ü©

@[simp] lemma upper_sub_lower_split_center_box (I : box Œπ) (s : set Œπ) (i : Œπ) :
  (I.split_center_box s).upper i - (I.split_center_box s).lower i = (I.upper i - I.lower i) / 2 :=
by by_cases hs : i ‚àà s; field_simp [split_center_box, hs, mul_two, two_mul]

def split_center [fintype Œπ] (I : box Œπ) : partition I :=
{ boxes := range I.split_center_box,
  finite_boxes := finite_range _,
  bUnion_boxes_coe := by rw [bUnion_range, Union_coe_split_center_box],
  pairwise_disjoint := by { rintro _ ‚ü®s, rfl‚ü© _ ‚ü®t, rfl‚ü© Hne,
    exact I.disjoint_split_center_box (mt (congr_arg _) Hne) } }

@[simp] lemma mem_split_center [fintype Œπ] {I J : box Œπ} :
  J ‚àà I.split_center ‚Üî ‚àÉ s, J = I.split_center_box s :=
mem_range.trans $ exists_congr $ Œª s, eq_comm

lemma upper_sub_lower_of_mem_split_center [fintype Œπ] {J} (h : J ‚àà I.split_center) (i : Œπ) :
  J.upper i - J.lower i = (I.upper i - I.lower i) / 2 :=
let ‚ü®s, hs‚ü© := mem_split_center.1 h in hs.symm ‚ñ∏ I.upper_sub_lower_split_center_box s i

@[elab_as_eliminator]
lemma subbox_induction_on [fintype Œπ] {p : box Œπ ‚Üí Prop} (I : box Œπ)
  (H_ind : ‚àÄ J ‚â§ I, (‚àÄ J' ‚àà J.split_center, p J') ‚Üí p J)
  (H_nhds : ‚àÄ z ‚àà I.Icc, ‚àÉ (U ‚àà ùìù[I.Icc] z), ‚àÄ (J ‚â§ I) (n : ‚Ñï), z ‚àà J.Icc ‚Üí J.Icc ‚äÜ U ‚Üí
    (‚àÄ i, J.upper i - J.lower i = (I.upper i - I.lower i) / 2 ^ n) ‚Üí p J) :
  p I :=
begin
  by_contra hpI,
  -- First we use `H_ind` to construct a decreasing sequence of boxes such that `‚àÄ n, ¬¨(p n)`.
  replace H_ind := Œª J hJ, not_imp_not.2 (H_ind J hJ),
  simp only [mem_split_center, exists_imp_distrib, forall_eq_apply_imp_iff', not_forall] at H_ind,
  choose! s hs using H_ind,
  set J : ‚Ñï ‚Üí box Œπ := Œª n, (Œª J, split_center_box J (s J))^[n] I,
  have J_succ : ‚àÄ n, J (n + 1) = split_center_box (J n) (s $ J n),
    from Œª n, iterate_succ_apply' _ _ _,
  -- Now we prove some properties of `J`
  have hJmono : monotone (order_dual.to_dual ‚àò J),
    from monotone_nat_of_le_succ (Œª n, by simpa [J_succ] using split_center_box_le _ _),
  have hJle : ‚àÄ n, J n ‚â§ I, from Œª n, (hJmono (zero_le n)),
  have hJp : ‚àÄ n, ¬¨p (J n),
    from Œª n, nat.rec_on n hpI (Œª n, by simpa only [J_succ] using hs (J n) (hJle n)),
  have hJsub : ‚àÄ n i, (J n).upper i - (J n).lower i = (I.upper i - I.lower i) / 2 ^ n,
  { intros n i, induction n with n ihn, { simp [J] },
    simp only [pow_succ', J_succ, upper_sub_lower_split_center_box, ihn, div_div_eq_div_mul] },
  have h0 : J 0 = I, from rfl,
  -- Now we clear unneeded assumptions
  clear_value J, clear hpI hs J_succ s,
  -- Let `z` be the unique common point of all `(J n).Icc`. Then `H_nhds` proves `p (J n)` for
  -- sufficiently lart `n`. This contradicts `hJp`.
  set z : Œπ ‚Üí ‚Ñù := ‚®Ü n, (J n).lower,
  have hzJ : ‚àÄ n, z ‚àà (J n).Icc,
    from mem_Inter.1 (csupr_mem_Inter_Icc_of_mono_decr_Icc
      ((@box.Icc Œπ).monotone.order_dual.comp hJmono) (Œª n, (J n).lower_le_upper)),
  have hJl_mem : ‚àÄ n, (J n).lower ‚àà I.Icc, from Œª n, le_iff_Icc.1 (hJle n) (J n).lower_mem_Icc,
  have hJu_mem : ‚àÄ n, (J n).upper ‚àà I.Icc, from Œª n, le_iff_Icc.1 (hJle n) (J n).upper_mem_Icc,
  have hJlz : tendsto (Œª n, (J n).lower) at_top (ùìù z),
    from tendsto_at_top_csupr_pi' (monotone_lower.order_dual.comp hJmono)
      ‚ü®I.upper, Œª x ‚ü®n, hn‚ü©, hn ‚ñ∏ (hJl_mem n).2‚ü©,
  have hJuz : tendsto (Œª n, (J n).upper) at_top (ùìù z),
  { suffices : tendsto (Œª n, (J n).upper - (J n).lower) at_top (ùìù 0), by simpa using hJlz.add this,
    refine tendsto_pi.2 (Œª i, _),
    simpa [hJsub] using tendsto_const_nhds.div_at_top
      (tendsto_pow_at_top_at_top_of_one_lt (@one_lt_two ‚Ñù _ _)) },
  replace hJlz : tendsto (Œª n, (J n).lower) at_top (ùìù[Icc I.lower I.upper] z),
    from tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ hJlz
      (eventually_of_forall hJl_mem),
  replace hJuz : tendsto (Œª n, (J n).upper) at_top (ùìù[Icc I.lower I.upper] z),
    from tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ hJuz
      (eventually_of_forall hJu_mem),
  rcases H_nhds z (h0 ‚ñ∏ hzJ 0) with ‚ü®U, hUz, hU‚ü©,
  rcases (tendsto_lift'.1 (hJlz.Icc hJuz) U hUz).exists with ‚ü®n, hUn‚ü©,
  exact hJp n (hU (J n) (hJle n) n (hzJ n) hUn (hJsub n))
end


end box

namespace marked_partition

lemma exists_is_Henstock_is_subordinate_homothetic [fintype Œπ] (I : box Œπ) {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû}
  (h0 : ‚àÄ x ‚àà I.Icc, r x ‚â† 0) :
  ‚àÉ œÄ : marked_partition I, œÄ.is_Henstock ‚àß œÄ.is_subordinate r ‚àß
    ‚àÄ J ‚àà œÄ, ‚àÉ n : ‚Ñï, ‚àÄ i, (J : _).upper i - J.lower i = (I.upper i - I.lower i) / 2 ^ n :=
begin
  refine box.subbox_induction_on I (Œª J hle hJ, _) (Œª z hz, _),
  { choose! œÄi hHen hr n hn using hJ,
    refine ‚ü®J.split_center.bUnion_marked (Œª J _, œÄi J), is_Henstock_bUnion.2 hHen,
      is_subordinate_bUnion.2 hr, Œª J' hJ', _‚ü©,
    rcases J.split_center.mem_bUnion_marked.1 hJ' with ‚ü®J‚ÇÅ, h‚ÇÅ, h‚ÇÇ‚ü©,
    refine ‚ü®n J‚ÇÅ J' + 1, Œª i, _‚ü©,
    simp only [hn J‚ÇÅ h‚ÇÅ J' h‚ÇÇ, box.upper_sub_lower_of_mem_split_center h‚ÇÅ, pow_succ,
      div_div_eq_div_mul] },
  { replace h0 : 0 < r z, from pos_iff_ne_zero.2 (h0 z hz),
    refine ‚ü®I.Icc ‚à© closed_ball z (r z),
      inter_mem_nhds_within _ (closed_ball_mem_nhds _ h0), _‚ü©,
    intros J Hle n Hmem HIcc Hsub,
    rw set.subset_inter_iff at HIcc,
    refine ‚ü®single _ _ Hmem, is_Henstock_single _, (is_subordinate_single _).2 HIcc.2, _‚ü©,
    simp only [mem_single, forall_eq],
    refine ‚ü®0, Œª i, _‚ü©, simp }
end

end marked_partition

end box_integral

