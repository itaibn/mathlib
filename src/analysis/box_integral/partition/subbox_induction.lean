/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.box_integral.partition.tagged
import analysis.box_integral.partition.split_induction
import analysis.specific_limits

/-!
# Induction on subboxes

In this file we prove (see
`box_integral.tagged_partition.exists_is_Henstock_is_subordinate_homothetic`) that for every box `I`
in `‚Ñù‚Åø` and a function `r : ‚Ñù‚Åø ‚Üí ‚Ñù` positive on `I` there exists a tagged partition `œÄ` of `I` such
that

* `œÄ` is a Henstock partition;
* `œÄ` is subordinate to `r`;
* each box in `œÄ` is homothetic to `I` with coefficient of the form `1 / 2 ^ n`.

Later we will use this lemma to prove that the Henstock filter is nontrivial, hence the Henstock
integral is well-defined.

We prove this lemma using a special kind of induction principle formulated in
`box_integral.box.subbox_induction_on`. Let `p` be a predicate on `box Œπ`, let `I` be a box. Suppose
that the following two properties hold true.

* Consider a smaller box `J ‚â§ I`. The hyperplanes passing through the center of `J` split it into
  `2 ^ n` boxes. If `p` holds true on each of these boxes, then it true on `J`.
* For each `z` in the closed box `I.Icc` there exists a neighborhood `U` of `z` within `I.Icc` such
  that for every box `J ‚â§ I` such that `z ‚àà J.Icc ‚äÜ U`, if `J` is homothetic to `I` with a
  coefficient of the form `1 / 2 ^ n`, then `p` is true on `J`.

Then `p I` is true.

## Tags

partition, tagged partition, Henstock integral
-/

open set finset function filter metric
open_locale classical topological_space filter ennreal
noncomputable theory

namespace box_integral

variables {Œπ : Type*}


variables [fintype Œπ] {I J : box Œπ}

namespace partition

/-- Split a box in `‚Ñù‚Åø` into `2 ^ n` boxes by hyperplanes passing through its center. -/
def split_center (I : box Œπ) : partition I :=
{ boxes := finset.univ.map (box.split_center_box_emb I),
  le_of_mem' := by simp [I.split_center_box_le],
  exists_mem' := Œª x hx, by simp [hx],
  pairwise_disjoint :=
    begin
      rw [finset.coe_map, finset.coe_univ, image_univ],
      rintro _ ‚ü®s, rfl‚ü© _ ‚ü®t, rfl‚ü© Hne,
      exact I.disjoint_split_center_box (mt (congr_arg _) Hne)
    end }

@[simp] lemma mem_split_center : J ‚àà split_center I ‚Üî ‚àÉ s, J = I.split_center_box s :=
by simp [split_center, eq_comm]

lemma upper_sub_lower_of_mem_split_center (h : J ‚àà split_center I) (i : Œπ) :
  J.upper i - J.lower i = (I.upper i - I.lower i) / 2 :=
let ‚ü®s, hs‚ü© := mem_split_center.1 h in hs.symm ‚ñ∏ I.upper_sub_lower_split_center_box s i

end partition

namespace box

open partition

/-- Let `p` be a predicate on `box Œπ`, let `I` be a box. Suppose that the following two properties
hold true.

* Consider a smaller box `J ‚â§ I`. The hyperplanes passing through the center of `J` split it into
  `2 ^ n` boxes. If `p` holds true on each of these boxes, then it true on `J`.
* For each `z` in the closed box `I.Icc` there exists a neighborhood `U` of `z` within `I.Icc` such
  that for every box `J ‚â§ I` such that `z ‚àà J.Icc ‚äÜ U`, if `J` is homothetic to `I` with a
  coefficient of the form `1 / 2 ^ n`, then `p` is true on `J`.

Then `p I` is true. -/
@[elab_as_eliminator]
lemma subbox_induction_on {p : box Œπ ‚Üí Prop} (I : box Œπ)
  (H_ind : ‚àÄ J ‚â§ I, (‚àÄ J' ‚àà split_center J, p J') ‚Üí p J)
  (H_nhds : ‚àÄ z ‚àà I.Icc, ‚àÉ (U ‚àà ùìù[I.Icc] z), ‚àÄ (J ‚â§ I) (n : ‚Ñï), z ‚àà J.Icc ‚Üí J.Icc ‚äÜ U ‚Üí
    (‚àÄ i, J.upper i - J.lower i = (I.upper i - I.lower i) / 2 ^ n) ‚Üí p J) :
  p I :=
begin
  by_contra hpI,
  -- First we use `H_ind` to construct a decreasing sequence of boxes such that `‚àÄ n, ¬¨(p n)`.
  replace H_ind := Œª J hJ, not_imp_not.2 (H_ind J hJ),
  simp only [mem_split_center, exists_imp_distrib, forall_eq_apply_imp_iff', not_forall] at H_ind,
  choose! s hs using H_ind,
  set J : ‚Ñï ‚Üí box Œπ := Œª n, (Œª J, split_center_box J (s J))^[n] I,
  have J_succ : ‚àÄ n, J (n + 1) = split_center_box (J n) (s $ J n),
    from Œª n, iterate_succ_apply' _ _ _,
  -- Now we prove some properties of `J`
  have hJmono : monotone (order_dual.to_dual ‚àò J),
    from monotone_nat_of_le_succ (Œª n, by simpa [J_succ] using split_center_box_le _ _),
  have hJle : ‚àÄ n, J n ‚â§ I, from Œª n, (hJmono (zero_le n)),
  have hJp : ‚àÄ n, ¬¨p (J n),
    from Œª n, nat.rec_on n hpI (Œª n, by simpa only [J_succ] using hs (J n) (hJle n)),
  have hJsub : ‚àÄ n i, (J n).upper i - (J n).lower i = (I.upper i - I.lower i) / 2 ^ n,
  { intros n i, induction n with n ihn, { simp [J] },
    simp only [pow_succ', J_succ, upper_sub_lower_split_center_box, ihn, div_div_eq_div_mul] },
  have h0 : J 0 = I, from rfl,
  -- Now we clear unneeded assumptions
  clear_value J, clear hpI hs J_succ s,
  -- Let `z` be the unique common point of all `(J n).Icc`. Then `H_nhds` proves `p (J n)` for
  -- sufficiently lart `n`. This contradicts `hJp`.
  set z : Œπ ‚Üí ‚Ñù := ‚®Ü n, (J n).lower,
  have hzJ : ‚àÄ n, z ‚àà (J n).Icc,
    from mem_Inter.1 (csupr_mem_Inter_Icc_of_mono_decr_Icc
      ((@box.Icc Œπ).monotone.order_dual.comp hJmono) (Œª n, (J n).lower_le_upper)),
  have hJl_mem : ‚àÄ n, (J n).lower ‚àà I.Icc, from Œª n, le_iff_Icc.1 (hJle n) (J n).lower_mem_Icc,
  have hJu_mem : ‚àÄ n, (J n).upper ‚àà I.Icc, from Œª n, le_iff_Icc.1 (hJle n) (J n).upper_mem_Icc,
  have hJlz : tendsto (Œª n, (J n).lower) at_top (ùìù z),
    from tendsto_at_top_csupr (monotone_lower.order_dual.comp hJmono)
      ‚ü®I.upper, Œª x ‚ü®n, hn‚ü©, hn ‚ñ∏ (hJl_mem n).2‚ü©,
  have hJuz : tendsto (Œª n, (J n).upper) at_top (ùìù z),
  { suffices : tendsto (Œª n, (J n).upper - (J n).lower) at_top (ùìù 0), by simpa using hJlz.add this,
    refine tendsto_pi_nhds.2 (Œª i, _),
    simpa [hJsub] using tendsto_const_nhds.div_at_top
      (tendsto_pow_at_top_at_top_of_one_lt (@one_lt_two ‚Ñù _ _)) },
  replace hJlz : tendsto (Œª n, (J n).lower) at_top (ùìù[Icc I.lower I.upper] z),
    from tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ hJlz
      (eventually_of_forall hJl_mem),
  replace hJuz : tendsto (Œª n, (J n).upper) at_top (ùìù[Icc I.lower I.upper] z),
    from tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ hJuz
      (eventually_of_forall hJu_mem),
  rcases H_nhds z (h0 ‚ñ∏ hzJ 0) with ‚ü®U, hUz, hU‚ü©,
  rcases (tendsto_lift'.1 (hJlz.Icc hJuz) U hUz).exists with ‚ü®n, hUn‚ü©,
  exact hJp n (hU (J n) (hJle n) n (hzJ n) hUn (hJsub n))
end


end box

namespace tagged_partition

open partition

/-- Let `I` be a box in `‚Ñù‚Åø` and `r : ‚Ñù‚Åø ‚Üí ‚Ñù` be a function positive on the corresponding closed
box. Then there exists a tagged partition `œÄ` of `I` such that

* `œÄ` is a Henstock partition;
* `œÄ` is subordinate to `r`;
* each box in `œÄ` is homothetic to `I` with coefficient of the form `1 / 2 ^ n`.

This lemma implies that the Henstock filter is nontrivial, hence the Henstock integral is
well-defined. -/
lemma exists_is_Henstock_is_subordinate_homothetic {I : box Œπ} {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù}
  (h0 : ‚àÄ x ‚àà I.Icc, 0 < r x) :
  ‚àÉ œÄ : tagged_partition I, œÄ.is_Henstock ‚àß œÄ.is_subordinate r ‚àß
    (‚àÄ J ‚àà œÄ, ‚àÉ n : ‚Ñï, ‚àÄ i, (J : _).upper i - J.lower i = (I.upper i - I.lower i) / 2 ^ n) ‚àß
    œÄ.distortion = I.distortion :=
begin
  refine box.subbox_induction_on I (Œª J hle hJ, _) (Œª z hz, _),
  { choose! œÄi hHen hr Hn Hd using hJ, choose! n hn using Hn,
    refine ‚ü®(split_center J).bUnion_tagged œÄi, is_Henstock_bUnion.2 hHen,
      is_subordinate_bUnion.2 hr, (and_iff_left_of_imp _).2 _‚ü©,
    { refine Œª H, partition.distortion_of_const _ (Œª J' h', _),
      rcases H J' h' with ‚ü®n, hn‚ü©,
      exact box.distortion_eq_of_sub_eq_div hn },
    intros J' hJ',
    rcases (split_center J).mem_bUnion_tagged.1 hJ' with ‚ü®J‚ÇÅ, h‚ÇÅ, h‚ÇÇ‚ü©,
    refine ‚ü®n J‚ÇÅ J' + 1, Œª i, _‚ü©,
    simp only [hn J‚ÇÅ h‚ÇÅ J' h‚ÇÇ, upper_sub_lower_of_mem_split_center h‚ÇÅ, pow_succ,
      div_div_eq_div_mul] },
  { refine ‚ü®I.Icc ‚à© closed_ball z (r z),
      inter_mem_nhds_within _ (closed_ball_mem_nhds _ (h0 z hz)), _‚ü©,
    intros J Hle n Hmem HIcc Hsub,
    rw set.subset_inter_iff at HIcc,
    refine ‚ü®single _ _ Hmem, is_Henstock_single _, (is_subordinate_single _).2 HIcc.2, _‚ü©,
    simp only [mem_single, forall_eq],
    refine ‚ü®‚ü®0, Œª i, _‚ü©, distortion_single _‚ü©, simp }
end

end tagged_partition

namespace tagged_prepartition

/-- For any tagged prepartition `œÄ` of `I` subordinate to a function `r` positive on `I.Icc`, there
exists a tagged partition `œÄ'` such that

* `œÄ'` is subordinate to the same function `r`;
* `œÄ ‚äÜ œÄ'` and their `tag` functions agree on `J ‚àà œÄ`;
* `œÄ'` is Henstock outside of `œÄ`, i.e., `œÄ'.tag J ‚àà J.Icc` for any box `J ‚àà œÄ'`, `J ‚àâ œÄ`;
* `œÄ'` has a predictable distortion; namely, its distortion equals the distortion of
  `œÄ.to_prepartition.to_partition`. -/
lemma exists_tagged_partition_superset_is_subordinate {I : box Œπ} {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù}
  {œÄ : tagged_prepartition I} (h0 : ‚àÄ x ‚àà I.Icc, 0 < r x) (hr : œÄ.is_subordinate r) :
  ‚àÉ œÄ' : tagged_partition I, œÄ'.is_subordinate r ‚àß (‚àÄ J ‚àà œÄ, J ‚àà œÄ') ‚àß
    (‚àÄ J ‚àà œÄ, œÄ.tag J = œÄ'.tag J) ‚àß (‚àÄ J ‚àà œÄ', J ‚àâ œÄ ‚Üí œÄ'.tag J ‚àà J.Icc) ‚àß
    (œÄ'.distortion = œÄ.to_prepartition.to_partition.distortion) :=
begin
  set œÄp : partition I := œÄ.to_prepartition.to_partition,
  have : ‚àÄ J ‚àà œÄp, ‚àÉ œÄ' : tagged_partition J, œÄ'.is_Henstock ‚àß œÄ'.is_subordinate r ‚àß
    (‚àÄ J' ‚àà œÄ', ‚àÉ n : ‚Ñï, ‚àÄ i, (J' : _).upper i - J'.lower i = (J.upper i - J.lower i) / 2 ^ n) ‚àß
    œÄ'.distortion = J.distortion,
    from Œª J hJ, tagged_partition.exists_is_Henstock_is_subordinate_homothetic
      (Œª x hx, h0 x (box.le_iff_Icc.1 (œÄp.le_of_mem hJ) hx)),
  choose! œÄi hiHen hir hsub Hd, clear hsub,
  set œÄ' : partition I := œÄp.bUnion (œÄ.boxes.piecewise (Œª _, ‚ä§) (Œª J, (œÄi J).to_partition)),
  set tag : box Œπ ‚Üí Œπ ‚Üí ‚Ñù :=
     œÄ.boxes.piecewise œÄ.tag (Œª J, (œÄi (œÄp.bUnion_index (Œª J', (œÄi J').to_partition) J)).tag J),
  have Htag_œÄ : ‚àÄ J ‚àà œÄ, tag J = œÄ.tag J, from Œª J, œÄ.boxes.piecewise_eq_of_mem _ _,
  have Htag_œÄi : ‚àÄ J ‚àâ œÄ, tag J = (œÄi (œÄp.bUnion_index (Œª J', (œÄi J').to_partition) J)).tag J,
    from Œª J, œÄ.boxes.piecewise_eq_of_not_mem _ _,
  have HtagI : ‚àÄ J, tag J ‚àà I.Icc,
  { intro J,
    by_cases hJœÄ : J ‚àà œÄ,
    { rw Htag_œÄ _ hJœÄ, exact œÄ.tag_mem_Icc J },
    { rw Htag_œÄi _ hJœÄ,
      exact box.le_iff_Icc.1 (œÄp.bUnion_index_le _ _) ((œÄi _).tag_mem_Icc J) } },
  set œÄt : tagged_partition I := ‚ü®‚ü®œÄ'.to_prepartition, tag, HtagI‚ü©, œÄ'.exists_mem'‚ü©,
  have mem_œÄt : ‚àÄ J, J ‚àà œÄt ‚Üí J ‚àâ œÄ ‚Üí ‚àÉ Jp ‚àà œÄp, Jp ‚àâ œÄ ‚àß J ‚àà œÄi Jp,
  { rintros J hJ hJœÄ,
    replace hJ := œÄp.mem_bUnion.1 hJ, rcases hJ with ‚ü®Jp, hJp, hJ‚ü©,
    have : Jp ‚àâ œÄ,
    { intro H,
      rw [œÄ.boxes.piecewise_eq_of_mem _ _ H, partition.mem_top] at hJ,
      rw hJ at hJœÄ, exact hJœÄ H },
    rw [œÄ.boxes.piecewise_eq_of_not_mem _ _ this] at hJ,
    exact ‚ü®Jp, hJp, this, hJ‚ü© },
  have : ‚àÄ p : (Œπ ‚Üí ‚Ñù) ‚Üí box Œπ ‚Üí Prop, (‚àÄ J ‚àà œÄ, p (œÄ.tag J) J) ‚Üí
    (‚àÄ J ‚àâ œÄ, J ‚àà œÄp ‚Üí ‚àÄ Ji ‚àà œÄi J, p ((œÄi J).tag Ji) Ji) ‚Üí ‚àÄ J ‚àà œÄt, p (œÄt.tag J) J,
  { rintros p hpœÄ hpœÄ' J hJ,
    by_cases hJœÄ : J ‚àà œÄ,
    { convert hpœÄ _ hJœÄ using 1,exact Htag_œÄ _ hJœÄ },
    { rcases mem_œÄt J hJ hJœÄ with ‚ü®Jp, hJp, hJpœÄ, hJ‚ü©,
      simp only [œÄt, Htag_œÄi J hJœÄ],
      rw œÄp.bUnion_index_of_mem; [skip, exact hJp, exact hJ],
      exact hpœÄ' _ hJpœÄ hJp _ hJ } },
  refine ‚ü®œÄt, _, _, _, _, _‚ü©,
  { exact this (Œª x J, J.Icc ‚äÜ closed_ball x (r x)) hr (Œª J hJ hJp, (hir _ hJp)) },
  { intros J hJ,
    refine œÄp.mem_bUnion.2 ‚ü®J, œÄ.to_prepartition.subset_to_partition hJ, _‚ü©,
    rw [œÄ.boxes.piecewise_eq_of_mem _ _ hJ, partition.mem_top] },
  { exact Œª J hJ, (Htag_œÄ J hJ).symm },
  { intros J hJ hJ',
    rcases mem_œÄt J hJ hJ' with ‚ü®Jp, hJp, hJpœÄ, hJ‚ü©,
    simp only [œÄt, Htag_œÄi _ hJ'],
    rw [œÄp.bUnion_index_of_mem]; [skip, exact hJp, exact hJ],
    exact hiHen _ hJp _ hJ },
  { refine (œÄp.distortion_bUnion _).trans (sup_congr rfl $ Œª J hJ, _),
    by_cases h : J ‚àà œÄ,
    { rw [œÄ.boxes.piecewise_eq_of_mem _ _ h, partition.distortion_top] },
    { rw [œÄ.boxes.piecewise_eq_of_not_mem _ _ h],
      exact Hd J hJ } }
end

def to_subordinate_tagged_partition (œÄ : tagged_prepartition I) (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù)
  (h0 : ‚àÄ x ‚àà I.Icc, 0 < r x) (hr : œÄ.is_subordinate r) :
  tagged_partition I :=
(exists_tagged_partition_superset_is_subordinate h0 hr).some

variables {œÄ : tagged_prepartition I} {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù}

lemma is_subordinate.to_subordinate_tagged_partition (hr : œÄ.is_subordinate r)
  (h0 : ‚àÄ x ‚àà I.Icc, 0 < r x) :
  (œÄ.to_subordinate_tagged_partition r h0 hr).is_subordinate r :=
(exists_tagged_partition_superset_is_subordinate h0 hr).some_spec.1

lemma is_subordinate.mem_to_subordinate_tagged_partition (hr : œÄ.is_subordinate r)
  (h0 : ‚àÄ x ‚àà I.Icc, 0 < r x) (hJ : J ‚àà œÄ) :
  J ‚àà œÄ.to_subordinate_tagged_partition r h0 hr :=
(exists_tagged_partition_superset_is_subordinate h0 hr).some_spec.2.1 _ hJ




end tagged_prepartition

end box_integral
