import analysis.box_integral.partition.subbox_induction

open set function filter emetric
open_locale classical topological_space filter ennreal nnreal
noncomputable theory

namespace box_integral

variables {Œπ : Type*} [fintype Œπ] {I : box Œπ}

namespace box

def distortion (I : box Œπ) : ‚Ñù‚â•0 :=
finset.univ.sup $ Œª i : Œπ, nndist (I : _).lower I.upper / nndist (I.lower i) (I.upper i)

lemma distortion_eq_of_sub_eq_div {I J : box Œπ} {r : ‚Ñù}
  (h : ‚àÄ i, I.upper i - I.lower i = (J.upper i - J.lower i) / r) :
  distortion I = distortion J :=
begin
  simp only [distortion, nndist_pi_def, real.nndist_eq', h, real.nnabs.map_div],
  congr' 1 with i,
  have : 0 < r,
  { by_contra hr,
    have := div_nonpos_of_nonneg_of_nonpos (sub_nonneg.2 $ J.lower_le_upper i) (not_lt.1 hr),
    rw ‚Üê h at this,
    exact this.not_lt (sub_pos.2 $ I.lower_lt_upper i) },
  simp only [nnreal.finset_sup_div, div_div_div_cancel_right _ (real.nnabs.map_ne_zero.2 this.ne')]
end

lemma nndist_le_distortion_mul (I : box Œπ) (i : Œπ) :
  nndist I.lower I.upper ‚â§ I.distortion * nndist (I.lower i) (I.upper i) :=
calc nndist I.lower I.upper =
  (nndist I.lower I.upper / nndist (I.lower i) (I.upper i)) *  nndist (I.lower i) (I.upper i) :
  (div_mul_cancel _ $ mt nndist_eq_zero.1 (I.lower_lt_upper i).ne).symm
... ‚â§ I.distortion * nndist (I.lower i) (I.upper i) :
  mul_le_mul_right' (finset.le_sup $ finset.mem_univ i) _

lemma dist_le_distortion_mul (I : box Œπ) (i : Œπ) :
  dist I.lower I.upper ‚â§ I.distortion * (I.upper i - I.lower i) :=
have A : I.lower i - I.upper i < 0, from sub_neg.2 (I.lower_lt_upper i),
by simpa only [‚Üê nnreal.coe_le_coe, ‚Üê dist_nndist, nnreal.coe_mul, real.dist_eq,
  abs_of_neg A, neg_sub] using I.nndist_le_distortion_mul i

end box

open marked_partition box

def Riemann : filter (marked_partition I) :=
(‚®Ö r ‚â† (0 : ‚Ñù‚â•0‚àû), ùìü {œÄ | ‚àÄ J ‚àà œÄ, edist (J : _).lower J.upper ‚â§ r}) ‚äì ùìü {œÄ | is_Henstock œÄ}

def McShane : filter (marked_partition I) :=
‚®Ö (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû) (hr : ‚àÄ x ‚àà I.Icc, r x ‚â† 0), ùìü {œÄ | is_subordinate œÄ r}

def Henstock : filter (marked_partition I) :=
McShane ‚äì ùìü {œÄ | is_Henstock œÄ}

def Henstock' : filter (marked_partition I) :=
‚®Ü c : ‚Ñù‚â•0, Henstock ‚äì ùìü {œÄ | ‚àÄ J ‚àà œÄ, distortion J ‚â§ c}

lemma has_basis_McShane :
  (@McShane _ _ I).has_basis (Œª r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû, ‚àÄ x ‚àà I.Icc, r x ‚â† 0)
    (Œª r, {œÄ | œÄ.is_subordinate r}) :=
begin
  refine has_basis_binfi_principal' (Œª r hr r' hr', ‚ü®Œª x, min (r x) (r' x), _, _, _‚ü©)
    ‚ü®1, Œª _ _, ennreal.zero_lt_one.ne'‚ü©,
  exacts [Œª x hx, min_ne_bot.2 ‚ü®hr x hx, hr' x hx‚ü©, Œª œÄ hœÄ, hœÄ.mono $ Œª x hx, min_le_left _ _,
    Œª œÄ hœÄ, hœÄ.mono $ Œª x hx, min_le_right _ _]
end

lemma has_basis_Henstock :
  (@Henstock _ _ I).has_basis (Œª r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû, ‚àÄ x ‚àà I.Icc, r x ‚â† 0)
    (Œª r, {œÄ | œÄ.is_subordinate r ‚àß œÄ.is_Henstock}) :=
has_basis_McShane.inf_principal _

lemma has_basis_Henstock' :
  (@Henstock' _ _ I).has_basis (Œª r : ‚Ñù‚â•0 ‚Üí (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù‚â•0‚àû, ‚àÄ c (x ‚àà I.Icc), r c x ‚â† 0)
    (Œª r, {œÄ | ‚àÉ c, œÄ.is_subordinate (r c) ‚àß œÄ.is_Henstock ‚àß
      ‚àÄ (J ‚àà œÄ), (J : _).distortion ‚â§ c}) :=
begin
  have := Œª c : ‚Ñù‚â•0, (@has_basis_Henstock Œπ _ I).inf_principal {œÄ | ‚àÄ J ‚àà œÄ, distortion J ‚â§ c},
  simpa only [set_of_exists, and.assoc, ‚Üê set_of_and] using has_basis_supr this
end

lemma has_basis_Riemann :
  (@Riemann _ _ I).has_basis (Œª r : ‚Ñù‚â•0‚àû, r ‚â† 0)
    (Œª r, {œÄ | (‚àÄ J ‚àà œÄ, edist (J : _).lower J.upper ‚â§ r) ‚àß œÄ.is_Henstock}) :=
begin
  convert (has_basis_binfi_principal' _ _).inf_principal _,
  exact Œª r hr r' hr', ‚ü®min r r', min_ne_bot.2 ‚ü®hr, hr'‚ü©,
    Œª œÄ hœÄ J hJ, (hœÄ J hJ).trans $ min_le_left _ _,
    Œª œÄ hœÄ J hJ, (hœÄ J hJ).trans $ min_le_right _ _‚ü©,
  exact ‚ü®1, ennreal.zero_lt_one.ne'‚ü©
end

lemma Henstock_le_McShane : @Henstock _ _ I ‚â§ McShane := inf_le_left

lemma Henstock_le_Riemann : @Henstock _ _ I ‚â§ Riemann :=
begin
  refine (inf_le_inf_right _ $ le_binfi $ Œª r hr, _),
  refine binfi_le_of_le (Œª _, r / 2) (Œª _ _, (ennreal.half_pos $ pos_iff_ne_zero.2 hr).ne') _,
  refine (principal_mono.2 $ Œª œÄ hœÄ J hJ, _),
  simpa only [two_mul, ennreal.add_halves] using hœÄ.edist_le hJ
end

lemma Henstock'_le_Henstock : @Henstock' _ _ I ‚â§ Henstock :=
supr_le $ Œª c, inf_le_left

instance Henstock'_ne_bot : (@Henstock' _ _ I).ne_bot :=
has_basis_Henstock'.ne_bot_iff.2 $ Œª r hr,
  let ‚ü®œÄ, hHen, hr, hsub‚ü© := exists_is_Henstock_is_subordinate_homothetic I (hr _) in
  ‚ü®œÄ, distortion I, hr, hHen, Œª J hJ,
    let ‚ü®n, hn‚ü© := hsub J hJ in (distortion_eq_of_sub_eq_div hn).le‚ü©

instance Henstock_ne_bot : (@Henstock _ _ I).ne_bot := ne_bot_of_le Henstock'_le_Henstock
instance McShane_ne_bot : (@McShane _ _ I).ne_bot := ne_bot_of_le Henstock_le_McShane
instance Riemann_ne_bot : (@Riemann _ _ I).ne_bot := ne_bot_of_le Henstock_le_Riemann

end box_integral
