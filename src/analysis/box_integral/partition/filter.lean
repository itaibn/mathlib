/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.box_integral.partition.subbox_induction
import analysis.box_integral.partition.additive

open set function filter metric finset bool
open_locale classical topological_space filter nnreal
noncomputable theory

namespace box_integral

variables {Œπ : Type*} [fintype Œπ] {I J : box Œπ} {c : ‚Ñù‚â•0} {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù}

namespace tagged_prepartition

def union_subordinate_compl (œÄ : tagged_prepartition I) (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
  tagged_prepartition I :=
(œÄ.union_compl (œÄ.to_prepartition.compl.to_subordinate r)).get (show _ = _, by simp)

@[simp] lemma distortion_union_subordinate_compl (œÄ : tagged_prepartition I) (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
  (œÄ.union_subordinate_compl r).distortion = max œÄ.distortion œÄ.to_prepartition.compl.distortion :=
finset.sup_union.trans $ congr_arg (max _) $ prepartition.distortion_to_subordinate _ _

lemma is_partition_union_subordinate_compl (œÄ : tagged_prepartition I) (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
  is_partition (œÄ.union_subordinate_compl r) :=
is_partition_union_compl_get _

end tagged_prepartition

@[ext] structure integration_filter : Type :=
(bRiemann bHenstock bDistortion : bool)

namespace integration_filter

instance : bounded_lattice integration_filter :=
{ le := Œª l‚ÇÅ l‚ÇÇ, (l‚ÇÅ.1 ‚â§ l‚ÇÇ.1) ‚àß (l‚ÇÇ.2 ‚â§ l‚ÇÅ.2) ‚àß (l‚ÇÇ.3 ‚â§ l‚ÇÅ.3),
  le_refl := Œª l, ‚ü®le_rfl, le_rfl, le_rfl‚ü©,
  le_trans := Œª l‚ÇÅ l‚ÇÇ l‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ, ‚ü®h‚ÇÅ‚ÇÇ.1.trans h‚ÇÇ‚ÇÉ.1, h‚ÇÇ‚ÇÉ.2.1.trans h‚ÇÅ‚ÇÇ.2.1, h‚ÇÇ‚ÇÉ.2.2.trans h‚ÇÅ‚ÇÇ.2.2‚ü©,
  le_antisymm := Œª l‚ÇÅ l‚ÇÇ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ, ext _ _ (le_antisymm h‚ÇÅ‚ÇÇ.1 h‚ÇÇ‚ÇÅ.1) (le_antisymm h‚ÇÇ‚ÇÅ.2.1 h‚ÇÅ‚ÇÇ.2.1)
    (le_antisymm h‚ÇÇ‚ÇÅ.2.2 h‚ÇÅ‚ÇÇ.2.2),
  inf := Œª l‚ÇÅ l‚ÇÇ, ‚ü®l‚ÇÅ.1 && l‚ÇÇ.1, l‚ÇÅ.2 || l‚ÇÇ.2, l‚ÇÅ.3 || l‚ÇÇ.3‚ü©,
  inf_le_left := Œª l‚ÇÅ l‚ÇÇ, ‚ü®band_le_left _ _, left_le_bor _ _, left_le_bor _ _‚ü©,
  inf_le_right := Œª l‚ÇÅ l‚ÇÇ, ‚ü®band_le_right _ _, right_le_bor _ _, right_le_bor _ _‚ü©,
  le_inf := Œª l‚ÇÅ l‚ÇÇ l‚ÇÉ h‚ÇÅ h‚ÇÇ, ‚ü®le_band h‚ÇÅ.1 h‚ÇÇ.1, bor_le h‚ÇÅ.2.1 h‚ÇÇ.2.1, bor_le h‚ÇÅ.2.2 h‚ÇÇ.2.2‚ü©,
  sup := Œª l‚ÇÅ l‚ÇÇ, ‚ü®l‚ÇÅ.1 || l‚ÇÇ.1, l‚ÇÅ.2 && l‚ÇÇ.2, l‚ÇÅ.3 && l‚ÇÇ.3‚ü©,
  le_sup_left := Œª l‚ÇÅ l‚ÇÇ, ‚ü®left_le_bor _ _, band_le_left _ _, band_le_left _ _‚ü©,
  le_sup_right := Œª l‚ÇÅ l‚ÇÇ, ‚ü®right_le_bor _ _, band_le_right _ _, band_le_right _ _‚ü©,
  sup_le := Œª l‚ÇÅ l‚ÇÇ l‚ÇÉ h‚ÇÅ h‚ÇÇ, ‚ü®bor_le h‚ÇÅ.1 h‚ÇÇ.1, le_band h‚ÇÅ.2.1 h‚ÇÇ.2.1, le_band h‚ÇÅ.2.2 h‚ÇÇ.2.2‚ü©,
  bot := ‚ü®ff, tt, tt‚ü©,
  bot_le := Œª l, ‚ü®ff_le, le_tt, le_tt‚ü©,
  top := ‚ü®tt, ff, ff‚ü©,
  le_top := Œª l, ‚ü®le_tt, ff_le, ff_le‚ü© }

def to_set (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0) (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
  set (tagged_prepartition I) :=
{œÄ | œÄ.is_subordinate r ‚àß (l.bHenstock ‚Üí œÄ.is_Henstock) ‚àß
  (l.bDistortion ‚Üí œÄ.distortion ‚â§ c ‚àß œÄ.to_prepartition.compl.distortion ‚â§ c)}

def r_cond (l : integration_filter) (I : box Œπ) (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) : Prop :=
(‚àÄ x ‚àà I.Icc, 0 < r x) ‚àß ‚àÄ x ‚àà I.Icc, l.bRiemann ‚Üí r x = r I.upper

def to_filter_distortion (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0) :
  filter (tagged_prepartition I) :=
‚®Ö (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) (hr : l.r_cond I r), ùìü (l.to_set I c r)

def to_filter (l : integration_filter) (I : box Œπ) :
  filter (tagged_prepartition I) :=
‚®Ü c : ‚Ñù‚â•0, l.to_filter_distortion I c

def to_filter_distortion_Union (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0)
  (œÄ‚ÇÄ : prepartition I) :=
l.to_filter_distortion I c ‚äì ùìü {œÄ | œÄ.Union = œÄ‚ÇÄ.Union}

def to_filter_Union (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :=
‚®Ü c : ‚Ñù‚â•0, l.to_filter_distortion_Union I c œÄ‚ÇÄ

lemma to_filter_inf_Union_eq (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :
  l.to_filter I ‚äì ùìü {œÄ | œÄ.Union = œÄ‚ÇÄ.Union} = l.to_filter_Union I œÄ‚ÇÄ :=
(supr_inf_principal _ _).symm

lemma r_cond_of_bRiemann_eq_ff (l : integration_filter) (hl : l.bRiemann = ff) :
  l.r_cond I r ‚Üî ‚àÄ x ‚àà I.Icc, 0 < r x :=
by simp [r_cond, hl]

@[mono] lemma to_set_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ)
  {c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0} (hc : c‚ÇÅ ‚â§ c‚ÇÇ) {r‚ÇÅ r‚ÇÇ : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hr : ‚àÄ x ‚àà I.Icc, r‚ÇÅ x ‚â§ r‚ÇÇ x) :
  l‚ÇÅ.to_set I c‚ÇÅ r‚ÇÅ ‚äÜ l‚ÇÇ.to_set I c‚ÇÇ r‚ÇÇ :=
Œª œÄ ‚ü®hr', hH, hd‚ü©, ‚ü®hr'.mono hr, Œª h‚ÇÇ, hH (le_iff_imp.1 h.2.1 h‚ÇÇ),
  Œª h‚ÇÉ, (hd (le_iff_imp.1 h.2.2 h‚ÇÉ)).imp (Œª h, h.trans hc) (Œª h, h.trans hc)‚ü©

lemma union_subordinate_compl_mem_to_set {l : integration_filter} {c : ‚Ñù‚â•0} {r‚ÇÅ r‚ÇÇ : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù}
  (hr‚ÇÅ : ‚àÄ x ‚àà I.Icc, 0 < r‚ÇÅ x) (hr‚ÇÇ : ‚àÄ x ‚àà I.Icc, r‚ÇÅ x ‚â§ r‚ÇÇ x) {œÄ : tagged_prepartition I}
  (hœÄ : œÄ ‚àà l.to_set I c r‚ÇÇ) :
  œÄ.union_subordinate_compl r‚ÇÅ ‚àà l.to_set I c r‚ÇÇ :=
begin
  refine ‚ü®hœÄ.1.union_compl ((prepartition.is_subordinate_to_subordinate _ hr‚ÇÅ).mono hr‚ÇÇ) _,
    Œª hH, ((hœÄ.2.1 hH).union_compl (prepartition.is_Henstock_to_subordinate _ _) _),
    Œª hd, _‚ü©,
  rw [œÄ.distortion_union_subordinate_compl,
    (œÄ.is_partition_union_subordinate_compl _).compl_eq_bot, prepartition.distortion_bot],
  exact ‚ü®max_le (hœÄ.2.2 hd).1 (hœÄ.2.2 hd).2, zero_le c‚ü©
end

lemma bUnion_tagged_mem_to_set {l : integration_filter} {c : ‚Ñù‚â•0} {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù}
  {œÄ : prepartition I} {œÄi : Œ† J, tagged_prepartition J}
  (h : ‚àÄ J ‚àà œÄ, œÄi J ‚àà l.to_set J c r) (hp : ‚àÄ J ‚àà œÄ, (œÄi J).is_partition)
  (hc : l.bDistortion ‚Üí œÄ.compl.distortion ‚â§ c) :
  œÄ.bUnion_tagged œÄi ‚àà l.to_set I c r :=
begin
  refine ‚ü®tagged_prepartition.is_subordinate_bUnion_tagged.2 $ Œª J hJ, (h J hJ).1,
    Œª hH, tagged_prepartition.is_Henstock_bUnion_tagged.2 $ Œª J hJ, (h J hJ).2.1 hH,
    Œª hD, ‚ü®_, _‚ü©‚ü©,
  { rw [prepartition.distortion_bUnion_tagged, finset.sup_le_iff],
    exact Œª J hJ, ((h J hJ).2.2 hD).1 },
  { convert hc hD using 2, apply prepartition.compl_congr,
    exact œÄ.Union_bUnion_partition hp }
end

@[mono] lemma r_cond.mono {I : box Œπ} {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ) {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù}
  (hr :  l‚ÇÇ.r_cond I r) : l‚ÇÅ.r_cond I r :=
‚ü®hr.1, Œª x hx hR, hr.2 x hx (le_iff_imp.1 h.1 hR)‚ü©

lemma r_cond.to_subbox {I J : box Œπ} {l : integration_filter} {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hr : l.r_cond I r)
  (hJ : J ‚â§ I) : l.r_cond J r :=
have J.Icc ‚äÜ I.Icc, from box.le_iff_Icc.1 hJ,
‚ü®Œª x hx, hr.1 x (this hx),
  Œª x hx hR, (hr.2 x (this hx) hR).trans (hr.2 _ (this J.upper_mem_Icc) hR).symm‚ü©

lemma r_cond.min {I : box Œπ} {l : integration_filter} {r‚ÇÅ r‚ÇÇ : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù}
  (h‚ÇÅ : l.r_cond I r‚ÇÅ) (h‚ÇÇ : l.r_cond I r‚ÇÇ) : l.r_cond I (Œª x, min (r‚ÇÅ x) (r‚ÇÇ x)) :=
‚ü®Œª x hx, lt_min (h‚ÇÅ.1 x hx) (h‚ÇÇ.1 x hx), Œª x hx h, congr_arg2 min (h‚ÇÅ.2 x hx h) (h‚ÇÇ.2 x hx h)‚ü©

@[mono] lemma to_filter_distortion_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ)
  {c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0} (hc : c‚ÇÅ ‚â§ c‚ÇÇ) :
  l‚ÇÅ.to_filter_distortion I c‚ÇÅ ‚â§ l‚ÇÇ.to_filter_distortion I c‚ÇÇ :=
infi_le_infi $ Œª r, infi_le_infi2 $ Œª hr,
  ‚ü®hr.mono h, principal_mono.2 $ to_set_mono I h hc (Œª _ _, le_rfl)‚ü©

@[mono] lemma to_filter_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ) :
  l‚ÇÅ.to_filter I ‚â§ l‚ÇÇ.to_filter I :=
supr_le_supr $ Œª c, to_filter_distortion_mono I h le_rfl

@[mono] lemma to_filter_Union_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ)
  (œÄ‚ÇÄ : prepartition I) :
  l‚ÇÅ.to_filter_Union I œÄ‚ÇÄ ‚â§ l‚ÇÇ.to_filter_Union I œÄ‚ÇÄ :=
supr_le_supr $ Œª c, inf_le_inf_right _ $ to_filter_distortion_mono _ h le_rfl

lemma to_filter_Union_congr (I : box Œπ) (l : integration_filter) {œÄ‚ÇÅ œÄ‚ÇÇ : prepartition I}
  (h : œÄ‚ÇÅ.Union = œÄ‚ÇÇ.Union) : l.to_filter_Union I œÄ‚ÇÅ = l.to_filter_Union I œÄ‚ÇÇ :=
by simp only [to_filter_Union, to_filter_distortion_Union, h]

lemma has_basis_to_filter_distortion (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0) :
  (l.to_filter_distortion I c).has_basis (l.r_cond I) (l.to_set I c) :=
has_basis_binfi_principal'
  (Œª r‚ÇÅ hr‚ÇÅ r‚ÇÇ hr‚ÇÇ, ‚ü®_, hr‚ÇÅ.min hr‚ÇÇ,
    to_set_mono _ le_rfl le_rfl (Œª x hx, min_le_left _ _),
    to_set_mono _ le_rfl le_rfl (Œª x hx, min_le_right _ _)‚ü©)
  ‚ü®Œª _, 1, Œª x hx, zero_lt_one, Œª _ _ _, rfl‚ü©

lemma has_basis_to_filter_distortion_Union (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0)
  (œÄ‚ÇÄ : prepartition I) :
  (l.to_filter_distortion_Union I c œÄ‚ÇÄ).has_basis (l.r_cond I)
    (Œª r, l.to_set I c r ‚à© {œÄ | œÄ.Union = œÄ‚ÇÄ.Union}) :=
(l.has_basis_to_filter_distortion I c).inf_principal _

lemma has_basis_to_filter_Union (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :
  (l.to_filter_Union I œÄ‚ÇÄ).has_basis (Œª r : ‚Ñù‚â•0 ‚Üí (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù, ‚àÄ c, l.r_cond I (r c))
    (Œª r, ‚ãÉ c, l.to_set I c (r c) ‚à© {œÄ | œÄ.Union = œÄ‚ÇÄ.Union}) :=
have _ := Œª c, l.has_basis_to_filter_distortion_Union I c œÄ‚ÇÄ,
has_basis_supr this

lemma has_basis_to_filter_Union_top (l : integration_filter) (I : box Œπ) :
  (l.to_filter_Union I ‚ä§).has_basis (Œª r : ‚Ñù‚â•0 ‚Üí (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù, ‚àÄ c, l.r_cond I (r c))
    (Œª r, ‚ãÉ c, l.to_set I c (r c) ‚à© {œÄ | œÄ.is_partition}) :=
by simpa only [tagged_prepartition.is_partition_iff_Union_eq, prepartition.Union_top]
  using l.has_basis_to_filter_Union I ‚ä§

lemma has_basis_to_filter (l : integration_filter) (I : box Œπ) :
  (l.to_filter I).has_basis (Œª r : ‚Ñù‚â•0 ‚Üí (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù, ‚àÄ c, l.r_cond I (r c))
    (Œª r, ‚ãÉ c, l.to_set I c (r c)) :=
has_basis_supr (l.has_basis_to_filter_distortion I)

lemma tendsto_embed_box_to_filter_Union_top (l : integration_filter) (h : I ‚â§ J) :
  tendsto (tagged_prepartition.embed_box I J h) (l.to_filter_Union I ‚ä§)
    (l.to_filter_Union J (prepartition.single J I h)) :=
begin
  simp only [to_filter_Union, tendsto_supr], intro c,
  refine le_supr_of_le (max c (prepartition.single J I h).compl.distortion) _,
  refine ((l.has_basis_to_filter_distortion_Union I c ‚ä§).tendsto_iff
    (l.has_basis_to_filter_distortion_Union J _ _)).2 (Œª r hr, _),
  have : I.Icc ‚äÜ J.Icc, from box.le_iff_Icc.1 h,
  refine ‚ü®r, hr.to_subbox h, Œª œÄ hœÄ, _‚ü©,
  rw [mem_inter_eq, mem_set_of_eq, prepartition.Union_top] at hœÄ,
  rw [prepartition.Union_single],
  refine ‚ü®‚ü®hœÄ.1.1, hœÄ.1.2.1, Œª hD, ‚ü®le_trans _ (le_max_left _ _), _‚ü©‚ü©, hœÄ.2‚ü©,
  { exact (hœÄ.1.2.2 hD).1 },
  { convert le_max_right _ _ using 3,
    exact prepartition.compl_congr ((prepartition.Union_single _).trans hœÄ.2.symm) }
end

lemma nonempty_to_set_inter_le_Union_eq (l : integration_filter) {I : box Œπ} (œÄ‚ÇÄ : prepartition I)
  {c : ‚Ñù‚â•0} (hc‚ÇÅ : œÄ‚ÇÄ.distortion ‚â§ c) (hc‚ÇÇ : œÄ‚ÇÄ.compl.distortion ‚â§ c)
  {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hr : ‚àÄ x ‚àà I.Icc, 0 < r x) :
  (l.to_set I c r ‚à© {œÄ | œÄ.to_prepartition ‚â§ œÄ‚ÇÄ ‚àß œÄ.Union = œÄ‚ÇÄ.Union}).nonempty :=
begin
  rcases œÄ‚ÇÄ.exists_tagged_le_is_Henstock_is_subordinate_Union_eq hr
    with ‚ü®œÄ, hle, hH, hr, hd, hU‚ü©,
  exact ‚ü®œÄ, ‚ü®hr, Œª _, hH, Œª _, ‚ü®hd.trans_le hc‚ÇÅ, by rwa [prepartition.compl_congr hU]‚ü©‚ü©, ‚ü®hle, hU‚ü©‚ü©
end

lemma nonempty_to_set_inter_is_partition (l : integration_filter) (I : box Œπ) {c : ‚Ñù‚â•0}
  (hc : I.distortion ‚â§ c) {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hr : ‚àÄ x ‚àà I.Icc, 0 < r x) :
  (l.to_set I c r ‚à© {œÄ | œÄ.is_partition}).nonempty :=
begin
  rcases (‚ä§ : prepartition I).exists_tagged_le_is_Henstock_is_subordinate_Union_eq hr
    with ‚ü®œÄ, hle, hH, hr, hd, hU‚ü©,
  rw prepartition.distortion_top at hd,
  rw [prepartition.Union_top, ‚Üê tagged_prepartition.is_partition_iff_Union_eq] at hU,
  refine ‚ü®œÄ, ‚ü®hr, Œª _, hH, Œª hD, ‚ü®hd.symm ‚ñ∏ hc, _‚ü©‚ü©, hU‚ü©,
  rw [hU.compl_eq_bot, prepartition.distortion_bot], exact zero_le c
end

lemma to_filter_distortion_Union_ne_bot (l : integration_filter) (I : box Œπ)
  (œÄ‚ÇÄ : prepartition I) (hc‚ÇÅ : œÄ‚ÇÄ.distortion ‚â§ c) (hc‚ÇÇ : œÄ‚ÇÄ.compl.distortion ‚â§ c) :
  (l.to_filter_distortion_Union I c œÄ‚ÇÄ).ne_bot :=
((l.has_basis_to_filter_distortion I _).inf_principal _).ne_bot_iff.2 $ Œª r hr,
  (l.nonempty_to_set_inter_le_Union_eq œÄ‚ÇÄ hc‚ÇÅ hc‚ÇÇ hr.1).mono $
    inter_subset_inter_right _ $ Œª œÄ, and.right

instance to_filter_distortion_Union_ne_bot' (l : integration_filter) (I : box Œπ)
  (œÄ‚ÇÄ : prepartition I) :
  (l.to_filter_distortion_Union I (max œÄ‚ÇÄ.distortion œÄ‚ÇÄ.compl.distortion) œÄ‚ÇÄ).ne_bot :=
l.to_filter_distortion_Union_ne_bot I œÄ‚ÇÄ (le_max_left _ _) (le_max_right _ _)

instance to_filter_distortion_ne_bot (l : integration_filter) (I : box Œπ) :
  (l.to_filter_distortion I I.distortion).ne_bot :=
by simpa using (l.to_filter_distortion_Union_ne_bot' I ‚ä§).mono inf_le_left

instance to_filter_ne_bot (l : integration_filter) (I : box Œπ) : (l.to_filter I).ne_bot :=
(l.to_filter_distortion_ne_bot I).mono $ le_supr _ _

instance to_filter_Union_ne_bot (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :
  (l.to_filter_Union I œÄ‚ÇÄ).ne_bot :=
(l.to_filter_distortion_Union_ne_bot' I œÄ‚ÇÄ).mono $
  le_supr (Œª c, l.to_filter_distortion_Union I c œÄ‚ÇÄ) _

instance : decidable_rel ((‚â§) : integration_filter ‚Üí integration_filter ‚Üí Prop) :=
Œª _ _, and.decidable

instance : decidable_eq integration_filter := Œª x y, decidable_of_iff _ (ext_iff x y).symm

lemma eventually_is_partition (l : integration_filter) (I : box Œπ) :
  ‚àÄ·∂† œÄ in l.to_filter_Union I ‚ä§, tagged_prepartition.is_partition œÄ :=
eventually_supr.2 $ Œª c, eventually_inf_principal.2 $ eventually_of_forall $
  Œª œÄ h, œÄ.is_partition_iff_Union_eq.2 (h.trans prepartition.Union_top)

def Riemann : integration_filter := ‚ü®tt, tt, ff‚ü©

def McShane : integration_filter := ‚ü®ff, ff, ff‚ü©

def Henstock : integration_filter := ‚ü®ff, tt, ff‚ü©

lemma Henstock_le_Riemann : Henstock ‚â§ Riemann := dec_trivial

lemma Henstock_le_McShane : Henstock ‚â§ McShane := dec_trivial

end integration_filter

end box_integral
