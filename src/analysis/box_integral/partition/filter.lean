/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.box_integral.partition.subbox_induction

open set function filter metric finset bool
open_locale classical topological_space filter nnreal
noncomputable theory

namespace box_integral

@[ext] structure integration_filter : Type :=
(bRiemann bHenstock bDistortion : bool)

namespace integration_filter

instance : bounded_lattice integration_filter :=
{ le := Œª l‚ÇÅ l‚ÇÇ, (l‚ÇÅ.1 ‚â§ l‚ÇÇ.1) ‚àß (l‚ÇÇ.2 ‚â§ l‚ÇÅ.2) ‚àß (l‚ÇÇ.3 ‚â§ l‚ÇÅ.3),
  le_refl := Œª l, ‚ü®le_rfl, le_rfl, le_rfl‚ü©,
  le_trans := Œª l‚ÇÅ l‚ÇÇ l‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ, ‚ü®h‚ÇÅ‚ÇÇ.1.trans h‚ÇÇ‚ÇÉ.1, h‚ÇÇ‚ÇÉ.2.1.trans h‚ÇÅ‚ÇÇ.2.1, h‚ÇÇ‚ÇÉ.2.2.trans h‚ÇÅ‚ÇÇ.2.2‚ü©,
  le_antisymm := Œª l‚ÇÅ l‚ÇÇ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ, ext _ _ (le_antisymm h‚ÇÅ‚ÇÇ.1 h‚ÇÇ‚ÇÅ.1) (le_antisymm h‚ÇÇ‚ÇÅ.2.1 h‚ÇÅ‚ÇÇ.2.1)
    (le_antisymm h‚ÇÇ‚ÇÅ.2.2 h‚ÇÅ‚ÇÇ.2.2),
  inf := Œª l‚ÇÅ l‚ÇÇ, ‚ü®l‚ÇÅ.1 && l‚ÇÇ.1, l‚ÇÅ.2 || l‚ÇÇ.2, l‚ÇÅ.3 || l‚ÇÇ.3‚ü©,
  inf_le_left := Œª l‚ÇÅ l‚ÇÇ, ‚ü®band_le_left _ _, left_le_bor _ _, left_le_bor _ _‚ü©,
  inf_le_right := Œª l‚ÇÅ l‚ÇÇ, ‚ü®band_le_right _ _, right_le_bor _ _, right_le_bor _ _‚ü©,
  le_inf := Œª l‚ÇÅ l‚ÇÇ l‚ÇÉ h‚ÇÅ h‚ÇÇ, ‚ü®le_band h‚ÇÅ.1 h‚ÇÇ.1, bor_le h‚ÇÅ.2.1 h‚ÇÇ.2.1, bor_le h‚ÇÅ.2.2 h‚ÇÇ.2.2‚ü©,
  sup := Œª l‚ÇÅ l‚ÇÇ, ‚ü®l‚ÇÅ.1 || l‚ÇÇ.1, l‚ÇÅ.2 && l‚ÇÇ.2, l‚ÇÅ.3 && l‚ÇÇ.3‚ü©,
  le_sup_left := Œª l‚ÇÅ l‚ÇÇ, ‚ü®left_le_bor _ _, band_le_left _ _, band_le_left _ _‚ü©,
  le_sup_right := Œª l‚ÇÅ l‚ÇÇ, ‚ü®right_le_bor _ _, band_le_right _ _, band_le_right _ _‚ü©,
  sup_le := Œª l‚ÇÅ l‚ÇÇ l‚ÇÉ h‚ÇÅ h‚ÇÇ, ‚ü®bor_le h‚ÇÅ.1 h‚ÇÇ.1, le_band h‚ÇÅ.2.1 h‚ÇÇ.2.1, le_band h‚ÇÅ.2.2 h‚ÇÇ.2.2‚ü©,
  bot := ‚ü®ff, tt, tt‚ü©,
  bot_le := Œª l, ‚ü®ff_le, le_tt, le_tt‚ü©,
  top := ‚ü®tt, ff, ff‚ü©,
  le_top := Œª l, ‚ü®le_tt, ff_le, ff_le‚ü© }

variables {Œπ : Type*} [fintype Œπ]

def to_set (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0) (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) :
  set (tagged_prepartition I) :=
{œÄ | œÄ.is_subordinate r ‚àß (l.bHenstock ‚Üí œÄ.is_Henstock) ‚àß (l.bDistortion ‚Üí œÄ.distortion ‚â§ c)}

def prepartition_filter_aux (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0) :
  filter (tagged_prepartition I) :=
‚®Ö (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) (h0 : ‚àÄ x ‚àà I.Icc, (0 < r x) ‚àß (l.bRiemann ‚Üí r x = r I.upper)),
  ùìü (l.to_set I c r)

def prepartition_filter (l : integration_filter) (I : box Œπ) :
  filter (tagged_prepartition I) :=
‚®Ü c : ‚Ñù‚â•0, l.prepartition_filter_aux I c

def partition_filter_aux (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) (c : ‚Ñù‚â•0) :=
l.prepartition_filter_aux I c ‚äì ùìü {œÄ | œÄ.to_prepartition ‚â§ œÄ‚ÇÄ ‚àß œÄ.Union = œÄ‚ÇÄ.Union}

def partition_filter (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :=
l.prepartition_filter I ‚äì ùìü {œÄ | œÄ.to_prepartition ‚â§ œÄ‚ÇÄ ‚àß œÄ.Union = œÄ‚ÇÄ.Union}

lemma supr_partition_filter_aux (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :
  (‚®Ü c, l.partition_filter_aux I œÄ‚ÇÄ  c) = l.partition_filter I œÄ‚ÇÄ :=
supr_inf_principal _ _

@[mono] lemma to_set_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ)
  {c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0} (hc : c‚ÇÅ ‚â§ c‚ÇÇ) {r‚ÇÅ r‚ÇÇ : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hr : ‚àÄ x ‚àà I.Icc, r‚ÇÅ x ‚â§ r‚ÇÇ x) :
  l‚ÇÅ.to_set I c‚ÇÅ r‚ÇÅ ‚äÜ l‚ÇÇ.to_set I c‚ÇÇ r‚ÇÇ :=
Œª œÄ ‚ü®hr', hH, hd‚ü©, ‚ü®hr'.mono hr, Œª h‚ÇÇ, hH (le_iff_imp.1 h.2.1 h‚ÇÇ),
      Œª h‚ÇÉ, (hd (le_iff_imp.1 h.2.2 h‚ÇÉ)).trans hc‚ü©

@[mono] lemma prepartition_filter_aux_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ)
  {c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0} (hc : c‚ÇÅ ‚â§ c‚ÇÇ) :
  l‚ÇÅ.prepartition_filter_aux I c‚ÇÅ ‚â§ l‚ÇÇ.prepartition_filter_aux I c‚ÇÇ :=
infi_le_infi $ Œª r, infi_le_infi2 $ Œª hr,
  ‚ü®Œª x hx, ‚ü®(hr x hx).1, Œª h‚ÇÅ, (hr x hx).2 (le_iff_imp.1 h.1 h‚ÇÅ)‚ü©,
    principal_mono.2 $ to_set_mono I h hc (Œª _ _, le_rfl)‚ü©

@[mono] lemma prepartition_filter_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ) :
  l‚ÇÅ.prepartition_filter I ‚â§ l‚ÇÇ.prepartition_filter I :=
supr_le_supr $ Œª c, prepartition_filter_aux_mono I h le_rfl

@[mono] lemma partition_filter_aux_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ)
  {c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0} (hc : c‚ÇÅ ‚â§ c‚ÇÇ) (œÄ‚ÇÄ : prepartition I) :
  l‚ÇÅ.partition_filter_aux I œÄ‚ÇÄ c‚ÇÅ ‚â§ l‚ÇÇ.partition_filter_aux I œÄ‚ÇÄ  c‚ÇÇ :=
inf_le_inf_right _ $ prepartition_filter_aux_mono I h hc

@[mono] lemma partition_filter_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ)
  (œÄ‚ÇÄ : prepartition I) :
  l‚ÇÅ.partition_filter I œÄ‚ÇÄ ‚â§ l‚ÇÇ.partition_filter I œÄ‚ÇÄ :=
inf_le_inf_right _ $ prepartition_filter_mono I h

lemma has_basis_prepartition_filter_aux (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0) :
  (l.prepartition_filter_aux I c).has_basis
    (Œª r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù, ‚àÄ x ‚àà I.Icc, 0 < r x ‚àß (l.bRiemann ‚Üí r x = r I.upper))
    (l.to_set I c) :=
has_basis_binfi_principal'
  (Œª r‚ÇÅ hr‚ÇÅ r‚ÇÇ hr‚ÇÇ,
    ‚ü®Œª x, min (r‚ÇÅ x) (r‚ÇÇ x), Œª x hx, ‚ü®lt_min (hr‚ÇÅ x hx).1 (hr‚ÇÇ x hx).1,
      Œª hR, congr_arg2 min ((hr‚ÇÅ x hx).2 hR) ((hr‚ÇÇ x hx).2 hR)‚ü©,
      to_set_mono _ le_rfl le_rfl (Œª x hx, min_le_left _ _),
      to_set_mono _ le_rfl le_rfl (Œª x hx, min_le_right _ _)‚ü©)
    ‚ü®Œª _, 1, Œª x hx, ‚ü®zero_lt_one, Œª _, rfl‚ü©‚ü©

lemma has_basis_partition_filter_aux (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I)
  (c : ‚Ñù‚â•0) :
  (l.partition_filter_aux I œÄ‚ÇÄ c).has_basis
    (Œª r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù, ‚àÄ x ‚àà I.Icc, 0 < r x ‚àß (l.bRiemann ‚Üí r x = r I.upper))
    (Œª r, l.to_set I c r ‚à© {œÄ | œÄ.to_prepartition ‚â§ œÄ‚ÇÄ ‚àß œÄ.Union = œÄ‚ÇÄ.Union}) :=
(l.has_basis_prepartition_filter_aux I c).inf_principal _

lemma nonempty_to_set_inter_le_Union_eq (l : integration_filter) {I : box Œπ} (œÄ‚ÇÄ : prepartition I)
  {c : ‚Ñù‚â•0} (hc : œÄ‚ÇÄ.distortion ‚â§ c) {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hr : ‚àÄ x ‚àà I.Icc, 0 < r x) :
  (l.to_set I c r ‚à© {œÄ | œÄ.to_prepartition ‚â§ œÄ‚ÇÄ ‚àß œÄ.Union = œÄ‚ÇÄ.Union}).nonempty :=
begin
  rcases œÄ‚ÇÄ.exists_tagged_le_is_Henstock_is_subordinate_Union_eq hr
    with ‚ü®œÄ, hle, hH, hr, hd, hU‚ü©,
  exact ‚ü®œÄ, ‚ü®hr, Œª _, hH, Œª _, hd.trans_le hc‚ü©, ‚ü®hle, hU‚ü©‚ü©
end

instance partition_filter_aux_ne_bot (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :
  (l.partition_filter_aux I œÄ‚ÇÄ œÄ‚ÇÄ.distortion).ne_bot :=
(l.has_basis_partition_filter_aux I _ _).ne_bot_iff.2 $ Œª r hr,
  l.nonempty_to_set_inter_le_Union_eq œÄ‚ÇÄ le_rfl (Œª x hx, (hr x hx).1)

instance prepartition_filter_aux_ne_bot (l : integration_filter) (I : box Œπ) :
  (l.prepartition_filter_aux I I.distortion).ne_bot :=
by simpa only [prepartition.distortion_top]
  using (l.partition_filter_aux_ne_bot I ‚ä§).mono inf_le_left

instance partition_filter_ne_bot (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :
  (l.partition_filter I œÄ‚ÇÄ).ne_bot :=
(l.partition_filter_aux_ne_bot I œÄ‚ÇÄ).mono $ inf_le_inf_right _ $ le_supr _ _

instance prepartition_filter_ne_bot (l : integration_filter) (I : box Œπ) :
  (l.prepartition_filter I).ne_bot :=
(l.partition_filter_ne_bot I ‚ä§).mono inf_le_left

instance : decidable_rel ((‚â§) : integration_filter ‚Üí integration_filter ‚Üí Prop) :=
Œª _ _, and.decidable

instance : decidable_eq integration_filter := Œª x y, decidable_of_iff _ (ext_iff x y).symm

def Riemann : integration_filter := ‚ü®tt, tt, ff‚ü©

def Riemann' : integration_filter := ‚ü®tt, ff, ff‚ü©

def McShane : integration_filter := ‚ü®ff, ff, ff‚ü©

def Henstock : integration_filter := ‚ü®ff, tt, ff‚ü©

end integration_filter

end box_integral
