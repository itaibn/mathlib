/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.box_integral.partition.subbox_induction
import analysis.box_integral.partition.additive

open set function filter metric finset bool
open_locale classical topological_space filter nnreal
noncomputable theory

namespace box_integral

variables {Œπ : Type*} [fintype Œπ] {I J : box Œπ} {c c‚ÇÅ c‚ÇÇ : ‚Ñù‚â•0} {r r‚ÇÅ r‚ÇÇ : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù}
  {œÄ œÄ‚ÇÅ œÄ‚ÇÇ : tagged_prepartition I}

open tagged_prepartition

@[ext] structure integration_filter : Type :=
(bRiemann bHenstock bDistortion : bool)

variables {l l‚ÇÅ l‚ÇÇ : integration_filter}

namespace integration_filter

instance : bounded_lattice integration_filter :=
{ le := Œª l‚ÇÅ l‚ÇÇ, (l‚ÇÅ.1 ‚â§ l‚ÇÇ.1) ‚àß (l‚ÇÇ.2 ‚â§ l‚ÇÅ.2) ‚àß (l‚ÇÇ.3 ‚â§ l‚ÇÅ.3),
  le_refl := Œª l, ‚ü®le_rfl, le_rfl, le_rfl‚ü©,
  le_trans := Œª l‚ÇÅ l‚ÇÇ l‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ, ‚ü®h‚ÇÅ‚ÇÇ.1.trans h‚ÇÇ‚ÇÉ.1, h‚ÇÇ‚ÇÉ.2.1.trans h‚ÇÅ‚ÇÇ.2.1, h‚ÇÇ‚ÇÉ.2.2.trans h‚ÇÅ‚ÇÇ.2.2‚ü©,
  le_antisymm := Œª l‚ÇÅ l‚ÇÇ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ, ext _ _ (le_antisymm h‚ÇÅ‚ÇÇ.1 h‚ÇÇ‚ÇÅ.1) (le_antisymm h‚ÇÇ‚ÇÅ.2.1 h‚ÇÅ‚ÇÇ.2.1)
    (le_antisymm h‚ÇÇ‚ÇÅ.2.2 h‚ÇÅ‚ÇÇ.2.2),
  inf := Œª l‚ÇÅ l‚ÇÇ, ‚ü®l‚ÇÅ.1 && l‚ÇÇ.1, l‚ÇÅ.2 || l‚ÇÇ.2, l‚ÇÅ.3 || l‚ÇÇ.3‚ü©,
  inf_le_left := Œª l‚ÇÅ l‚ÇÇ, ‚ü®band_le_left _ _, left_le_bor _ _, left_le_bor _ _‚ü©,
  inf_le_right := Œª l‚ÇÅ l‚ÇÇ, ‚ü®band_le_right _ _, right_le_bor _ _, right_le_bor _ _‚ü©,
  le_inf := Œª l‚ÇÅ l‚ÇÇ l‚ÇÉ h‚ÇÅ h‚ÇÇ, ‚ü®le_band h‚ÇÅ.1 h‚ÇÇ.1, bor_le h‚ÇÅ.2.1 h‚ÇÇ.2.1, bor_le h‚ÇÅ.2.2 h‚ÇÇ.2.2‚ü©,
  sup := Œª l‚ÇÅ l‚ÇÇ, ‚ü®l‚ÇÅ.1 || l‚ÇÇ.1, l‚ÇÅ.2 && l‚ÇÇ.2, l‚ÇÅ.3 && l‚ÇÇ.3‚ü©,
  le_sup_left := Œª l‚ÇÅ l‚ÇÇ, ‚ü®left_le_bor _ _, band_le_left _ _, band_le_left _ _‚ü©,
  le_sup_right := Œª l‚ÇÅ l‚ÇÇ, ‚ü®right_le_bor _ _, band_le_right _ _, band_le_right _ _‚ü©,
  sup_le := Œª l‚ÇÅ l‚ÇÇ l‚ÇÉ h‚ÇÅ h‚ÇÇ, ‚ü®bor_le h‚ÇÅ.1 h‚ÇÇ.1, le_band h‚ÇÅ.2.1 h‚ÇÇ.2.1, le_band h‚ÇÅ.2.2 h‚ÇÇ.2.2‚ü©,
  bot := ‚ü®ff, tt, tt‚ü©,
  bot_le := Œª l, ‚ü®ff_le, le_tt, le_tt‚ü©,
  top := ‚ü®tt, ff, ff‚ü©,
  le_top := Œª l, ‚ü®le_tt, ff_le, ff_le‚ü© }

@[protect_proj] structure mem_base_set (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0)
  (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) (œÄ : tagged_prepartition I) : Prop :=
(is_subordinate : œÄ.is_subordinate r)
(is_Henstock : l.bHenstock ‚Üí œÄ.is_Henstock)
(distortion_le : l.bDistortion ‚Üí œÄ.distortion ‚â§ c)
(exists_compl : l.bDistortion ‚Üí ‚àÉ œÄ' : prepartition I, œÄ'.Union = I \ œÄ.Union ‚àß œÄ'.distortion ‚â§ c)

def r_cond (l : integration_filter) (I : box Œπ) (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) : Prop :=
(‚àÄ x ‚àà I.Icc, 0 < r x) ‚àß ‚àÄ x ‚àà I.Icc, l.bRiemann ‚Üí r x = r I.upper

def to_filter_distortion (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0) :
  filter (tagged_prepartition I) :=
‚®Ö (r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù) (hr : l.r_cond I r), ùìü {œÄ | l.mem_base_set I c r œÄ}

def to_filter (l : integration_filter) (I : box Œπ) :
  filter (tagged_prepartition I) :=
‚®Ü c : ‚Ñù‚â•0, l.to_filter_distortion I c

def to_filter_distortion_Union (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0)
  (œÄ‚ÇÄ : prepartition I) :=
l.to_filter_distortion I c ‚äì ùìü {œÄ | œÄ.Union = œÄ‚ÇÄ.Union}

def to_filter_Union (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :=
‚®Ü c : ‚Ñù‚â•0, l.to_filter_distortion_Union I c œÄ‚ÇÄ

lemma to_filter_inf_Union_eq (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :
  l.to_filter I ‚äì ùìü {œÄ | œÄ.Union = œÄ‚ÇÄ.Union} = l.to_filter_Union I œÄ‚ÇÄ :=
(supr_inf_principal _ _).symm

lemma r_cond_of_bRiemann_eq_ff (l : integration_filter) (hl : l.bRiemann = ff) :
  l.r_cond I r ‚Üî ‚àÄ x ‚àà I.Icc, 0 < r x :=
by simp [r_cond, hl]

lemma mem_base_set.mono' (I : box Œπ) (h : l‚ÇÅ ‚â§ l‚ÇÇ) (hc : c‚ÇÅ ‚â§ c‚ÇÇ) {œÄ : tagged_prepartition I}
  (hr : ‚àÄ J ‚àà œÄ, r‚ÇÅ (œÄ.tag J) ‚â§ r‚ÇÇ (œÄ.tag J)) (hœÄ : l‚ÇÅ.mem_base_set I c‚ÇÅ r‚ÇÅ œÄ) :
  l‚ÇÇ.mem_base_set I c‚ÇÇ r‚ÇÇ œÄ :=
‚ü®hœÄ.1.mono' hr, Œª h‚ÇÇ, hœÄ.2 (le_iff_imp.1 h.2.1 h‚ÇÇ),
  Œª hD, (hœÄ.3 (le_iff_imp.1 h.2.2 hD)).trans hc,
  Œª hD, (hœÄ.4 (le_iff_imp.1 h.2.2 hD)).imp $ Œª œÄ hœÄ, ‚ü®hœÄ.1, hœÄ.2.trans hc‚ü©‚ü©

@[mono] lemma mem_base_set.mono (I : box Œπ) (h : l‚ÇÅ ‚â§ l‚ÇÇ) (hc : c‚ÇÅ ‚â§ c‚ÇÇ) {œÄ : tagged_prepartition I}
  (hr : ‚àÄ x ‚àà I.Icc, r‚ÇÅ x ‚â§ r‚ÇÇ x) (hœÄ : l‚ÇÅ.mem_base_set I c‚ÇÅ r‚ÇÅ œÄ) :
  l‚ÇÇ.mem_base_set I c‚ÇÇ r‚ÇÇ œÄ :=
hœÄ.mono' I h hc $ Œª J hJ, hr _ $ œÄ.tag_mem_Icc J

lemma mem_base_set.exists_common_compl (h‚ÇÅ : l.mem_base_set I c‚ÇÅ r‚ÇÅ œÄ‚ÇÅ)
  (h‚ÇÇ : l.mem_base_set I c‚ÇÇ r‚ÇÇ œÄ‚ÇÇ) (hU : œÄ‚ÇÅ.Union = œÄ‚ÇÇ.Union) :
  ‚àÉ œÄ : prepartition I, œÄ.Union = I \ œÄ‚ÇÅ.Union ‚àß
    (l.bDistortion ‚Üí œÄ.distortion ‚â§ c‚ÇÅ) ‚àß (l.bDistortion ‚Üí œÄ.distortion ‚â§ c‚ÇÇ) :=
begin
  wlog hc : c‚ÇÅ ‚â§ c‚ÇÇ := le_total c‚ÇÅ c‚ÇÇ using [c‚ÇÅ c‚ÇÇ r‚ÇÅ r‚ÇÇ œÄ‚ÇÅ œÄ‚ÇÇ, c‚ÇÇ c‚ÇÅ r‚ÇÇ r‚ÇÅ œÄ‚ÇÇ œÄ‚ÇÅ] tactic.skip,
  { by_cases hD : (l.bDistortion : Prop),
    { rcases h‚ÇÅ.4 hD with ‚ü®œÄ, hœÄU, hœÄc‚ü©,
      exact ‚ü®œÄ, hœÄU, Œª _, hœÄc, Œª _, hœÄc.trans hc‚ü© },
    { exact ‚ü®œÄ‚ÇÅ.to_prepartition.compl, œÄ‚ÇÅ.to_prepartition.Union_compl,
        Œª h, (hD h).elim, Œª h, (hD h).elim‚ü© } },
  { intros h‚ÇÅ h‚ÇÇ hU,
    simpa [hU, and_comm] using this h‚ÇÇ h‚ÇÅ hU.symm }
end

protected lemma mem_base_set.union_compl_to_subordinate (hœÄ‚ÇÅ : l.mem_base_set I c r‚ÇÅ œÄ‚ÇÅ)
  (hr‚ÇÅ : ‚àÄ x ‚àà I.Icc, r‚ÇÇ x ‚â§ r‚ÇÅ x) (hr‚ÇÇ : ‚àÄ x ‚àà I.Icc, 0 < r‚ÇÇ x) {œÄ‚ÇÇ : prepartition I}
  (hU : œÄ‚ÇÇ.Union = I \ œÄ‚ÇÅ.Union) (hc : l.bDistortion ‚Üí œÄ‚ÇÇ.distortion ‚â§ c) :
  l.mem_base_set I c r‚ÇÅ
    ((œÄ‚ÇÅ.union_compl (œÄ‚ÇÇ.to_subordinate r‚ÇÇ)).get ((œÄ‚ÇÇ.Union_to_subordinate _).trans hU)) :=
begin
  refine ‚ü®hœÄ‚ÇÅ.1.union_compl ((œÄ‚ÇÇ.is_subordinate_to_subordinate hr‚ÇÇ).mono hr‚ÇÅ) _,
    Œª h, ((hœÄ‚ÇÅ.2 h).union_compl (œÄ‚ÇÇ.is_Henstock_to_subordinate _) _),
    Œª h, (distortion_union_compl_get _).trans_le (max_le (hœÄ‚ÇÅ.3 h) _),
    Œª _, ‚ü®‚ä•, _‚ü©‚ü©,
  { rw œÄ‚ÇÇ.distortion_to_subordinate, exact hc h },
  { simp }
end

protected lemma mem_base_set.filter (hœÄ : l.mem_base_set I c r œÄ) (p : box Œπ ‚Üí Prop) :
  l.mem_base_set I c r (œÄ.filter p) :=
begin
  refine ‚ü®Œª J hJ, hœÄ.1 J (œÄ.mem_filter.1 hJ).1, Œª hH J hJ, hœÄ.2 hH J (œÄ.mem_filter.1 hJ).1,
    Œª hD, (distortion_filter_le _ _).trans (hœÄ.3 hD), Œª hD, _‚ü©,
  rcases hœÄ.4 hD with ‚ü®œÄ‚ÇÅ, hœÄ‚ÇÅU, hc‚ü©,
  set œÄ‚ÇÇ := œÄ.filter (Œª J, ¬¨p J),
  have : disjoint œÄ‚ÇÅ.Union œÄ‚ÇÇ.Union,
    by simpa [œÄ‚ÇÇ, hœÄ‚ÇÅU] using (disjoint_diff.mono_left sdiff_le).symm,
  refine ‚ü®(œÄ‚ÇÅ.disj_union œÄ‚ÇÇ.to_prepartition).get this, _, _‚ü©,
  { suffices : ‚ÜëI \ œÄ.Union ‚à™ œÄ.Union \ (œÄ.filter p).Union = ‚ÜëI \ (œÄ.filter p).Union, by simpa *,
    have : (œÄ.filter p).Union ‚äÜ œÄ.Union, from bUnion_subset_bUnion_left (finset.filter_subset _ _),
    ext x, fsplit,
    { rintro (‚ü®hxI, hxœÄ‚ü©|‚ü®hxœÄ, hxp‚ü©),
      exacts [‚ü®hxI, mt (@this x) hxœÄ‚ü©, ‚ü®œÄ.Union_subset hxœÄ, hxp‚ü©] },
    { rintro ‚ü®hxI, hxp‚ü©, by_cases hxœÄ : x ‚àà œÄ.Union,
      exacts [or.inr ‚ü®hxœÄ, hxp‚ü©, or.inl ‚ü®hxI, hxœÄ‚ü©] } },
  { have : (œÄ.filter (Œª J, ¬¨p J)).distortion ‚â§ c, from (distortion_filter_le _ _).trans (hœÄ.3 hD),
    simpa [hc] }
end

lemma bUnion_tagged_mem_base_set {œÄ : prepartition I} {œÄi : Œ† J, tagged_prepartition J}
  (h : ‚àÄ J ‚àà œÄ, l.mem_base_set J c r (œÄi J)) (hp : ‚àÄ J ‚àà œÄ, (œÄi J).is_partition)
  (hc : l.bDistortion ‚Üí œÄ.compl.distortion ‚â§ c) :
  l.mem_base_set I c r (œÄ.bUnion_tagged œÄi) :=
begin
  refine ‚ü®tagged_prepartition.is_subordinate_bUnion_tagged.2 $ Œª J hJ, (h J hJ).1,
    Œª hH, tagged_prepartition.is_Henstock_bUnion_tagged.2 $ Œª J hJ, (h J hJ).2 hH,
    Œª hD, _, Œª hD, _‚ü©,
  { rw [prepartition.distortion_bUnion_tagged, finset.sup_le_iff],
    exact Œª J hJ, (h J hJ).3 hD },
  { refine ‚ü®_, _, hc hD‚ü©,
    rw [œÄ.Union_compl, ‚Üê œÄ.Union_bUnion_partition hp], refl }
end

@[mono] lemma r_cond.mono (h : l‚ÇÅ ‚â§ l‚ÇÇ) (hr :  l‚ÇÇ.r_cond I r) : l‚ÇÅ.r_cond I r :=
‚ü®hr.1, Œª x hx hR, hr.2 x hx (le_iff_imp.1 h.1 hR)‚ü©

lemma r_cond.to_subbox (hr : l.r_cond I r) (hJ : J ‚â§ I) : l.r_cond J r :=
have J.Icc ‚äÜ I.Icc, from box.le_iff_Icc.1 hJ,
‚ü®Œª x hx, hr.1 x (this hx),
  Œª x hx hR, (hr.2 x (this hx) hR).trans (hr.2 _ (this J.upper_mem_Icc) hR).symm‚ü©

lemma r_cond.min (h‚ÇÅ : l.r_cond I r‚ÇÅ) (h‚ÇÇ : l.r_cond I r‚ÇÇ) : l.r_cond I (Œª x, min (r‚ÇÅ x) (r‚ÇÇ x)) :=
‚ü®Œª x hx, lt_min (h‚ÇÅ.1 x hx) (h‚ÇÇ.1 x hx), Œª x hx h, congr_arg2 min (h‚ÇÅ.2 x hx h) (h‚ÇÇ.2 x hx h)‚ü©

@[mono] lemma to_filter_distortion_mono (I : box Œπ) (h : l‚ÇÅ ‚â§ l‚ÇÇ) (hc : c‚ÇÅ ‚â§ c‚ÇÇ) :
  l‚ÇÅ.to_filter_distortion I c‚ÇÅ ‚â§ l‚ÇÇ.to_filter_distortion I c‚ÇÇ :=
infi_le_infi $ Œª r, infi_le_infi2 $ Œª hr,
  ‚ü®hr.mono h, principal_mono.2 $ Œª _, mem_base_set.mono I h hc (Œª _ _, le_rfl)‚ü©

@[mono] lemma to_filter_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ) :
  l‚ÇÅ.to_filter I ‚â§ l‚ÇÇ.to_filter I :=
supr_le_supr $ Œª c, to_filter_distortion_mono I h le_rfl

@[mono] lemma to_filter_Union_mono (I : box Œπ) {l‚ÇÅ l‚ÇÇ : integration_filter} (h : l‚ÇÅ ‚â§ l‚ÇÇ)
  (œÄ‚ÇÄ : prepartition I) :
  l‚ÇÅ.to_filter_Union I œÄ‚ÇÄ ‚â§ l‚ÇÇ.to_filter_Union I œÄ‚ÇÄ :=
supr_le_supr $ Œª c, inf_le_inf_right _ $ to_filter_distortion_mono _ h le_rfl

lemma to_filter_Union_congr (I : box Œπ) (l : integration_filter) {œÄ‚ÇÅ œÄ‚ÇÇ : prepartition I}
  (h : œÄ‚ÇÅ.Union = œÄ‚ÇÇ.Union) : l.to_filter_Union I œÄ‚ÇÅ = l.to_filter_Union I œÄ‚ÇÇ :=
by simp only [to_filter_Union, to_filter_distortion_Union, h]

lemma has_basis_to_filter_distortion (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0) :
  (l.to_filter_distortion I c).has_basis (l.r_cond I) (Œª r, {œÄ | l.mem_base_set I c r œÄ}) :=
has_basis_binfi_principal'
  (Œª r‚ÇÅ hr‚ÇÅ r‚ÇÇ hr‚ÇÇ, ‚ü®_, hr‚ÇÅ.min hr‚ÇÇ,
    Œª _, mem_base_set.mono _ le_rfl le_rfl (Œª x hx, min_le_left _ _),
    Œª _, mem_base_set.mono _ le_rfl le_rfl (Œª x hx, min_le_right _ _)‚ü©)
  ‚ü®Œª _, 1, Œª x hx, zero_lt_one, Œª _ _ _, rfl‚ü©

lemma has_basis_to_filter_distortion_Union (l : integration_filter) (I : box Œπ) (c : ‚Ñù‚â•0)
  (œÄ‚ÇÄ : prepartition I) :
  (l.to_filter_distortion_Union I c œÄ‚ÇÄ).has_basis (l.r_cond I)
    (Œª r, {œÄ | l.mem_base_set I c r œÄ ‚àß œÄ.Union = œÄ‚ÇÄ.Union}) :=
(l.has_basis_to_filter_distortion I c).inf_principal _

lemma has_basis_to_filter_Union (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :
  (l.to_filter_Union I œÄ‚ÇÄ).has_basis (Œª r : ‚Ñù‚â•0 ‚Üí (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù, ‚àÄ c, l.r_cond I (r c))
    (Œª r, {œÄ | ‚àÉ c, l.mem_base_set I c (r c) œÄ ‚àß œÄ.Union = œÄ‚ÇÄ.Union}) :=
have _ := Œª c, l.has_basis_to_filter_distortion_Union I c œÄ‚ÇÄ,
by simpa only [set_of_and, set_of_exists] using has_basis_supr this

lemma has_basis_to_filter_Union_top (l : integration_filter) (I : box Œπ) :
  (l.to_filter_Union I ‚ä§).has_basis (Œª r : ‚Ñù‚â•0 ‚Üí (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù, ‚àÄ c, l.r_cond I (r c))
    (Œª r, {œÄ | ‚àÉ c, l.mem_base_set I c (r c) œÄ ‚àß œÄ.is_partition}) :=
by simpa only [tagged_prepartition.is_partition_iff_Union_eq, prepartition.Union_top]
  using l.has_basis_to_filter_Union I ‚ä§

lemma has_basis_to_filter (l : integration_filter) (I : box Œπ) :
  (l.to_filter I).has_basis (Œª r : ‚Ñù‚â•0 ‚Üí (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù, ‚àÄ c, l.r_cond I (r c))
    (Œª r, {œÄ | ‚àÉ c, l.mem_base_set I c (r c) œÄ}) :=
by simpa only [set_of_exists] using has_basis_supr (l.has_basis_to_filter_distortion I)

lemma tendsto_embed_box_to_filter_Union_top (l : integration_filter) (h : I ‚â§ J) :
  tendsto (tagged_prepartition.embed_box I J h) (l.to_filter_Union I ‚ä§)
    (l.to_filter_Union J (prepartition.single J I h)) :=
begin
  simp only [to_filter_Union, tendsto_supr], intro c,
  set œÄ‚ÇÄ := (prepartition.single J I h),
  refine le_supr_of_le (max c œÄ‚ÇÄ.compl.distortion) _,
  refine ((l.has_basis_to_filter_distortion_Union I c ‚ä§).tendsto_iff
    (l.has_basis_to_filter_distortion_Union J _ _)).2 (Œª r hr, _),
  have : I.Icc ‚äÜ J.Icc, from box.le_iff_Icc.1 h,
  refine ‚ü®r, hr.to_subbox h, Œª œÄ hœÄ, _‚ü©,
  rw [mem_set_of_eq, prepartition.Union_top] at hœÄ,
  refine ‚ü®‚ü®hœÄ.1.1, hœÄ.1.2, Œª hD, le_trans (hœÄ.1.3 hD) (le_max_left _ _), Œª hD, _‚ü©, _‚ü©,
  { refine ‚ü®_, œÄ‚ÇÄ.Union_compl.trans _, le_max_right _ _‚ü©, congr' 1,
    exact (prepartition.Union_single h).trans hœÄ.2.symm },
  { exact hœÄ.2.trans (prepartition.Union_single _).symm }
end

lemma exists_mem_base_set_le_Union_eq (l : integration_filter) (œÄ‚ÇÄ : prepartition I)
  (hc‚ÇÅ : œÄ‚ÇÄ.distortion ‚â§ c) (hc‚ÇÇ : œÄ‚ÇÄ.compl.distortion ‚â§ c)
  {r : (Œπ ‚Üí ‚Ñù) ‚Üí ‚Ñù} (hr : ‚àÄ x ‚àà I.Icc, 0 < r x) :
  ‚àÉ œÄ, l.mem_base_set I c r œÄ ‚àß œÄ.to_prepartition ‚â§ œÄ‚ÇÄ ‚àß œÄ.Union = œÄ‚ÇÄ.Union :=
begin
  rcases œÄ‚ÇÄ.exists_tagged_le_is_Henstock_is_subordinate_Union_eq hr
    with ‚ü®œÄ, hle, hH, hr, hd, hU‚ü©,
  refine ‚ü®œÄ, ‚ü®hr, Œª _, hH, Œª _, hd.trans_le hc‚ÇÅ, Œª hD, ‚ü®œÄ‚ÇÄ.compl, _, hc‚ÇÇ‚ü©‚ü©, ‚ü®hle, hU‚ü©‚ü©,
  exact prepartition.compl_congr hU ‚ñ∏ œÄ.to_prepartition.Union_compl
end

lemma exists_mem_base_set_is_partition (l : integration_filter) (I : box Œπ)
  (hc : I.distortion ‚â§ c) (hr : ‚àÄ x ‚àà I.Icc, 0 < r x) :
  ‚àÉ œÄ, l.mem_base_set I c r œÄ ‚àß œÄ.is_partition :=
begin
  rw ‚Üê prepartition.distortion_top at hc,
  have hc' : (‚ä§ : prepartition I).compl.distortion ‚â§ c, by simp,
  simpa [is_partition_iff_Union_eq] using l.exists_mem_base_set_le_Union_eq ‚ä§ hc hc' hr
end

lemma to_filter_distortion_Union_ne_bot (l : integration_filter) (I : box Œπ)
  (œÄ‚ÇÄ : prepartition I) (hc‚ÇÅ : œÄ‚ÇÄ.distortion ‚â§ c) (hc‚ÇÇ : œÄ‚ÇÄ.compl.distortion ‚â§ c) :
  (l.to_filter_distortion_Union I c œÄ‚ÇÄ).ne_bot :=
((l.has_basis_to_filter_distortion I _).inf_principal _).ne_bot_iff.2 $ Œª r hr,
  (l.exists_mem_base_set_le_Union_eq œÄ‚ÇÄ hc‚ÇÅ hc‚ÇÇ hr.1).imp $ Œª œÄ hœÄ, ‚ü®hœÄ.1, hœÄ.2.2‚ü©

instance to_filter_distortion_Union_ne_bot' (l : integration_filter) (I : box Œπ)
  (œÄ‚ÇÄ : prepartition I) :
  (l.to_filter_distortion_Union I (max œÄ‚ÇÄ.distortion œÄ‚ÇÄ.compl.distortion) œÄ‚ÇÄ).ne_bot :=
l.to_filter_distortion_Union_ne_bot I œÄ‚ÇÄ (le_max_left _ _) (le_max_right _ _)

instance to_filter_distortion_ne_bot (l : integration_filter) (I : box Œπ) :
  (l.to_filter_distortion I I.distortion).ne_bot :=
by simpa using (l.to_filter_distortion_Union_ne_bot' I ‚ä§).mono inf_le_left

instance to_filter_ne_bot (l : integration_filter) (I : box Œπ) : (l.to_filter I).ne_bot :=
(l.to_filter_distortion_ne_bot I).mono $ le_supr _ _

instance to_filter_Union_ne_bot (l : integration_filter) (I : box Œπ) (œÄ‚ÇÄ : prepartition I) :
  (l.to_filter_Union I œÄ‚ÇÄ).ne_bot :=
(l.to_filter_distortion_Union_ne_bot' I œÄ‚ÇÄ).mono $
  le_supr (Œª c, l.to_filter_distortion_Union I c œÄ‚ÇÄ) _

instance : decidable_rel ((‚â§) : integration_filter ‚Üí integration_filter ‚Üí Prop) :=
Œª _ _, and.decidable

instance : decidable_eq integration_filter := Œª x y, decidable_of_iff _ (ext_iff x y).symm

lemma eventually_is_partition (l : integration_filter) (I : box Œπ) :
  ‚àÄ·∂† œÄ in l.to_filter_Union I ‚ä§, tagged_prepartition.is_partition œÄ :=
eventually_supr.2 $ Œª c, eventually_inf_principal.2 $ eventually_of_forall $
  Œª œÄ h, œÄ.is_partition_iff_Union_eq.2 (h.trans prepartition.Union_top)

def Riemann : integration_filter := ‚ü®tt, tt, ff‚ü©

def McShane : integration_filter := ‚ü®ff, ff, ff‚ü©

def Henstock : integration_filter := ‚ü®ff, tt, ff‚ü©

lemma Henstock_le_Riemann : Henstock ‚â§ Riemann := dec_trivial

lemma Henstock_le_McShane : Henstock ‚â§ McShane := dec_trivial

end integration_filter

end box_integral
